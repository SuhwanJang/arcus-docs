{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arcus document","title":"Home"},{"location":"admin/arcus-admin-script-usage/","text":"Arcus Admin Script Usage scripts/arcus.sh \ub294 Arcus cloud\ub97c \uad00\ub9ac\ud558\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uc774\uba70, \uc0ac\uc6a9\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. Usage: ./arcus.sh -h ./arcus.sh [-z <zklist>] deploy <conf_file> | ping <service_code> ./arcus.sh [-z <zklist>] zookeeper init ./arcus.sh [-z <zklist>] zookeeper start|stop|stat ./arcus.sh [-z <zklist>] memcached register <conf_file> | unregister <service_code> ./arcus.sh [-z <zklist>] memcached start|stop|list <service_code> ./arcus.sh [-z <zklist>] memcached listall ./arcus.sh [-z <zklist>] quicksetup <conf_file> -z, --zklist zookeeper ensemble ip:port list, The default is \"localhost:2181\" example) -z 10.0.0.1:2181,10.0.0.2:2181,10.0.0.3:2181 -h, --help This small usage guide <conf_file> Arcus cache cloud configuration file, having cache ip:port list and other settings. Refer to scripts/conf/test.json file <service_code> Arcus cache cloud name that identify each cache cloud uniquely. We also call it \"service code\" as it's a kind of cache cloud service. scripts/arcus.sh \uc758 \uac01 \uba85\ub839\uc5d0\uc11c \uacf5\ud1b5\uc73c\ub85c \ub4e4\uc5b4\uac00\ub294 \uc778\uc790\ub294 ZooKeeper ensemble list\uc774\uba70 \uae30\ubcf8\uac12\uc740 \"localhost:2181\"\uc774\ub2e4. \uac01 \uba85\ub839\ub9c8\ub2e4 \uc774 \uc778\uc790\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc8fc\uc5b4\ub3c4 \ub418\uba70, \uc778\uc790\ub97c \uc0dd\ub7b5\ud558\uace0 \uc2f6\ub2e4\uba74 scripts/arcus.sh \ud30c\uc77c\uc5d0 \uc788\ub294 zklist \ubcc0\uc218\uc758 \uae30\ubcf8\uac12\uc744 \uc218\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. ./arcus.sh [-z \\<zklist>] deploy \\<conf_file> \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc2e4\ud589\ub418\ub294 \uc7a5\ube44\uc758 Arcus \ud328\ud0a4\uc9c0\ub97c ZooKeeper \uc7a5\ube44\uc640 Memcached \uc7a5\ube44\uc5d0 \uc124\uce58\ud55c\ub2e4. \ud574\ub2f9 \uc7a5\ube44\uc5d0 Arcus \ud328\ud0a4\uc9c0\uac00 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74, \uc774\ub97c \uc81c\uac70\ud55c \ud6c4 \ub2e4\uc2dc \uc124\uce58\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] ping \\<service_code> Arcus\uc758 ZooKeeper \uc7a5\ube44\uc640 Memcached \uc7a5\ube44\uc5d0 \ub300\ud574 ping \uba85\ub839\uc744 \uc218\ud589\ud55c\ub2e4. \ucc38\uace0\ub85c, Memcached \uad00\ub828 \uc815\ubcf4\ub294 \\<service_code>\ub85c ZooKeeper\uc5d0\uc11c \uc870\ud68c\ud558\uc5ec \uc5bb\ub294\ub2e4. ./arcus.sh [-z \\<zklist>] zookeeper init init - \uc124\uc815 \ud15c\ud50c\ub9bf(conf/zoo.cfg)\uc744 \uc774\uc6a9\ud558\uc5ec ZooKeeper \uc124\uc815\uc744 \uc0dd\uc131\ud55c \ud6c4 \uac01 ZooKeeper \uc7a5\ube44\uc5d0 \ubc30\ud3ec\ud55c\ub2e4. \uadf8\ub9ac\uace0 Arcus cloud \uc11c\ube44\uc2a4\ub97c \uc704\ud55c \uae30\ubcf8 \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] zookeeper start|stop|stat start - ZooKeeper ensemble\uc758 \ubaa8\ub4e0 ZooKeeper process\ub97c \uad6c\ub3d9\ud55c\ub2e4. stop - ZooKeeper ensemble\uc758 \ubaa8\ub4e0 ZooKeeper process\ub97c \uc911\uc9c0\ud55c\ub2e4. stat - ZooKeeper ensemble\uc758 \ubaa8\ub4e0 ZooKeeper process\uc5d0 \ub300\ud55c \uc0c1\ud0dc\ub97c \uc870\ud68c\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] memcached register \\<conf_file> | unregister \\<service_code> register - Arcus cache cloud \uc815\ubcf4\ub97c \\<conf_file>\uc5d0\uc11c \uc77d\uc5b4 ZooKeeper\uc5d0 \ub4f1\ub85d\ud55c\ub2e4. ZooKeeper\uc5d0 \\<service_code>\uac00 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74 \uc0c8\ub85c\uc6b4 \\<conf_file> \uae30\uc900\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. unregister - Arcus cache cloud \uc815\ubcf4\ub97c ZooKeeper\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] memcached start|stop|list \\<service_code> start - Arcus cache cloud\uc758 \ubaa8\ub4e0 Memcached process\ub97c \uad6c\ub3d9\ud55c\ub2e4. stop - Arcus cache cloud\uc758 \ubaa8\ub4e0 Memcached process\ub97c \uc911\uc9c0\ud55c\ub2e4. list - Arcus cache cloud\uc758 \ubaa8\ub4e0 Memcached list\ub97c \uc870\ud68c\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] memcached listall listall - \ud604\uc7ac ZooKeeper\uc5d0 \ub4f1\ub85d\ub41c \ubaa8\ub4e0 Arcus cache cloud\ub4e4\uc758 service code\ub97c \uc870\ud68c\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] quicksetup \\<conf_file> deploy, zookeeper init & start, memcached register & start \uc791\uc5c5\uc744 \ud55c\ubc88\uc5d0 \uc218\ud589\ud55c\ub2e4. Arcus cache cloud\ub97c \ub3d9\uc791\uc2dc\ud0a4\uae30 \uc704\ud55c scripts/arcus.sh \uba85\ub839\uc758 \uc218\ud589 \uc21c\uc11c\ub97c \ub3c4\uc2dd\ud654\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc810\uc120\uc73c\ub85c \ud45c\uc2dc\ud55c \ubd80\ubd84\uc778 deploy \uc640 zookeeper init \uc740 \ucc98\uc74c \uc124\uce58 \uc2dc\uc5d0 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\uba74 \ub418\ub294 \uba85\ub839\uc774\uace0, memcached register/unregister \ub294 \uc0c8\ub85c\uc6b4 cache cloud \uc0ac\uc6a9/\uc81c\uac70 \uc2dc\uc5d0 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\uba74 \ub418\ub294 \uba85\ub839\uc774\ub2e4. (\ub2e8, memcached register \ub97c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 service code\uc5d0 \ub300\ud574 \uc218\ud589\ud558\uac8c \ub418\uba74 \ubcc4\ub3c4\uc758 \ud655\uc778 \uc5c6\uc774 \uc0c8\ub85c\uc6b4 \uc124\uc815\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4) \uc2e4\uc120\uc73c\ub85c \ud45c\uc2dc\ud55c \ubd80\ubd84\uc778 zookeeper start/stop \uacfc memcached start/stop \uc740 \ud574\ub2f9 \uc21c\uc11c\uc5d0 \ub530\ub77c \uc5b8\uc81c\ub77c\ub3c4 \uc218\ud589\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc774\ub2e4.","title":"Arcus admin script usage"},{"location":"admin/arcus-admin-script-usage/#arcus-admin-script-usage","text":"scripts/arcus.sh \ub294 Arcus cloud\ub97c \uad00\ub9ac\ud558\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uc774\uba70, \uc0ac\uc6a9\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. Usage: ./arcus.sh -h ./arcus.sh [-z <zklist>] deploy <conf_file> | ping <service_code> ./arcus.sh [-z <zklist>] zookeeper init ./arcus.sh [-z <zklist>] zookeeper start|stop|stat ./arcus.sh [-z <zklist>] memcached register <conf_file> | unregister <service_code> ./arcus.sh [-z <zklist>] memcached start|stop|list <service_code> ./arcus.sh [-z <zklist>] memcached listall ./arcus.sh [-z <zklist>] quicksetup <conf_file> -z, --zklist zookeeper ensemble ip:port list, The default is \"localhost:2181\" example) -z 10.0.0.1:2181,10.0.0.2:2181,10.0.0.3:2181 -h, --help This small usage guide <conf_file> Arcus cache cloud configuration file, having cache ip:port list and other settings. Refer to scripts/conf/test.json file <service_code> Arcus cache cloud name that identify each cache cloud uniquely. We also call it \"service code\" as it's a kind of cache cloud service. scripts/arcus.sh \uc758 \uac01 \uba85\ub839\uc5d0\uc11c \uacf5\ud1b5\uc73c\ub85c \ub4e4\uc5b4\uac00\ub294 \uc778\uc790\ub294 ZooKeeper ensemble list\uc774\uba70 \uae30\ubcf8\uac12\uc740 \"localhost:2181\"\uc774\ub2e4. \uac01 \uba85\ub839\ub9c8\ub2e4 \uc774 \uc778\uc790\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc8fc\uc5b4\ub3c4 \ub418\uba70, \uc778\uc790\ub97c \uc0dd\ub7b5\ud558\uace0 \uc2f6\ub2e4\uba74 scripts/arcus.sh \ud30c\uc77c\uc5d0 \uc788\ub294 zklist \ubcc0\uc218\uc758 \uae30\ubcf8\uac12\uc744 \uc218\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. ./arcus.sh [-z \\<zklist>] deploy \\<conf_file> \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc2e4\ud589\ub418\ub294 \uc7a5\ube44\uc758 Arcus \ud328\ud0a4\uc9c0\ub97c ZooKeeper \uc7a5\ube44\uc640 Memcached \uc7a5\ube44\uc5d0 \uc124\uce58\ud55c\ub2e4. \ud574\ub2f9 \uc7a5\ube44\uc5d0 Arcus \ud328\ud0a4\uc9c0\uac00 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74, \uc774\ub97c \uc81c\uac70\ud55c \ud6c4 \ub2e4\uc2dc \uc124\uce58\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] ping \\<service_code> Arcus\uc758 ZooKeeper \uc7a5\ube44\uc640 Memcached \uc7a5\ube44\uc5d0 \ub300\ud574 ping \uba85\ub839\uc744 \uc218\ud589\ud55c\ub2e4. \ucc38\uace0\ub85c, Memcached \uad00\ub828 \uc815\ubcf4\ub294 \\<service_code>\ub85c ZooKeeper\uc5d0\uc11c \uc870\ud68c\ud558\uc5ec \uc5bb\ub294\ub2e4. ./arcus.sh [-z \\<zklist>] zookeeper init init - \uc124\uc815 \ud15c\ud50c\ub9bf(conf/zoo.cfg)\uc744 \uc774\uc6a9\ud558\uc5ec ZooKeeper \uc124\uc815\uc744 \uc0dd\uc131\ud55c \ud6c4 \uac01 ZooKeeper \uc7a5\ube44\uc5d0 \ubc30\ud3ec\ud55c\ub2e4. \uadf8\ub9ac\uace0 Arcus cloud \uc11c\ube44\uc2a4\ub97c \uc704\ud55c \uae30\ubcf8 \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] zookeeper start|stop|stat start - ZooKeeper ensemble\uc758 \ubaa8\ub4e0 ZooKeeper process\ub97c \uad6c\ub3d9\ud55c\ub2e4. stop - ZooKeeper ensemble\uc758 \ubaa8\ub4e0 ZooKeeper process\ub97c \uc911\uc9c0\ud55c\ub2e4. stat - ZooKeeper ensemble\uc758 \ubaa8\ub4e0 ZooKeeper process\uc5d0 \ub300\ud55c \uc0c1\ud0dc\ub97c \uc870\ud68c\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] memcached register \\<conf_file> | unregister \\<service_code> register - Arcus cache cloud \uc815\ubcf4\ub97c \\<conf_file>\uc5d0\uc11c \uc77d\uc5b4 ZooKeeper\uc5d0 \ub4f1\ub85d\ud55c\ub2e4. ZooKeeper\uc5d0 \\<service_code>\uac00 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74 \uc0c8\ub85c\uc6b4 \\<conf_file> \uae30\uc900\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. unregister - Arcus cache cloud \uc815\ubcf4\ub97c ZooKeeper\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] memcached start|stop|list \\<service_code> start - Arcus cache cloud\uc758 \ubaa8\ub4e0 Memcached process\ub97c \uad6c\ub3d9\ud55c\ub2e4. stop - Arcus cache cloud\uc758 \ubaa8\ub4e0 Memcached process\ub97c \uc911\uc9c0\ud55c\ub2e4. list - Arcus cache cloud\uc758 \ubaa8\ub4e0 Memcached list\ub97c \uc870\ud68c\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] memcached listall listall - \ud604\uc7ac ZooKeeper\uc5d0 \ub4f1\ub85d\ub41c \ubaa8\ub4e0 Arcus cache cloud\ub4e4\uc758 service code\ub97c \uc870\ud68c\ud55c\ub2e4. ./arcus.sh [-z \\<zklist>] quicksetup \\<conf_file> deploy, zookeeper init & start, memcached register & start \uc791\uc5c5\uc744 \ud55c\ubc88\uc5d0 \uc218\ud589\ud55c\ub2e4. Arcus cache cloud\ub97c \ub3d9\uc791\uc2dc\ud0a4\uae30 \uc704\ud55c scripts/arcus.sh \uba85\ub839\uc758 \uc218\ud589 \uc21c\uc11c\ub97c \ub3c4\uc2dd\ud654\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc810\uc120\uc73c\ub85c \ud45c\uc2dc\ud55c \ubd80\ubd84\uc778 deploy \uc640 zookeeper init \uc740 \ucc98\uc74c \uc124\uce58 \uc2dc\uc5d0 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\uba74 \ub418\ub294 \uba85\ub839\uc774\uace0, memcached register/unregister \ub294 \uc0c8\ub85c\uc6b4 cache cloud \uc0ac\uc6a9/\uc81c\uac70 \uc2dc\uc5d0 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\uba74 \ub418\ub294 \uba85\ub839\uc774\ub2e4. (\ub2e8, memcached register \ub97c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 service code\uc5d0 \ub300\ud574 \uc218\ud589\ud558\uac8c \ub418\uba74 \ubcc4\ub3c4\uc758 \ud655\uc778 \uc5c6\uc774 \uc0c8\ub85c\uc6b4 \uc124\uc815\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4) \uc2e4\uc120\uc73c\ub85c \ud45c\uc2dc\ud55c \ubd80\ubd84\uc778 zookeeper start/stop \uacfc memcached start/stop \uc740 \ud574\ub2f9 \uc21c\uc11c\uc5d0 \ub530\ub77c \uc5b8\uc81c\ub77c\ub3c4 \uc218\ud589\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc774\ub2e4.","title":"Arcus Admin Script Usage"},{"location":"admin/arcus-cloud-configuration-file/","text":"Arcus Configuration File Arcus configuration \ud30c\uc77c\uc740 Arcus cache cloud\uc758 \uad6c\uc131 \ubc0f \uc124\uc815 \uc815\ubcf4\ub97c \uc800\uc7a5\ud55c\ub2e4. Arcus admin script \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud574, Arcus configuration \ud30c\uc77c\uc744 \uc77d\uc5b4 \uc6d0\ud558\ub294 \ud615\ud0dc\uc758 Arcus cache cloud\ub97c \uc0dd\uc131 \ubc0f \uc6b4\uc601\ud560 \uc218 \uc788\ub2e4. Arcus configuration \ud30c\uc77c\uc740 scripts/conf \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc704\uce58\ud558\uba70, \uadf8 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 test.json \ud30c\uc77c\uc758 \ub0b4\uc6a9\uc744 \ud558\ub098\uc758 \uc608\ub85c \ubcf4\uba74 \uc544\ub798\uc640 \uac19\ub2e4. \ud574\ub2f9 Arcus cache cloud\ub294 \"test-cloud\" \ub77c\ub294 service code(or cloud name)\ub85c \uc2dd\ubcc4\ub418\uace0, cache001.arcus, cache002.arcus, cache003.arcus \uc11c\ubc84 3\ub300 \uac01\uac01\uc5d0 \ub300\ud574 11211, 11212 \ud3ec\ud2b8\ub97c \uac00\uc9c0\ub294 2\uac1c cache node\ub85c \uad6c\uc131\ub41c\ub2e4. \uacb0\uad6d, 6\uac1c\uc758 cache node\ub85c \uad6c\uc131\ub418\ub294 cloud \uc124\uc815\uc774\ub2e4. { \"serviceCode\": \"test-cloud\" , \"servers\": [ { \"hostname\": \"cache001.arcus\", \"ip\": \"10.0.0.1\", \"config\": { \"port\" : \"11211\" } } , { \"hostname\": \"cache001.arcus\", \"ip\": \"10.0.0.1\", \"config\": { \"port\" : \"11212\" } } , { \"hostname\": \"cache002.arcus\", \"ip\": \"10.0.0.2\", \"config\": { \"port\" : \"11211\" , \"threads\": \"4\" } } , { \"hostname\": \"cache002.arcus\", \"ip\": \"10.0.0.2\", \"config\": { \"port\" : \"11212\" , \"threads\": \"4\" } } , { \"hostname\": \"cache003.arcus\", \"ip\": \"10.0.0.3\", \"config\": { \"port\" : \"11211\" } } , { \"hostname\": \"cache003.arcus\", \"ip\": \"10.0.0.3\", \"config\": { \"port\" : \"11212\" } } ] , \"config\": { \"threads\" : \"6\" , \"memlimit\" : \"100\" , \"connections\": \"1000\" } } Arcus configuration \ud30c\uc77c\uc5d0\uc11c \uc124\uc815\ud558\ub294 \ub0b4\uc6a9\uc758 \uc0c1\uc138 \uc124\uba85\uc740 \uc544\ub798\uc640 \uac19\ub2e4. serviceCode - Arcus service code (or cloud name) Arcus cache cloud\ub4e4\uc744 \uad00\ub9ac\ud558\ub294 Zeekeeper ensemble\uc5d0\uc11c \uac01\uac01\uc758 Arcus cache cloud\ub97c \uc720\uc77c\ud558\uac8c \uad6c\ubd84\ud55c\ub2e4. servers - Arcus cache node list Arcus cache cloud\uc5d0 \ucc38\uc5ec\ud558\ub294 \uac01 cache node\uc758 hostname, ip \uadf8\ub9ac\uace0, port number\ub97c \uac00\uc9c4\ub2e4. \uac01 cache node\uc758 port number\ub97c \ud3ec\ud568\ud558\uc5ec specific configuration\uc744 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4. config - General cache node configuration \ubaa8\ub4e0 cache node\uc5d0 \uacf5\ud1b5\uc73c\ub85c \uc801\uc6a9\ud560 general configuration \uc815\ubcf4\uc774\ub2e4. \uac01 cache node\uc5d0 specific configuration \uc815\ubcf4\uac00 \uc788\ub2e4\uba74, specific configuration\uac00 \uc801\uc6a9\ub41c\ub2e4. Cache node configuration \ud56d\ubaa9\uc758 \uc124\uba85\uc740 \uc544\ub798\uc640 \uac19\ub2e4. port : \uac01 cache node\uc758 port number threads : \uac01 cache node\uc5d0 \uc0dd\uc131\ud560 worker thread\ub4e4\uc758 \uc218 memlimit : \uac01 cache node\uac00 \uc0ac\uc6a9\ud560 \uba54\ubaa8\ub9ac\uc758 \uc6a9\ub7c9 (\ub2e8\uc704: MB) connections: \uac01 cache node\uac00 \ubc1b\uc544\ub4e4\uc77c \uc218 \uc788\ub294 \ucd5c\ub300 \uc5f0\uacb0 \uc218","title":"Arcus cloud configuration file"},{"location":"admin/arcus-cloud-configuration-file/#arcus-configuration-file","text":"Arcus configuration \ud30c\uc77c\uc740 Arcus cache cloud\uc758 \uad6c\uc131 \ubc0f \uc124\uc815 \uc815\ubcf4\ub97c \uc800\uc7a5\ud55c\ub2e4. Arcus admin script \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud574, Arcus configuration \ud30c\uc77c\uc744 \uc77d\uc5b4 \uc6d0\ud558\ub294 \ud615\ud0dc\uc758 Arcus cache cloud\ub97c \uc0dd\uc131 \ubc0f \uc6b4\uc601\ud560 \uc218 \uc788\ub2e4. Arcus configuration \ud30c\uc77c\uc740 scripts/conf \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc704\uce58\ud558\uba70, \uadf8 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 test.json \ud30c\uc77c\uc758 \ub0b4\uc6a9\uc744 \ud558\ub098\uc758 \uc608\ub85c \ubcf4\uba74 \uc544\ub798\uc640 \uac19\ub2e4. \ud574\ub2f9 Arcus cache cloud\ub294 \"test-cloud\" \ub77c\ub294 service code(or cloud name)\ub85c \uc2dd\ubcc4\ub418\uace0, cache001.arcus, cache002.arcus, cache003.arcus \uc11c\ubc84 3\ub300 \uac01\uac01\uc5d0 \ub300\ud574 11211, 11212 \ud3ec\ud2b8\ub97c \uac00\uc9c0\ub294 2\uac1c cache node\ub85c \uad6c\uc131\ub41c\ub2e4. \uacb0\uad6d, 6\uac1c\uc758 cache node\ub85c \uad6c\uc131\ub418\ub294 cloud \uc124\uc815\uc774\ub2e4. { \"serviceCode\": \"test-cloud\" , \"servers\": [ { \"hostname\": \"cache001.arcus\", \"ip\": \"10.0.0.1\", \"config\": { \"port\" : \"11211\" } } , { \"hostname\": \"cache001.arcus\", \"ip\": \"10.0.0.1\", \"config\": { \"port\" : \"11212\" } } , { \"hostname\": \"cache002.arcus\", \"ip\": \"10.0.0.2\", \"config\": { \"port\" : \"11211\" , \"threads\": \"4\" } } , { \"hostname\": \"cache002.arcus\", \"ip\": \"10.0.0.2\", \"config\": { \"port\" : \"11212\" , \"threads\": \"4\" } } , { \"hostname\": \"cache003.arcus\", \"ip\": \"10.0.0.3\", \"config\": { \"port\" : \"11211\" } } , { \"hostname\": \"cache003.arcus\", \"ip\": \"10.0.0.3\", \"config\": { \"port\" : \"11212\" } } ] , \"config\": { \"threads\" : \"6\" , \"memlimit\" : \"100\" , \"connections\": \"1000\" } } Arcus configuration \ud30c\uc77c\uc5d0\uc11c \uc124\uc815\ud558\ub294 \ub0b4\uc6a9\uc758 \uc0c1\uc138 \uc124\uba85\uc740 \uc544\ub798\uc640 \uac19\ub2e4. serviceCode - Arcus service code (or cloud name) Arcus cache cloud\ub4e4\uc744 \uad00\ub9ac\ud558\ub294 Zeekeeper ensemble\uc5d0\uc11c \uac01\uac01\uc758 Arcus cache cloud\ub97c \uc720\uc77c\ud558\uac8c \uad6c\ubd84\ud55c\ub2e4. servers - Arcus cache node list Arcus cache cloud\uc5d0 \ucc38\uc5ec\ud558\ub294 \uac01 cache node\uc758 hostname, ip \uadf8\ub9ac\uace0, port number\ub97c \uac00\uc9c4\ub2e4. \uac01 cache node\uc758 port number\ub97c \ud3ec\ud568\ud558\uc5ec specific configuration\uc744 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4. config - General cache node configuration \ubaa8\ub4e0 cache node\uc5d0 \uacf5\ud1b5\uc73c\ub85c \uc801\uc6a9\ud560 general configuration \uc815\ubcf4\uc774\ub2e4. \uac01 cache node\uc5d0 specific configuration \uc815\ubcf4\uac00 \uc788\ub2e4\uba74, specific configuration\uac00 \uc801\uc6a9\ub41c\ub2e4. Cache node configuration \ud56d\ubaa9\uc758 \uc124\uba85\uc740 \uc544\ub798\uc640 \uac19\ub2e4. port : \uac01 cache node\uc758 port number threads : \uac01 cache node\uc5d0 \uc0dd\uc131\ud560 worker thread\ub4e4\uc758 \uc218 memlimit : \uac01 cache node\uac00 \uc0ac\uc6a9\ud560 \uba54\ubaa8\ub9ac\uc758 \uc6a9\ub7c9 (\ub2e8\uc704: MB) connections: \uac01 cache node\uac00 \ubc1b\uc544\ub4e4\uc77c \uc218 \uc788\ub294 \ucd5c\ub300 \uc5f0\uacb0 \uc218","title":"Arcus Configuration File"},{"location":"admin/arcus-cloud-in-multiple-servers/","text":"Arcus Cache Cloud Setup in Multiple Servers \uc544\ucee4\uc2a4\ub294 \ud55c \ub300\uc758 \uc11c\ubc84\uc5d0 \uc124\uce58\ud558\uc5ec \uc11c\ube44\uc2a4\ud560 \uc218 \uc788\uc9c0\ub9cc \uc2e4\uc81c \uc6b4\uc601 \ud658\uacbd\uc5d0\uc11c\ub294 \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 \uc544\ucee4\uc2a4\ub97c \ubd84\uc0b0 \ubc30\uce58\ud558\uc5ec \ubcf4\ub2e4 \ub9ce\uc740 \uc694\uccad\uc744 \ubc1b\uc73c\uba74\uc11c\ub3c4 \uc7a5\uc560\uc5d0\ub3c4 \ub300\ube44\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\uc131\ud574\uc57c \ud55c\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Arcus \uad00\ub9ac \uc2a4\ud06c\ub9bd\ud2b8\uc778 scripts/arcus.sh \ub97c \uc774\uc6a9\ud558\uc5ec \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 Arcus cache cloud\ub97c \uc0dd\uc131\ud558\uc5ec \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uac00\uc774\ub4dc\ud55c\ub2e4. \uc774 \uc791\uc5c5\uc744 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0, README\uc758 Quick Start \ub2e8\uacc4\ub97c \uba3c\uc800 \uc9c4\ud589\ud574 \ubcf4\uace0 \uc544\ub798\uc758 Arcus cloud \uad00\ub9ac\uc5d0 \ud544\uc694\ud55c \uae30\ubcf8 \uc0ac\ud56d\uc744 \uba3c\uc800 \uc77d\uc5b4\ubcf4\uae38 \uad8c\ud55c\ub2e4. \ubcf8 \uac00\uc774\ub4dc\ub294 \uc544\ub798\uc640 \uac19\uc774 cache001.arcus, cache002.arcus, cache003.arcus\uc758 3\ub300 \uc11c\ubc84\ub97c \uc0ac\uc6a9\ud558\uc5ec \"test-cloud'\ub780 service code(or cloud name)\uc744 \uac00\uc9c4 Arcus cache cloud\ub97c \uad6c\uc131\ud55c\ub2e4. 3\ub300 \uc11c\ubc84 \ubaa8\ub450\uc5d0 ZooKeeper\ub97c \uc124\uce58 \ubc0f \uad6c\ub3d9\ud558\uc5ec \uc774\ub4e4\uc744 \ud558\ub098\uc758 ZooKeeper ensemble\ub85c \uad6c\uc131\ud558\uace0, 3\ub300 \uc11c\ubc84 \uac01\uac01\uc5d0 2\uac1c\uc529\uc758 cache node\ub97c \uad6c\ub3d9\ud558\uc5ec \uc774\ub4e4\uc774 \ud558\ub098\uc758 cache cloud\ub97c \ud615\uc131\ud558\ub3c4\ub85d \ud55c\ub2e4. service code: test-cloud +--------------------+ +--------------------+ +--------------------+ | cache001.arcus | | cache002.arcus | | cache003.arcus | | IP: 10.0.0.1 | | IP: 10.0.0.2 | | IP: 10.0.0.3 | +--------------------+ +--------------------+ +--------------------+ | | | | | | | ZooKeeper1:2181 | | ZooKeeper2:2181 | | ZooKeeper3:2181 | | | | | | | | Memcached1-1:11211 | | Memcached2-1:11211 | | Memcached3-1:11211 | | Memcached1-2:11212 | | Memcached2-2:11212 | | Memcached3-2:11212 | | | | | | | +--------------------+ +--------------------+ +--------------------+ README\uc758 Quick Start \uc5d0\uc11c \ucc98\ub7fc quicksetup \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc9c0\ub9cc, \ubcf8 \uac00\uc774\ub4dc\uc5d0\uc11c\ub294 Arcus admin script\uc758 \uac1c\ubcc4 \uba85\ub839\uc744 \uc774\uc6a9\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc18c\uac1c\ud55c\ub2e4. Arcus cache cloud\ub97c \uad6c\uc131\ud558\ub294 \uc791\uc5c5\uc740 \uc544\ub798 \uae30\uc220\ub41c \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud558\uba74 \ub41c\ub2e4. Clone & Build \uba3c\uc800 Arcus \ucf54\ub4dc\ub97c \ud074\ub860\ud55c \ub4a4 \ube4c\ub4dc\ud55c\ub2e4. sudo yum install gcc gcc-c++ autoconf automake libtool pkgconfig cppunit-devel python-setuptools git clone https://github.com/naver/arcus.git cd arcus/scripts ./build.sh Arcus Cloud Configuration scripts/conf \ub514\ub809\ud1a0\ub9ac\uc5d0 Arcus cloud \uc124\uc815 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 Arcus cloud configuration file \uc744 \uc0dd\uc131\ud55c\ub2e4. \uc5ec\uae30\uc11c\ub294 test.json \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc600\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \ucc38\uace0\ub85c, test.json \ud30c\uc77c\uc758 \ud604\uc7ac \ub0b4\uc6a9\uc740 \ubcf8 \uac00\uc774\ub4dc\uc5d0\uc11c \uc0dd\uc131\ud560 cloud \uc124\uc815\uc744 \uadf8\ub300\ub85c \uac00\uc9c0\uace0 \uc788\ub2e4. # \uc0d8\ud50c \uc124\uc815\uc778 conf/test.json\uc744 \ubcf5\uc0ac\ud558\uc5ec \uc790\uc2e0\uc758 \ud658\uacbd\uc5d0 \ub9de\ub3c4\ub85d \uc218\uc815\ud574\uc57c \ud55c\ub2e4. cp conf/test.json conf/<conf_file> vi conf/<conf_file> ZooKeeper \uc11c\ubc84\ub4e4\uc758 ip \uc815\ubcf4\ub294 arcus.sh \ub97c \uc218\ud589\ud560 \ub54c\ub9c8\ub2e4 \ub9e4\ubc88 \uc778\uc790( -z 10.0.0.1:2181,10.0.0.2:2181,10.0.0.3:2181 )\ub85c \uc9c0\uc815\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub97c \uc0dd\ub7b5\ud558\uace0 \uc2f6\ub2e4\uba74, arcus.sh \ud30c\uc77c\uc758 \uac00\uc7a5 \uc0c1\ub2e8\uc5d0 \uc788\ub294 zklist \ubcc0\uc218\uc758 \uac12\uc73c\ub85c ZooKeeper ensemble list\ub97c \uc9c0\uc815\ud574 \uc8fc\uba74 \ub41c\ub2e4. \uc544\ub798\uc5d0\uc11c\ub294 arcus.sh \uc5d0 \ub9ac\uc2a4\ud2b8\uac00 \uc774\ubbf8 \uc9c0\uc815\ub41c \uc0c1\ud0dc\ub77c\uace0 \uac00\uc815\ud558\uace0 \uc2a4\ud06c\ub9bd\ud2b8 \uc218\ud589 \uc2dc -z zklist \uc635\uc158\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. Deploy & ZooKeeper Init arcus.sh \uc758 deploy \uba85\ub839\uc73c\ub85c ZooKeeper \uadf8\ub9ac\uace0/\ub610\ub294 Memcached\uac00 \uad6c\ub3d9\ub420 \ubaa8\ub4e0 \uc11c\ubc84\ub85c \uc55e\uc11c \ube4c\ub4dc\ud55c Arcus \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud558\uace0, zookeeper init \uba85\ub839\uc73c\ub85c Arcus\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 ZooKeeper ensemble \uc124\uc815\uc744 \uc644\ub8cc\ud55c\ub2e4. ./arcus.sh deploy conf/test.json ./arcus.sh zookeeper init \uc774 \uc791\uc5c5\uc740 \uc6d0\uaca9\uc9c0(remote) \uc11c\ubc84\uc5d0 \uc811\uadfc\ud558\uc5ec \uc218\ud589\ud560 \uc791\uc5c5\uc73c\ub85c SSH \uc5f0\uacb0\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. \uc774 \uacbd\uc6b0, \ud328\uc2a4\uc6cc\ub4dc\ub97c \uc9c1\uc811 \uc785\ub825\ud558\uac70\ub098 SSH public key \uc778\uc99d \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. SSH public key \uc778\uc99d \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub824\uba74, \ud328\uc2a4\uc6cc\ub4dc \uc5c6\ub294 SSH public key\ub97c \uc0dd\uc131\ud558\uc5ec \uc811\uadfc\ud560 \uac01 \uc6d0\uaca9\uc9c0 \uc11c\ubc84\uc5d0 \ubc30\ud3ec\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 SSH public key \ubc30\ud3ec \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. ZooKeeper Start, Memcached Register, Memcached Start \ubaa8\ub4e0 \uc11c\ubc84\uc5d0 \uc788\ub294 Zookeeper \ud504\ub85c\uc138\uc2a4\ub4e4\uc744 \uad6c\ub3d9\ud558\uace0, Arcus cache cloud \uc124\uc815\ud30c\uc77c\uc744 \uc774\uc6a9\ud574 ZooKeeper\uc5d0 \ud574\ub2f9 Arcus cloud \uc815\ubcf4\ub97c \ub4f1\ub85d\ud55c\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c, \ubaa8\ub4e0 \uc11c\ubc84\uc5d0\uc11c test-cloud\uc758 memcached\ub4e4\uc744 \uad6c\ub3d9\ud55c\ub2e4. ./arcus.sh zookeeper start ./arcus.sh zookeeper stat # ZooKeeper leader\uac00 \uacb0\uc815 \ub418\uc5c8\ub294\uc9c0 \ud655\uc778. ./arcus.sh memcached register conf/test.json ./arcus.sh memcached start test-cloud \uc704\uc758 \uba85\ub839\uc744 \ubaa8\ub450 \uc218\ud589\ud558\uba74, README\uc758 Quick Start \uc5d0\uc11c \uc18c\uac1c\ud55c quicksetup \uba85\ub839\uc744 \uc218\ud589\ud55c \uc0c1\ud0dc\uc640 \ub3d9\uc77c\ud558\uac8c Arcus cache cloud\uac00 \uad6c\ub3d9\ub41c \uc0c1\ud0dc\uac00 \ub41c\ub2e4. \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74 listall , list \uba85\ub839\uc744 \uc774\uc6a9\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84\uac00 \uc798 \uad6c\ub3d9\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. ./arcus.sh memcached listall ./arcus.sh memcached list test-cloud Memcached Stop, Memcached Unregister, ZooKeeper Stop Arcus cache cloud \uc0ac\uc6a9\uc744 \uc911\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74, \uc544\ub798 \uba85\ub839\uc744 \uc870\ud569\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \"test-cloud\"\uc758 Arcus cache node\ub4e4\ub9cc \uc911\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74, memcached stop \uba85\ub839\uc744 \uc218\ud589\ud558\uba74 \ub41c\ub2e4. \"test-cloud\"\uc758 Arcus cache node\ub4e4\uacfc zookeeper\ub4e4\ub3c4 \ubaa8\ub450 \uc911\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74, memcached stop \uacfc zookeeper stop \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. Zookeeper\uc5d0 \uc774\ubbf8 \ub4f1\ub85d\ub41c Arcus cache cloud\ub97c \ub2e4\uc2dc \uad6c\ub3d9\ud558\uace0 \uc2f6\ub2e4\uba74, zookeeper start \uc640 memcached start \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc218\ud589\ud558\uba74 \ub41c\ub2e4. \"test-cloud\"\uc758 Arcus cache cloud\ub97c \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \uacc4\ud68d\uc774\ub77c\uba74, memcached unregister \uba85\ub839\uc73c\ub85c ZooKeeper\uc5d0\uc11c \ud574\ub2f9 cache cloud \uc815\ubcf4\ub97c \uc81c\uac70\ud558\uba74 \ub41c\ub2e4. \uc774 \uba85\ub839\uc740 ZooKeeper\uac00 \uad6c\ub3d9\ub41c \uc0c1\ud0dc\uc5d0\uc11c \uc218\ud589\ud574\uc57c \ud55c\ub2e4. # stop all memcached processes ./arcus.sh memcached stop test-cloud # unregister cache cloud from ZooKeeper ./arcus.sh memcached unregister test-cloud # stop all ZooKeeper processes ./arcus.sh zookeeper stop","title":"Arcus cloud in multiple servers"},{"location":"admin/arcus-cloud-in-multiple-servers/#arcus-cache-cloud-setup-in-multiple-servers","text":"\uc544\ucee4\uc2a4\ub294 \ud55c \ub300\uc758 \uc11c\ubc84\uc5d0 \uc124\uce58\ud558\uc5ec \uc11c\ube44\uc2a4\ud560 \uc218 \uc788\uc9c0\ub9cc \uc2e4\uc81c \uc6b4\uc601 \ud658\uacbd\uc5d0\uc11c\ub294 \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 \uc544\ucee4\uc2a4\ub97c \ubd84\uc0b0 \ubc30\uce58\ud558\uc5ec \ubcf4\ub2e4 \ub9ce\uc740 \uc694\uccad\uc744 \ubc1b\uc73c\uba74\uc11c\ub3c4 \uc7a5\uc560\uc5d0\ub3c4 \ub300\ube44\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\uc131\ud574\uc57c \ud55c\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Arcus \uad00\ub9ac \uc2a4\ud06c\ub9bd\ud2b8\uc778 scripts/arcus.sh \ub97c \uc774\uc6a9\ud558\uc5ec \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 Arcus cache cloud\ub97c \uc0dd\uc131\ud558\uc5ec \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uac00\uc774\ub4dc\ud55c\ub2e4. \uc774 \uc791\uc5c5\uc744 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0, README\uc758 Quick Start \ub2e8\uacc4\ub97c \uba3c\uc800 \uc9c4\ud589\ud574 \ubcf4\uace0 \uc544\ub798\uc758 Arcus cloud \uad00\ub9ac\uc5d0 \ud544\uc694\ud55c \uae30\ubcf8 \uc0ac\ud56d\uc744 \uba3c\uc800 \uc77d\uc5b4\ubcf4\uae38 \uad8c\ud55c\ub2e4. \ubcf8 \uac00\uc774\ub4dc\ub294 \uc544\ub798\uc640 \uac19\uc774 cache001.arcus, cache002.arcus, cache003.arcus\uc758 3\ub300 \uc11c\ubc84\ub97c \uc0ac\uc6a9\ud558\uc5ec \"test-cloud'\ub780 service code(or cloud name)\uc744 \uac00\uc9c4 Arcus cache cloud\ub97c \uad6c\uc131\ud55c\ub2e4. 3\ub300 \uc11c\ubc84 \ubaa8\ub450\uc5d0 ZooKeeper\ub97c \uc124\uce58 \ubc0f \uad6c\ub3d9\ud558\uc5ec \uc774\ub4e4\uc744 \ud558\ub098\uc758 ZooKeeper ensemble\ub85c \uad6c\uc131\ud558\uace0, 3\ub300 \uc11c\ubc84 \uac01\uac01\uc5d0 2\uac1c\uc529\uc758 cache node\ub97c \uad6c\ub3d9\ud558\uc5ec \uc774\ub4e4\uc774 \ud558\ub098\uc758 cache cloud\ub97c \ud615\uc131\ud558\ub3c4\ub85d \ud55c\ub2e4. service code: test-cloud +--------------------+ +--------------------+ +--------------------+ | cache001.arcus | | cache002.arcus | | cache003.arcus | | IP: 10.0.0.1 | | IP: 10.0.0.2 | | IP: 10.0.0.3 | +--------------------+ +--------------------+ +--------------------+ | | | | | | | ZooKeeper1:2181 | | ZooKeeper2:2181 | | ZooKeeper3:2181 | | | | | | | | Memcached1-1:11211 | | Memcached2-1:11211 | | Memcached3-1:11211 | | Memcached1-2:11212 | | Memcached2-2:11212 | | Memcached3-2:11212 | | | | | | | +--------------------+ +--------------------+ +--------------------+ README\uc758 Quick Start \uc5d0\uc11c \ucc98\ub7fc quicksetup \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc9c0\ub9cc, \ubcf8 \uac00\uc774\ub4dc\uc5d0\uc11c\ub294 Arcus admin script\uc758 \uac1c\ubcc4 \uba85\ub839\uc744 \uc774\uc6a9\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc18c\uac1c\ud55c\ub2e4. Arcus cache cloud\ub97c \uad6c\uc131\ud558\ub294 \uc791\uc5c5\uc740 \uc544\ub798 \uae30\uc220\ub41c \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud558\uba74 \ub41c\ub2e4.","title":"Arcus Cache Cloud Setup in Multiple Servers"},{"location":"admin/arcus-cloud-in-multiple-servers/#clone-build","text":"\uba3c\uc800 Arcus \ucf54\ub4dc\ub97c \ud074\ub860\ud55c \ub4a4 \ube4c\ub4dc\ud55c\ub2e4. sudo yum install gcc gcc-c++ autoconf automake libtool pkgconfig cppunit-devel python-setuptools git clone https://github.com/naver/arcus.git cd arcus/scripts ./build.sh","title":"Clone &amp; Build"},{"location":"admin/arcus-cloud-in-multiple-servers/#arcus-cloud-configuration","text":"scripts/conf \ub514\ub809\ud1a0\ub9ac\uc5d0 Arcus cloud \uc124\uc815 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 Arcus cloud configuration file \uc744 \uc0dd\uc131\ud55c\ub2e4. \uc5ec\uae30\uc11c\ub294 test.json \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc600\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \ucc38\uace0\ub85c, test.json \ud30c\uc77c\uc758 \ud604\uc7ac \ub0b4\uc6a9\uc740 \ubcf8 \uac00\uc774\ub4dc\uc5d0\uc11c \uc0dd\uc131\ud560 cloud \uc124\uc815\uc744 \uadf8\ub300\ub85c \uac00\uc9c0\uace0 \uc788\ub2e4. # \uc0d8\ud50c \uc124\uc815\uc778 conf/test.json\uc744 \ubcf5\uc0ac\ud558\uc5ec \uc790\uc2e0\uc758 \ud658\uacbd\uc5d0 \ub9de\ub3c4\ub85d \uc218\uc815\ud574\uc57c \ud55c\ub2e4. cp conf/test.json conf/<conf_file> vi conf/<conf_file> ZooKeeper \uc11c\ubc84\ub4e4\uc758 ip \uc815\ubcf4\ub294 arcus.sh \ub97c \uc218\ud589\ud560 \ub54c\ub9c8\ub2e4 \ub9e4\ubc88 \uc778\uc790( -z 10.0.0.1:2181,10.0.0.2:2181,10.0.0.3:2181 )\ub85c \uc9c0\uc815\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub97c \uc0dd\ub7b5\ud558\uace0 \uc2f6\ub2e4\uba74, arcus.sh \ud30c\uc77c\uc758 \uac00\uc7a5 \uc0c1\ub2e8\uc5d0 \uc788\ub294 zklist \ubcc0\uc218\uc758 \uac12\uc73c\ub85c ZooKeeper ensemble list\ub97c \uc9c0\uc815\ud574 \uc8fc\uba74 \ub41c\ub2e4. \uc544\ub798\uc5d0\uc11c\ub294 arcus.sh \uc5d0 \ub9ac\uc2a4\ud2b8\uac00 \uc774\ubbf8 \uc9c0\uc815\ub41c \uc0c1\ud0dc\ub77c\uace0 \uac00\uc815\ud558\uace0 \uc2a4\ud06c\ub9bd\ud2b8 \uc218\ud589 \uc2dc -z zklist \uc635\uc158\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4.","title":"Arcus Cloud Configuration"},{"location":"admin/arcus-cloud-in-multiple-servers/#deploy-zookeeper-init","text":"arcus.sh \uc758 deploy \uba85\ub839\uc73c\ub85c ZooKeeper \uadf8\ub9ac\uace0/\ub610\ub294 Memcached\uac00 \uad6c\ub3d9\ub420 \ubaa8\ub4e0 \uc11c\ubc84\ub85c \uc55e\uc11c \ube4c\ub4dc\ud55c Arcus \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud558\uace0, zookeeper init \uba85\ub839\uc73c\ub85c Arcus\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 ZooKeeper ensemble \uc124\uc815\uc744 \uc644\ub8cc\ud55c\ub2e4. ./arcus.sh deploy conf/test.json ./arcus.sh zookeeper init \uc774 \uc791\uc5c5\uc740 \uc6d0\uaca9\uc9c0(remote) \uc11c\ubc84\uc5d0 \uc811\uadfc\ud558\uc5ec \uc218\ud589\ud560 \uc791\uc5c5\uc73c\ub85c SSH \uc5f0\uacb0\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. \uc774 \uacbd\uc6b0, \ud328\uc2a4\uc6cc\ub4dc\ub97c \uc9c1\uc811 \uc785\ub825\ud558\uac70\ub098 SSH public key \uc778\uc99d \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. SSH public key \uc778\uc99d \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub824\uba74, \ud328\uc2a4\uc6cc\ub4dc \uc5c6\ub294 SSH public key\ub97c \uc0dd\uc131\ud558\uc5ec \uc811\uadfc\ud560 \uac01 \uc6d0\uaca9\uc9c0 \uc11c\ubc84\uc5d0 \ubc30\ud3ec\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 SSH public key \ubc30\ud3ec \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4.","title":"Deploy &amp; ZooKeeper Init"},{"location":"admin/arcus-cloud-in-multiple-servers/#zookeeper-start-memcached-register-memcached-start","text":"\ubaa8\ub4e0 \uc11c\ubc84\uc5d0 \uc788\ub294 Zookeeper \ud504\ub85c\uc138\uc2a4\ub4e4\uc744 \uad6c\ub3d9\ud558\uace0, Arcus cache cloud \uc124\uc815\ud30c\uc77c\uc744 \uc774\uc6a9\ud574 ZooKeeper\uc5d0 \ud574\ub2f9 Arcus cloud \uc815\ubcf4\ub97c \ub4f1\ub85d\ud55c\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c, \ubaa8\ub4e0 \uc11c\ubc84\uc5d0\uc11c test-cloud\uc758 memcached\ub4e4\uc744 \uad6c\ub3d9\ud55c\ub2e4. ./arcus.sh zookeeper start ./arcus.sh zookeeper stat # ZooKeeper leader\uac00 \uacb0\uc815 \ub418\uc5c8\ub294\uc9c0 \ud655\uc778. ./arcus.sh memcached register conf/test.json ./arcus.sh memcached start test-cloud \uc704\uc758 \uba85\ub839\uc744 \ubaa8\ub450 \uc218\ud589\ud558\uba74, README\uc758 Quick Start \uc5d0\uc11c \uc18c\uac1c\ud55c quicksetup \uba85\ub839\uc744 \uc218\ud589\ud55c \uc0c1\ud0dc\uc640 \ub3d9\uc77c\ud558\uac8c Arcus cache cloud\uac00 \uad6c\ub3d9\ub41c \uc0c1\ud0dc\uac00 \ub41c\ub2e4. \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74 listall , list \uba85\ub839\uc744 \uc774\uc6a9\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84\uac00 \uc798 \uad6c\ub3d9\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. ./arcus.sh memcached listall ./arcus.sh memcached list test-cloud","title":"ZooKeeper Start, Memcached Register, Memcached Start"},{"location":"admin/arcus-cloud-in-multiple-servers/#memcached-stop-memcached-unregister-zookeeper-stop","text":"Arcus cache cloud \uc0ac\uc6a9\uc744 \uc911\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74, \uc544\ub798 \uba85\ub839\uc744 \uc870\ud569\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \"test-cloud\"\uc758 Arcus cache node\ub4e4\ub9cc \uc911\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74, memcached stop \uba85\ub839\uc744 \uc218\ud589\ud558\uba74 \ub41c\ub2e4. \"test-cloud\"\uc758 Arcus cache node\ub4e4\uacfc zookeeper\ub4e4\ub3c4 \ubaa8\ub450 \uc911\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74, memcached stop \uacfc zookeeper stop \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. Zookeeper\uc5d0 \uc774\ubbf8 \ub4f1\ub85d\ub41c Arcus cache cloud\ub97c \ub2e4\uc2dc \uad6c\ub3d9\ud558\uace0 \uc2f6\ub2e4\uba74, zookeeper start \uc640 memcached start \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc218\ud589\ud558\uba74 \ub41c\ub2e4. \"test-cloud\"\uc758 Arcus cache cloud\ub97c \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \uacc4\ud68d\uc774\ub77c\uba74, memcached unregister \uba85\ub839\uc73c\ub85c ZooKeeper\uc5d0\uc11c \ud574\ub2f9 cache cloud \uc815\ubcf4\ub97c \uc81c\uac70\ud558\uba74 \ub41c\ub2e4. \uc774 \uba85\ub839\uc740 ZooKeeper\uac00 \uad6c\ub3d9\ub41c \uc0c1\ud0dc\uc5d0\uc11c \uc218\ud589\ud574\uc57c \ud55c\ub2e4. # stop all memcached processes ./arcus.sh memcached stop test-cloud # unregister cache cloud from ZooKeeper ./arcus.sh memcached unregister test-cloud # stop all ZooKeeper processes ./arcus.sh zookeeper stop","title":"Memcached Stop, Memcached Unregister, ZooKeeper Stop"},{"location":"admin/arcus-directory-structure/","text":"Arcus Directory Structure \uc544\ucee4\uc2a4\ub97c \ube4c\ub4dc\ud558\uc5ec \uc124\uce58\ud558\uba74 \uc544\ub798\uc640 \uac19\uc740 \ub514\ub809\ud1a0\ub9ac\uac00 \uc0dd\uc131\ub41c\ub2e4. (\ube4c\ub4dc \uc635\uc158\uc5d0 \ub530\ub77c \uc18c\uc2a4\ucf54\ub4dc \ubc0f \uc77c\ubd80 \uc2a4\ud06c\ub9bd\ud2b8\ub294 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc74c) arcus |-- bin | `-- memcached : arcus-memcached \uc2e4\ud589\ud30c\uc77c |-- server : arcus-memcached \uc18c\uc2a4\ucf54\ub4dc |-- clients | |-- c : arcus-c-client \uc18c\uc2a4 \ub514\ub809\ud1a0\ub9ac | `-- java : arcus-java-client \uc18c\uc2a4 \ub514\ub809\ud1a0\ub9ac |-- deps : \uc544\ucee4\uc2a4\uac00 \uc0ac\uc6a9\ud558\ub294 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac \ubaa8\uc74c |-- docs : \ubb38\uc11c |-- include |-- lib |-- scripts | |-- arcus.sh : \uad00\ub9ac \uc2a4\ud06c\ub9bd\ud2b8 | |-- build.sh : \ube4c\ub4dc \uc2a4\ud06c\ub9bd\ud2b8 | |-- conf : \uac01\uc885 \uc124\uc815 \ud30c\uc77c | |-- etc : \uae30\ud0c0 \uc258\uc2a4\ud06c\ub9bd\ud2b8 | |-- fab : fabric \uc2e4\ud589\ud30c\uc77c(\uc2ec\ubcfc\ub9ad\ub9c1\ud06c) | |-- fabfile.py : \uc544\ucee4\uc2a4 \uc124\uce58 \ubc0f \uad00\ub9ac\ub97c \uc704\ud55c fabfile | `-- lib : fabfile\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ucd94\uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac |-- share `-- zookeeper : zookeeper \uc11c\ubc84 \ubc14\uc774\ub108\ub9ac \ubc0f \uc18c\uc2a4\ucf54\ub4dc","title":"Arcus directory structure"},{"location":"admin/arcus-directory-structure/#arcus-directory-structure","text":"\uc544\ucee4\uc2a4\ub97c \ube4c\ub4dc\ud558\uc5ec \uc124\uce58\ud558\uba74 \uc544\ub798\uc640 \uac19\uc740 \ub514\ub809\ud1a0\ub9ac\uac00 \uc0dd\uc131\ub41c\ub2e4. (\ube4c\ub4dc \uc635\uc158\uc5d0 \ub530\ub77c \uc18c\uc2a4\ucf54\ub4dc \ubc0f \uc77c\ubd80 \uc2a4\ud06c\ub9bd\ud2b8\ub294 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc74c) arcus |-- bin | `-- memcached : arcus-memcached \uc2e4\ud589\ud30c\uc77c |-- server : arcus-memcached \uc18c\uc2a4\ucf54\ub4dc |-- clients | |-- c : arcus-c-client \uc18c\uc2a4 \ub514\ub809\ud1a0\ub9ac | `-- java : arcus-java-client \uc18c\uc2a4 \ub514\ub809\ud1a0\ub9ac |-- deps : \uc544\ucee4\uc2a4\uac00 \uc0ac\uc6a9\ud558\ub294 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac \ubaa8\uc74c |-- docs : \ubb38\uc11c |-- include |-- lib |-- scripts | |-- arcus.sh : \uad00\ub9ac \uc2a4\ud06c\ub9bd\ud2b8 | |-- build.sh : \ube4c\ub4dc \uc2a4\ud06c\ub9bd\ud2b8 | |-- conf : \uac01\uc885 \uc124\uc815 \ud30c\uc77c | |-- etc : \uae30\ud0c0 \uc258\uc2a4\ud06c\ub9bd\ud2b8 | |-- fab : fabric \uc2e4\ud589\ud30c\uc77c(\uc2ec\ubcfc\ub9ad\ub9c1\ud06c) | |-- fabfile.py : \uc544\ucee4\uc2a4 \uc124\uce58 \ubc0f \uad00\ub9ac\ub97c \uc704\ud55c fabfile | `-- lib : fabfile\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ucd94\uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac |-- share `-- zookeeper : zookeeper \uc11c\ubc84 \ubc14\uc774\ub108\ub9ac \ubc0f \uc18c\uc2a4\ucf54\ub4dc","title":"Arcus Directory Structure"},{"location":"admin/deploy-ssh-public-key/","text":"Deploy SSH Public Key SSH\ub97c \ud1b5\ud574 \ub2e4\ub978 \uc11c\ubc84\ub85c \uc811\uc18d\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud328\uc2a4\uc6cc\ub4dc \uc785\ub825\uc744 \ud558\uac70\ub098 SSH public key \uc778\uc99d\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Arcus cache cloud\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc678\ubd80(\uc778\ud130\ub137)\uc5d0 \ub178\ucd9c\ub418\uc9c0 \uc54a\uace0 \ub0b4\ubd80\ub9dd\uc5d0\uc11c \ub3d9\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud558\ub098 \uc9c0\uc815\ud558\uc5ec \uc554\ud638 \uc5c6\ub294 public key\ub97c \uc0dd\uc131\ud55c \ub4a4 \ud574\ub2f9 public key\ub97c \uc811\uadfc\ud560 \uac01 \uc11c\ubc84\uc5d0 \ubc30\ud3ec\ud574 \ub450\uace0, \ud604\uc7ac \uc11c\ubc84\ub97c \uac8c\uc774\ud2b8\uc6e8\uc774\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ub9c1\ud06c\ub97c \ucc38\uace0\ud558\uae38 \ubc14\ub77c\uba70 \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac04\ub2e8\ud55c \uc808\ucc28\ub9cc \uc18c\uac1c\ud55c\ub2e4. https://help.ubuntu.com/community/SSH/OpenSSH/Keys (\uc601\ubb38) \ub2e4\ub978 \uc11c\ubc84\ub97c \uad00\ub9ac\ud560 \uc6a9\ub3c4\uc758 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud55c \ub300 \uacb0\uc815\ud558\uace0 \ud574\ub2f9 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uc5ec SSH key\ub97c \uc0dd\uc131\ud55c\ub2e4. $ mkdir -p ~/.ssh $ chmod 700 ~/.ssh $ ssh-keygen -t rsa \uac01 \uc11c\ubc84\uc5d0 public key\ub97c \uc804\uc1a1\ud55c\ub2e4. # SSH \uc554\ud638\ub97c \uc785\ub825\ud574\uc57c \ud568. \uc790\uc2e0\uc758 \ud658\uacbd\uc5d0 \ub9de\uac8c <username>, <hostname> \ubcc0\uacbd $ ssh-copy-id <username>@<hostname> \ud328\uc2a4\uc6cc\ub4dc \uc5c6\uc774 \uc811\uc18d\uc774 \uc798 \ub418\ub294\uc9c0 \ud655\uc778. \uc798 \uc548\ub420 \uacbd\uc6b0 sshkey \ub9e4\ub274\uc5bc \uc744 \ucc38\uc870. $ ssh <username>@<hostname>","title":"Deploy ssh public key"},{"location":"admin/deploy-ssh-public-key/#deploy-ssh-public-key","text":"SSH\ub97c \ud1b5\ud574 \ub2e4\ub978 \uc11c\ubc84\ub85c \uc811\uc18d\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud328\uc2a4\uc6cc\ub4dc \uc785\ub825\uc744 \ud558\uac70\ub098 SSH public key \uc778\uc99d\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Arcus cache cloud\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc678\ubd80(\uc778\ud130\ub137)\uc5d0 \ub178\ucd9c\ub418\uc9c0 \uc54a\uace0 \ub0b4\ubd80\ub9dd\uc5d0\uc11c \ub3d9\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud558\ub098 \uc9c0\uc815\ud558\uc5ec \uc554\ud638 \uc5c6\ub294 public key\ub97c \uc0dd\uc131\ud55c \ub4a4 \ud574\ub2f9 public key\ub97c \uc811\uadfc\ud560 \uac01 \uc11c\ubc84\uc5d0 \ubc30\ud3ec\ud574 \ub450\uace0, \ud604\uc7ac \uc11c\ubc84\ub97c \uac8c\uc774\ud2b8\uc6e8\uc774\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ub9c1\ud06c\ub97c \ucc38\uace0\ud558\uae38 \ubc14\ub77c\uba70 \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac04\ub2e8\ud55c \uc808\ucc28\ub9cc \uc18c\uac1c\ud55c\ub2e4. https://help.ubuntu.com/community/SSH/OpenSSH/Keys (\uc601\ubb38) \ub2e4\ub978 \uc11c\ubc84\ub97c \uad00\ub9ac\ud560 \uc6a9\ub3c4\uc758 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud55c \ub300 \uacb0\uc815\ud558\uace0 \ud574\ub2f9 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uc5ec SSH key\ub97c \uc0dd\uc131\ud55c\ub2e4. $ mkdir -p ~/.ssh $ chmod 700 ~/.ssh $ ssh-keygen -t rsa \uac01 \uc11c\ubc84\uc5d0 public key\ub97c \uc804\uc1a1\ud55c\ub2e4. # SSH \uc554\ud638\ub97c \uc785\ub825\ud574\uc57c \ud568. \uc790\uc2e0\uc758 \ud658\uacbd\uc5d0 \ub9de\uac8c <username>, <hostname> \ubcc0\uacbd $ ssh-copy-id <username>@<hostname> \ud328\uc2a4\uc6cc\ub4dc \uc5c6\uc774 \uc811\uc18d\uc774 \uc798 \ub418\ub294\uc9c0 \ud655\uc778. \uc798 \uc548\ub420 \uacbd\uc6b0 sshkey \ub9e4\ub274\uc5bc \uc744 \ucc38\uc870. $ ssh <username>@<hostname>","title":"Deploy SSH Public Key"},{"location":"admin/deploying-arcus-to-multiple-servers/","text":"Deploying Arcus To Multiple Servers \uc544\ucee4\uc2a4\ub294 \ud55c \ub300\uc758 \uc11c\ubc84\uc5d0 \uc124\uce58\ud558\uc5ec \uc11c\ube44\uc2a4\ud560 \uc218 \uc788\uc9c0\ub9cc \uc2e4\uc81c \uc6b4\uc601 \ud658\uacbd\uc5d0\uc11c\ub294 \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 \uc544\ucee4\uc2a4\ub97c \ubd84\uc0b0 \ubc30\uce58\ud558\uc5ec \ubcf4\ub2e4 \ub9ce\uc740 \uc694\uccad\uc744 \ubc1b\uc73c\uba74\uc11c\ub3c4 \uc7a5\uc560\uc5d0\ub3c4 \ub300\ube44\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\uc131\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 \uc544\ucee4\uc2a4\ub97c \ubc30\ud3ec\ud558\uace0 \uad00\ub9ac\ud558\uace0\uc790 \ud558\ub294 \uc0ac\uc6a9\uc790\ub97c \uc704\ud574 \uc544\ucee4\uc2a4\ub97c \ubd84\uc0b0 \ubc30\uce58\ud558\ub294 \uba87 \uac00\uc9c0 \uc608\uc81c\ub97c \ubcf4\uc774\uace0, \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \ubc30\ud3ec \ubc0f \uc2dc\uc2a4\ud15c \uad00\ub9ac\ub97c \uc27d\uac8c \ud574\uc8fc\ub294 Fabric \uc744 \uc774\uc6a9\ud558\uc5ec \uc544\ucee4\uc2a4 \ud074\ub7ec\uc2a4\ud130\ub97c \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\ub824\ub4dc\ub9bd\ub2c8\ub2e4. \ub9cc\uc57d README\uc758 Quick Start \ub2e8\uacc4\ub97c \uc544\uc9c1 \uc9c4\ud589\ud574\ubcf4\uc9c0 \uc54a\uc73c\uc168\ub2e4\uba74 \uba3c\uc800 \ud574\ubcf4\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4. \ubc30\uacbd \uc9c0\uc2dd \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\ub97c \ub2e4\ub8e8\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc740 \uc77c\uc785\ub2c8\ub2e4. \uc11c\ubc84 \uc124\uc815\uc744 \ub3d9\uc77c\ud558\uac8c \uc720\uc9c0\ud558\uac70\ub098 \uc5ed\ud560 \ubcc4\ub85c \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc124\uce58\ud558\uace0 \uc2e4\ud589\ud558\ub294 \uad00\ub9ac\uc791\uc5c5\uc740 \uc77c\uc77c\ud788 \uc218\uc791\uc5c5\uc73c\ub85c \ud558\uae30\uc5d0\ub294 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc774\uace0 \uc2e4\uc218\ub97c \uc720\ubc1c\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \uac00\ub2a5\ud55c\ud55c \uc790\ub3d9\ud654 \ud574\uc57c \ud569\ub2c8\ub2e4. \uacbd\ud5d8 \ub9ce\uc740 \uc0ac\uc6a9\uc790\ub77c\uba74 Puppet , Chef , Ansible , SaltStack , \ub4f1\uc758 \ub3c4\uad6c\ub97c \uc774\uc6a9\ud55c \uc790\ub3d9\ud654\ub41c \uc124\uce58/\ubc30\ud3ec \uc778\ud504\ub77c\ub97c \uc774\ubbf8 \uad6c\ucd95\ud574\ub450\uc5c8\uc744 \uac83\uc785\ub2c8\ub2e4. \ub9cc\uc57d \uc774\ub7ec\ud55c \ud658\uacbd\uc774 \uc900\ube44\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \uc544\ub798 \ub0b4\uc6a9\uc744 \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. SSH public key \ubc30\ud3ec SSH\ub97c \ud1b5\ud574 \ub2e4\ub978 \uc11c\ubc84\ub85c \uc811\uc18d\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud328\uc2a4\uc6cc\ub4dc \uc785\ub825\uc744 \ud558\uac70\ub098 SSH public key \uc778\uc99d\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uce90\uc2dc \uc11c\ubc84\ub294 \uc678\ubd80(\uc778\ud130\ub137)\uc5d0 \ub178\ucd9c\ub418\uc9c0 \uc54a\uace0 \ub0b4\ubd80\ub9dd\uc5d0\uc11c \ub3d9\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud558\ub098 \uc9c0\uc815\ud558\uc5ec \uc554\ud638 \uc5c6\ub294 public key\ub97c \uc0dd\uc131\ud55c \ub4a4 \ud574\ub2f9 key\ub97c \uac01 \uc11c\ubc84\uc5d0 \ubc30\ud3ec\ud558\uc5ec \uc774 \uc11c\ubc84\ub97c \uac8c\uc774\ud2b8\uc6e8\uc774\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ub9c1\ud06c\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub77c\uba70 \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac04\ub2e8\ud55c \uc808\ucc28\ub9cc \uc18c\uac1c\ud569\ub2c8\ub2e4. https://help.ubuntu.com/community/SSH/OpenSSH/Keys (\uc601\ubb38) \ub2e4\ub978 \uc11c\ubc84\ub97c \uad00\ub9ac\ud560 \uc6a9\ub3c4\uc758 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud55c \ub300 \uacb0\uc815\ud569\ub2c8\ub2e4. \uc774 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uc5ec SSH key\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. $ mkdir -p ~/.ssh $ chmod 700 ~/.ssh $ ssh-keygen -t rsa \uac01 \uc11c\ubc84\uc5d0 public key\ub97c \uc804\uc1a1\ud569\ub2c8\ub2e4. # SSH \uc554\ud638\ub97c \uc785\ub825\ud574\uc57c \ud568. \uc790\uc2e0\uc758 \ud658\uacbd\uc5d0 \ub9de\uac8c <username>, <hostname> \ubcc0\uacbd $ ssh-copy-id <username>@<hostname> \ud328\uc2a4\uc6cc\ub4dc \uc5c6\uc774 \uc811\uc18d\uc774 \uc798 \ub418\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. \uc798 \uc548\ub420 \uacbd\uc6b0 \ub9c1\ud06c \ub97c \ucc38\uc870 \ubc14\ub78d\ub2c8\ub2e4. $ ssh <username>@<hostname> Fabric Fabric \uc740 \uc2dc\uc2a4\ud15c \uad00\ub9ac\uc640 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uce58\ub97c \uc790\ub3d9\ud654 \ud558\uae30 \uc704\ud55c \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\uba70 Ansible \uacfc \uac19\uc774 \ubcc4\ub3c4\uc758 \uc5d0\uc774\uc804\ud2b8 \ud504\ub85c\uc138\uc2a4 \uc5c6\uc774 SSH \uc811\uc18d\ub9cc\uc73c\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4. \uc544\ucee4\uc2a4 \ud328\ud0a4\uc9c0\uc5d0\ub294 Fabric\uacfc Fabric\uc774 \uc0ac\uc6a9\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8(fabfile)\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. ZooKeeper ZooKeeper \ub294 \ubd84\uc0b0 \uc791\uc5c5\uc744 \uc81c\uc5b4\ud558\uae30 \uc704\ud55c \ud2b8\ub9ac \ud615\ud0dc\uc758 \uc2e0\ub8b0\ub3c4 \ub192\uc740 \uc800\uc7a5\uc18c\uc785\ub2c8\ub2e4. \uc544\ucee4\uc2a4\ub294 \ubd84\uc0b0\ub41c \uac01 \uce90\uc2dc \uc11c\ubc84\uc758 \uc124\uc815\uc744 \uc800\uc7a5\ud558\uace0 \uc720\ud6a8\ud55c \uce90\uc2dc \uc11c\ubc84\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc81c\uacf5\ud558\uae30 \uc704\ud574 ZooKeeper\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. ZooKeeper\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc190\uc27d\uac8c \uc0ac\uc6a9\ud558\ub294 ZooKeeper \uc2a4\ud1a0\ub9ac\uc9c0, Zoopiter! \uc544\ucee4\uc2a4 \ud074\ub7ec\uc2a4\ud130 \uad6c\uc131 \uc544\ucee4\uc2a4 \ud074\ub7ec\uc2a4\ud130\ub294 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \uad6c\uc131\ud560 \uc218 \uc788\uc9c0\ub9cc \uc77c\ubc18\uc801\uc73c\ub85c \uad8c\uc7a5\ub418\ub294 \uad6c\uc131\uc744 \uc608\uc81c\ub85c \ubcf4\uc5ec\ub4dc\ub9bd\ub2c8\ub2e4. \uc8fc\ud0a4\ud37c\uc640 \uc544\ucee4\uc2a4\ub97c \uac19\uc740 \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\uac00 \ub9ce\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud55c \uc11c\ubc84\uc5d0\uc11c \uc8fc\ud0a4\ud37c \uc11c\ubc84\uc640 \uc544\ucee4\uc2a4 \uc11c\ubc84\ub97c \ud568\uaed8 \uc2e4\ud589\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. +--------------------+ +--------------------+ +--------------------+ | cache001.arcus | | cache002.arcus | | cache003.arcus | +--------------------+ +--------------------+ +--------------------+ | | | | | | | ZooKeeper1:2181 | | ZooKeeper2:2181 | | ZooKeeper3:2181 | | | | | | | | Memcached1-1:11211 | | Memcached2-1:11211 | | Memcached3-1:11211 | | Memcached1-2:11212 | | Memcached2-2:11212 | | Memcached3-2:11212 | | | | | | | +--------------------+ +--------------------+ +--------------------+ \uae30\uc874\uc5d0 \uc6b4\uc601\ud558\ub358 \uc8fc\ud0a4\ud37c\ub97c \uc0ac\uc6a9\ud558\uace0 \uc544\ucee4\uc2a4\ub9cc \uc124\uce58","title":"Deploying arcus to multiple servers"},{"location":"admin/deploying-arcus-to-multiple-servers/#deploying-arcus-to-multiple-servers","text":"\uc544\ucee4\uc2a4\ub294 \ud55c \ub300\uc758 \uc11c\ubc84\uc5d0 \uc124\uce58\ud558\uc5ec \uc11c\ube44\uc2a4\ud560 \uc218 \uc788\uc9c0\ub9cc \uc2e4\uc81c \uc6b4\uc601 \ud658\uacbd\uc5d0\uc11c\ub294 \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 \uc544\ucee4\uc2a4\ub97c \ubd84\uc0b0 \ubc30\uce58\ud558\uc5ec \ubcf4\ub2e4 \ub9ce\uc740 \uc694\uccad\uc744 \ubc1b\uc73c\uba74\uc11c\ub3c4 \uc7a5\uc560\uc5d0\ub3c4 \ub300\ube44\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\uc131\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\uc5d0 \uc544\ucee4\uc2a4\ub97c \ubc30\ud3ec\ud558\uace0 \uad00\ub9ac\ud558\uace0\uc790 \ud558\ub294 \uc0ac\uc6a9\uc790\ub97c \uc704\ud574 \uc544\ucee4\uc2a4\ub97c \ubd84\uc0b0 \ubc30\uce58\ud558\ub294 \uba87 \uac00\uc9c0 \uc608\uc81c\ub97c \ubcf4\uc774\uace0, \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \ubc30\ud3ec \ubc0f \uc2dc\uc2a4\ud15c \uad00\ub9ac\ub97c \uc27d\uac8c \ud574\uc8fc\ub294 Fabric \uc744 \uc774\uc6a9\ud558\uc5ec \uc544\ucee4\uc2a4 \ud074\ub7ec\uc2a4\ud130\ub97c \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\ub824\ub4dc\ub9bd\ub2c8\ub2e4. \ub9cc\uc57d README\uc758 Quick Start \ub2e8\uacc4\ub97c \uc544\uc9c1 \uc9c4\ud589\ud574\ubcf4\uc9c0 \uc54a\uc73c\uc168\ub2e4\uba74 \uba3c\uc800 \ud574\ubcf4\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4.","title":"Deploying Arcus To Multiple Servers"},{"location":"admin/deploying-arcus-to-multiple-servers/#_1","text":"\uc5ec\ub7ec \ub300\uc758 \uc11c\ubc84\ub97c \ub2e4\ub8e8\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc740 \uc77c\uc785\ub2c8\ub2e4. \uc11c\ubc84 \uc124\uc815\uc744 \ub3d9\uc77c\ud558\uac8c \uc720\uc9c0\ud558\uac70\ub098 \uc5ed\ud560 \ubcc4\ub85c \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc124\uce58\ud558\uace0 \uc2e4\ud589\ud558\ub294 \uad00\ub9ac\uc791\uc5c5\uc740 \uc77c\uc77c\ud788 \uc218\uc791\uc5c5\uc73c\ub85c \ud558\uae30\uc5d0\ub294 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc774\uace0 \uc2e4\uc218\ub97c \uc720\ubc1c\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \uac00\ub2a5\ud55c\ud55c \uc790\ub3d9\ud654 \ud574\uc57c \ud569\ub2c8\ub2e4. \uacbd\ud5d8 \ub9ce\uc740 \uc0ac\uc6a9\uc790\ub77c\uba74 Puppet , Chef , Ansible , SaltStack , \ub4f1\uc758 \ub3c4\uad6c\ub97c \uc774\uc6a9\ud55c \uc790\ub3d9\ud654\ub41c \uc124\uce58/\ubc30\ud3ec \uc778\ud504\ub77c\ub97c \uc774\ubbf8 \uad6c\ucd95\ud574\ub450\uc5c8\uc744 \uac83\uc785\ub2c8\ub2e4. \ub9cc\uc57d \uc774\ub7ec\ud55c \ud658\uacbd\uc774 \uc900\ube44\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \uc544\ub798 \ub0b4\uc6a9\uc744 \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.","title":"\ubc30\uacbd \uc9c0\uc2dd"},{"location":"admin/deploying-arcus-to-multiple-servers/#ssh-public-key","text":"SSH\ub97c \ud1b5\ud574 \ub2e4\ub978 \uc11c\ubc84\ub85c \uc811\uc18d\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud328\uc2a4\uc6cc\ub4dc \uc785\ub825\uc744 \ud558\uac70\ub098 SSH public key \uc778\uc99d\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uce90\uc2dc \uc11c\ubc84\ub294 \uc678\ubd80(\uc778\ud130\ub137)\uc5d0 \ub178\ucd9c\ub418\uc9c0 \uc54a\uace0 \ub0b4\ubd80\ub9dd\uc5d0\uc11c \ub3d9\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud558\ub098 \uc9c0\uc815\ud558\uc5ec \uc554\ud638 \uc5c6\ub294 public key\ub97c \uc0dd\uc131\ud55c \ub4a4 \ud574\ub2f9 key\ub97c \uac01 \uc11c\ubc84\uc5d0 \ubc30\ud3ec\ud558\uc5ec \uc774 \uc11c\ubc84\ub97c \uac8c\uc774\ud2b8\uc6e8\uc774\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ub9c1\ud06c\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub77c\uba70 \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac04\ub2e8\ud55c \uc808\ucc28\ub9cc \uc18c\uac1c\ud569\ub2c8\ub2e4. https://help.ubuntu.com/community/SSH/OpenSSH/Keys (\uc601\ubb38) \ub2e4\ub978 \uc11c\ubc84\ub97c \uad00\ub9ac\ud560 \uc6a9\ub3c4\uc758 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\ub97c \ud55c \ub300 \uacb0\uc815\ud569\ub2c8\ub2e4. \uc774 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uc5ec SSH key\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. $ mkdir -p ~/.ssh $ chmod 700 ~/.ssh $ ssh-keygen -t rsa \uac01 \uc11c\ubc84\uc5d0 public key\ub97c \uc804\uc1a1\ud569\ub2c8\ub2e4. # SSH \uc554\ud638\ub97c \uc785\ub825\ud574\uc57c \ud568. \uc790\uc2e0\uc758 \ud658\uacbd\uc5d0 \ub9de\uac8c <username>, <hostname> \ubcc0\uacbd $ ssh-copy-id <username>@<hostname> \ud328\uc2a4\uc6cc\ub4dc \uc5c6\uc774 \uc811\uc18d\uc774 \uc798 \ub418\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. \uc798 \uc548\ub420 \uacbd\uc6b0 \ub9c1\ud06c \ub97c \ucc38\uc870 \ubc14\ub78d\ub2c8\ub2e4. $ ssh <username>@<hostname>","title":"SSH public key \ubc30\ud3ec"},{"location":"admin/deploying-arcus-to-multiple-servers/#fabric","text":"Fabric \uc740 \uc2dc\uc2a4\ud15c \uad00\ub9ac\uc640 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uce58\ub97c \uc790\ub3d9\ud654 \ud558\uae30 \uc704\ud55c \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\uba70 Ansible \uacfc \uac19\uc774 \ubcc4\ub3c4\uc758 \uc5d0\uc774\uc804\ud2b8 \ud504\ub85c\uc138\uc2a4 \uc5c6\uc774 SSH \uc811\uc18d\ub9cc\uc73c\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4. \uc544\ucee4\uc2a4 \ud328\ud0a4\uc9c0\uc5d0\ub294 Fabric\uacfc Fabric\uc774 \uc0ac\uc6a9\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8(fabfile)\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","title":"Fabric"},{"location":"admin/deploying-arcus-to-multiple-servers/#zookeeper","text":"ZooKeeper \ub294 \ubd84\uc0b0 \uc791\uc5c5\uc744 \uc81c\uc5b4\ud558\uae30 \uc704\ud55c \ud2b8\ub9ac \ud615\ud0dc\uc758 \uc2e0\ub8b0\ub3c4 \ub192\uc740 \uc800\uc7a5\uc18c\uc785\ub2c8\ub2e4. \uc544\ucee4\uc2a4\ub294 \ubd84\uc0b0\ub41c \uac01 \uce90\uc2dc \uc11c\ubc84\uc758 \uc124\uc815\uc744 \uc800\uc7a5\ud558\uace0 \uc720\ud6a8\ud55c \uce90\uc2dc \uc11c\ubc84\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc81c\uacf5\ud558\uae30 \uc704\ud574 ZooKeeper\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. ZooKeeper\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc190\uc27d\uac8c \uc0ac\uc6a9\ud558\ub294 ZooKeeper \uc2a4\ud1a0\ub9ac\uc9c0, Zoopiter!","title":"ZooKeeper"},{"location":"admin/deploying-arcus-to-multiple-servers/#_2","text":"\uc544\ucee4\uc2a4 \ud074\ub7ec\uc2a4\ud130\ub294 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \uad6c\uc131\ud560 \uc218 \uc788\uc9c0\ub9cc \uc77c\ubc18\uc801\uc73c\ub85c \uad8c\uc7a5\ub418\ub294 \uad6c\uc131\uc744 \uc608\uc81c\ub85c \ubcf4\uc5ec\ub4dc\ub9bd\ub2c8\ub2e4.","title":"\uc544\ucee4\uc2a4 \ud074\ub7ec\uc2a4\ud130 \uad6c\uc131"},{"location":"admin/deploying-arcus-to-multiple-servers/#_3","text":"\uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc11c\ubc84\uac00 \ub9ce\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud55c \uc11c\ubc84\uc5d0\uc11c \uc8fc\ud0a4\ud37c \uc11c\ubc84\uc640 \uc544\ucee4\uc2a4 \uc11c\ubc84\ub97c \ud568\uaed8 \uc2e4\ud589\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. +--------------------+ +--------------------+ +--------------------+ | cache001.arcus | | cache002.arcus | | cache003.arcus | +--------------------+ +--------------------+ +--------------------+ | | | | | | | ZooKeeper1:2181 | | ZooKeeper2:2181 | | ZooKeeper3:2181 | | | | | | | | Memcached1-1:11211 | | Memcached2-1:11211 | | Memcached3-1:11211 | | Memcached1-2:11212 | | Memcached2-2:11212 | | Memcached3-2:11212 | | | | | | | +--------------------+ +--------------------+ +--------------------+","title":"\uc8fc\ud0a4\ud37c\uc640 \uc544\ucee4\uc2a4\ub97c \uac19\uc740 \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589"},{"location":"admin/deploying-arcus-to-multiple-servers/#_4","text":"","title":"\uae30\uc874\uc5d0 \uc6b4\uc601\ud558\ub358 \uc8fc\ud0a4\ud37c\ub97c \uc0ac\uc6a9\ud558\uace0 \uc544\ucee4\uc2a4\ub9cc \uc124\uce58"},{"location":"admin/faq-ko/","text":"\uc544\uc774\ud15c\uc744 set \ud588\ub294\ub370 \ubc14\ub85c \uc0ac\ub77c\uc9c0\ub294 \ud604\uc0c1\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. (\uc720\uc0ac: expire time \uc744 30\uc77c \uc774\uc0c1\uc73c\ub85c \uc124\uc815\ud558\uace0 \uc2f6\uc2b5\ub2c8\ub2e4) \uc774\ub7f0 \ud604\uc0c1\uc740 \ub300\ubd80\ubd84 expire time \uc744 30\uc77c \uc774\uc0c1\uc73c\ub85c \uc124\uc815\ud588\uc744 \ub54c \ubc1c\uc0dd\ud55c\ub2e4. expire time \uc740 \uc544\ub798\uc640 \uac19\uc740 \uae30\uc900\uc73c\ub85c \uc124\uc815\ub418\ub294\ub370, 30\uc77c\uc774 \ub118\uc744 \uacbd\uc6b0 1970\ub144 \uc774\ud6c4 \uc808\ub300 \uc2dc\uac04\uc73c\ub85c \uc778\uc2dd\ud558\uae30 \ub54c\ubb38\uc5d0, \uc77c\ubc18\uc801\uc73c\ub85c \ud604\uc7ac\uc2dc\uac04\ubcf4\ub2e4 \uacfc\uac70\uc758 \uc2dc\uac04\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \ubc14\ub85c invalid \ub418\uae30 \ub54c\ubb38\uc774\ub2e4. -1 : sticky item\uc73c\ub85c \uc124\uc815 (\uba54\ub274\uc5bc\uc758 sticky \ud56d\ubaa9 \ucc38\uace0: https://github.com/naver/arcus-memcached/blob/master/doc/arcus-basic-concept.md) 0 : never expired item\uc73c\ub85c \uc124\uc815, \uadf8\ub7ec\ub098 \uba54\ubaa8\ub9ac \ubd80\uc871 \uc2dc\uc5d0 evict\ub420 \uc218 \uc788\ub2e4. X <= (606024 30) : 30\uc77c \uc774\ud558\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"\ud604\uc7ac \uc2dc\uac04 + X(\ucd08)\"\ub85c \uacb0\uc815\ub41c\ub2e4. -2 \uc774\ud558\uc774\uba74, \uadf8 \uc989\uc2dc expire \ub41c\ub2e4. X > (606024 30) : 30\uc77c \ucd08\uacfc\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"X\"\ub85c \uacb0\uc815\ub41c\ub2e4. \uc774 \uacbd\uc6b0, X\ub97c unix time\uc73c\ub85c \uc778\uc2dd\ud558\uc5ec expiration time\uc73c\ub85c \uc124\uc815\ud558\ub294 \uac83\uc774\uba70, X\uac00 \ud604\uc7ac \uc2dc\uac04\ubcf4\ub2e4 \uc791\uc73c\uba74 \uadf8 \uc989\uc2dc expire \ub41c\ub2e4. 30\uc77c\uc774 \ub118\ub294 \uac12\uc73c\ub85c \uc124\uc815\ud558\uace0 \uc2f6\uc73c\uba74 \uc704\uc758 \uaddc\uce59\uc744 \ucc38\uc870\ud558\uc5ec \"\ud604\uc7ac \uc2dc\uac04 + expire time\" \uc744 unix timestamp \ub85c \ud658\uc0b0\ud558\uc5ec \uc124\uc815\ud55c\ub2e4. \uc790\ubc14 \ud074\ub77c\uc774\uc5b8\ud2b8 \ub85c\uac70 \uc124\uc815 \uc544\ub798 \ub9c1\ud06c\uc758 \uc124\uc815\uc744 \ucc38\uc870\ud558\uc5ec \ub85c\uac70\uc124\uc815\uc744 \ubcc0\uacbd\ud55c\ub2e4. https://github.com/naver/arcus-java-client/blob/master/docs/02-arcus-java-client.md#arcus-client-%EC%84%A4%EC%A0%95","title":"Faq ko"},{"location":"admin/faq-ko/#set-expire-time-30","text":"\uc774\ub7f0 \ud604\uc0c1\uc740 \ub300\ubd80\ubd84 expire time \uc744 30\uc77c \uc774\uc0c1\uc73c\ub85c \uc124\uc815\ud588\uc744 \ub54c \ubc1c\uc0dd\ud55c\ub2e4. expire time \uc740 \uc544\ub798\uc640 \uac19\uc740 \uae30\uc900\uc73c\ub85c \uc124\uc815\ub418\ub294\ub370, 30\uc77c\uc774 \ub118\uc744 \uacbd\uc6b0 1970\ub144 \uc774\ud6c4 \uc808\ub300 \uc2dc\uac04\uc73c\ub85c \uc778\uc2dd\ud558\uae30 \ub54c\ubb38\uc5d0, \uc77c\ubc18\uc801\uc73c\ub85c \ud604\uc7ac\uc2dc\uac04\ubcf4\ub2e4 \uacfc\uac70\uc758 \uc2dc\uac04\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \ubc14\ub85c invalid \ub418\uae30 \ub54c\ubb38\uc774\ub2e4. -1 : sticky item\uc73c\ub85c \uc124\uc815 (\uba54\ub274\uc5bc\uc758 sticky \ud56d\ubaa9 \ucc38\uace0: https://github.com/naver/arcus-memcached/blob/master/doc/arcus-basic-concept.md) 0 : never expired item\uc73c\ub85c \uc124\uc815, \uadf8\ub7ec\ub098 \uba54\ubaa8\ub9ac \ubd80\uc871 \uc2dc\uc5d0 evict\ub420 \uc218 \uc788\ub2e4. X <= (606024 30) : 30\uc77c \uc774\ud558\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"\ud604\uc7ac \uc2dc\uac04 + X(\ucd08)\"\ub85c \uacb0\uc815\ub41c\ub2e4. -2 \uc774\ud558\uc774\uba74, \uadf8 \uc989\uc2dc expire \ub41c\ub2e4. X > (606024 30) : 30\uc77c \ucd08\uacfc\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"X\"\ub85c \uacb0\uc815\ub41c\ub2e4. \uc774 \uacbd\uc6b0, X\ub97c unix time\uc73c\ub85c \uc778\uc2dd\ud558\uc5ec expiration time\uc73c\ub85c \uc124\uc815\ud558\ub294 \uac83\uc774\uba70, X\uac00 \ud604\uc7ac \uc2dc\uac04\ubcf4\ub2e4 \uc791\uc73c\uba74 \uadf8 \uc989\uc2dc expire \ub41c\ub2e4. 30\uc77c\uc774 \ub118\ub294 \uac12\uc73c\ub85c \uc124\uc815\ud558\uace0 \uc2f6\uc73c\uba74 \uc704\uc758 \uaddc\uce59\uc744 \ucc38\uc870\ud558\uc5ec \"\ud604\uc7ac \uc2dc\uac04 + expire time\" \uc744 unix timestamp \ub85c \ud658\uc0b0\ud558\uc5ec \uc124\uc815\ud55c\ub2e4.","title":"\uc544\uc774\ud15c\uc744 set \ud588\ub294\ub370 \ubc14\ub85c \uc0ac\ub77c\uc9c0\ub294 \ud604\uc0c1\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. (\uc720\uc0ac: expire time \uc744 30\uc77c \uc774\uc0c1\uc73c\ub85c \uc124\uc815\ud558\uace0 \uc2f6\uc2b5\ub2c8\ub2e4)"},{"location":"admin/faq-ko/#_1","text":"\uc544\ub798 \ub9c1\ud06c\uc758 \uc124\uc815\uc744 \ucc38\uc870\ud558\uc5ec \ub85c\uac70\uc124\uc815\uc744 \ubcc0\uacbd\ud55c\ub2e4. https://github.com/naver/arcus-java-client/blob/master/docs/02-arcus-java-client.md#arcus-client-%EC%84%A4%EC%A0%95","title":"\uc790\ubc14 \ud074\ub77c\uc774\uc5b8\ud2b8 \ub85c\uac70 \uc124\uc815"},{"location":"admin/howto-install-dependencies/","text":"How To Install Dependencies Install JDK & Ant ``` # Make a directory mkdir ~/vendor pushd ~/vendor # Install openjdk sudo yum install java-1.7.0-openjdk-devel (CentOS) sudo apt-get install openjdk-7-jdk (Ubuntu) # Or download it directly from Oracle http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html # Install Apache-Ant curl -OL http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.3-bin.tar.gz tar xvf apache-ant-1.9.3-bin.tar.gz ln -s apache-ant-1.9.3 ant # Set the paths # $HOME/.bashrc or $HOME/.bash_profile export JAVA_HOME= export ANT_HOME=$HOME/vendor/ant export PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$PATH source ~/.bashrc (or ~/.bash_profile) popd ``` Install tools for packaging and building ``` (CentOS) sudo yum install gcc gcc-c++ autoconf automake libtool pkgconfig cppunit-devel python-setuptools python-devel (Ubuntu) sudo apt-get install build-essential autoconf automake libtool libcppunit-dev python-setuptools python-dev ``` For OSX users ``` install homebrew ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\" install python easy_install python -c \"$(curl -O http://python-distribute.org/distribute_setup.py)\" # install build tools brew install autoconf automake libtool pkg-config cppunit ```","title":"Howto install dependencies"},{"location":"admin/howto-install-dependencies/#how-to-install-dependencies","text":"Install JDK & Ant ``` # Make a directory mkdir ~/vendor pushd ~/vendor # Install openjdk sudo yum install java-1.7.0-openjdk-devel (CentOS) sudo apt-get install openjdk-7-jdk (Ubuntu) # Or download it directly from Oracle http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html # Install Apache-Ant curl -OL http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.3-bin.tar.gz tar xvf apache-ant-1.9.3-bin.tar.gz ln -s apache-ant-1.9.3 ant # Set the paths # $HOME/.bashrc or $HOME/.bash_profile export JAVA_HOME= export ANT_HOME=$HOME/vendor/ant export PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$PATH source ~/.bashrc (or ~/.bash_profile) popd ``` Install tools for packaging and building ``` (CentOS) sudo yum install gcc gcc-c++ autoconf automake libtool pkgconfig cppunit-devel python-setuptools python-devel (Ubuntu) sudo apt-get install build-essential autoconf automake libtool libcppunit-dev python-setuptools python-dev ``` For OSX users ```","title":"How To Install Dependencies"},{"location":"admin/howto-install-dependencies/#install-homebrew","text":"ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"","title":"install homebrew"},{"location":"admin/howto-install-dependencies/#install-python-easy_install","text":"python -c \"$(curl -O http://python-distribute.org/distribute_setup.py)\" # install build tools brew install autoconf automake libtool pkg-config cppunit ```","title":"install python easy_install"},{"location":"admin/howto-manage-submodules/","text":"How To Manage GIT Submodules Git \uc11c\ube0c\ubaa8\ub4c8\uc740 \ubd84\uc0b0\ub41c \ud504\ub85c\uc81d\ud2b8\ub97c \ud558\ub098\ub85c \ubb36\uc744 \uc218 \uc788\ub294 \uc88b\uc740 \ubc29\ubc95\uc774\uc9c0\ub9cc \ud55c\ubc88 \ub9cc\ub4e4\uc5b4\uc9c4 \uc11c\ube0c\ubaa8\ub4c8\uc744 \ucd5c\uc2e0\uc73c\ub85c \uc720\uc9c0\ud558\uae30\uac00 \uae4c\ub2e4\ub85c\uc6b4 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uc544\ucee4\uc2a4 \ud328\ud0a4\uc9c0 \uad00\ub9ac\uc790\uac00 \uac01 \uc11c\ube0c\ubaa8\ub4c8\uc758 \ub9b4\ub9ac\uc988\uc5d0 \ub300\uc751\ud558\uc5ec \uc804\uccb4 \ud328\ud0a4\uc9c0\ub97c \ucd5c\uc2e0 \ub610\ub294 \ud2b9\uc815 \ubc84\uc804\uc73c\ub85c \ub9de\ucd94\ub294 \ubc29\ubc95\uc744 \uac04\ub7b5\ud788 \uae30\uc220\ud569\ub2c8\ub2e4. # \ud328\ud0a4\uc9c0\ub97c \uac00\uc9c0\uace0 \uc628\ub2e4. git clone ... cd arcus # submodule\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. git submodule init git submodule update # \uc774 \uc2dc\uc810\uc5d0 \ud604\uc7ac \ucc38\uc870\ub418\uace0 \uc788\ub294 \ubc84\uc804\uc744 \uac00\uc838\uc628\ub2e4. # \uc678\ubd80\uc5d0\uc11c \ubcc0\uacbd\ub41c submodule\uc774 \uc788\ub2e4\uba74 \ubcc0\uacbd \uc0ac\ud56d\uc744 \uac00\uc9c0\uace0 \uc628\ub2e4. cd server git pull origin master # master branch\uc758 HEAD\ub97c \uac00\uc838\uc624\uace0 \uc2f6\uc740 \uacbd\uc6b0 git checkout -b 1.7.0-tag remotes/origin/1.7.0 # remote branch\uc758 \ud2b9\uc815 tag\ub97c \uae30\uc900\uc73c\ub85c \ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0 # \uc704 \uc791\uc5c5\uc774 \ub05d\ub098\uba74 submodule\uc758 \ud3ec\uc778\ud130\uac00 \ubc14\ub010\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ubc18\uc601\ud558\uc790. git status git add server git commit -m 'updated submodule: server' git push -u origin master","title":"Howto manage submodules"},{"location":"admin/howto-manage-submodules/#how-to-manage-git-submodules","text":"Git \uc11c\ube0c\ubaa8\ub4c8\uc740 \ubd84\uc0b0\ub41c \ud504\ub85c\uc81d\ud2b8\ub97c \ud558\ub098\ub85c \ubb36\uc744 \uc218 \uc788\ub294 \uc88b\uc740 \ubc29\ubc95\uc774\uc9c0\ub9cc \ud55c\ubc88 \ub9cc\ub4e4\uc5b4\uc9c4 \uc11c\ube0c\ubaa8\ub4c8\uc744 \ucd5c\uc2e0\uc73c\ub85c \uc720\uc9c0\ud558\uae30\uac00 \uae4c\ub2e4\ub85c\uc6b4 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uc544\ucee4\uc2a4 \ud328\ud0a4\uc9c0 \uad00\ub9ac\uc790\uac00 \uac01 \uc11c\ube0c\ubaa8\ub4c8\uc758 \ub9b4\ub9ac\uc988\uc5d0 \ub300\uc751\ud558\uc5ec \uc804\uccb4 \ud328\ud0a4\uc9c0\ub97c \ucd5c\uc2e0 \ub610\ub294 \ud2b9\uc815 \ubc84\uc804\uc73c\ub85c \ub9de\ucd94\ub294 \ubc29\ubc95\uc744 \uac04\ub7b5\ud788 \uae30\uc220\ud569\ub2c8\ub2e4. # \ud328\ud0a4\uc9c0\ub97c \uac00\uc9c0\uace0 \uc628\ub2e4. git clone ... cd arcus # submodule\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. git submodule init git submodule update # \uc774 \uc2dc\uc810\uc5d0 \ud604\uc7ac \ucc38\uc870\ub418\uace0 \uc788\ub294 \ubc84\uc804\uc744 \uac00\uc838\uc628\ub2e4. # \uc678\ubd80\uc5d0\uc11c \ubcc0\uacbd\ub41c submodule\uc774 \uc788\ub2e4\uba74 \ubcc0\uacbd \uc0ac\ud56d\uc744 \uac00\uc9c0\uace0 \uc628\ub2e4. cd server git pull origin master # master branch\uc758 HEAD\ub97c \uac00\uc838\uc624\uace0 \uc2f6\uc740 \uacbd\uc6b0 git checkout -b 1.7.0-tag remotes/origin/1.7.0 # remote branch\uc758 \ud2b9\uc815 tag\ub97c \uae30\uc900\uc73c\ub85c \ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0 # \uc704 \uc791\uc5c5\uc774 \ub05d\ub098\uba74 submodule\uc758 \ud3ec\uc778\ud130\uac00 \ubc14\ub010\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ubc18\uc601\ud558\uc790. git status git add server git commit -m 'updated submodule: server' git push -u origin master","title":"How To Manage GIT Submodules"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/","text":"Arcus client\ub294 Arcus admin\uacfc Arcus cache server\uad70 \ub4e4\uacfc\uc758 \uc5f0\uacb0\uc744 \uc720\uc9c0\ud558\uba70 client\ub85c \ub4e4\uc5b4\uc628 \uba85\ub839\uc744 \ucc98\ub9ac\ud558\uc5ec \uadf8 \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4 Arcus C client\ub294 C/C++ \uac1c\ubc1c\ud658\uacbd\uc5d0\uc11c Arcus\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c\uc11c, \ub300\ud45c\uc801\uc778 memcached C client\uc778 libmemcached \ub97c \uae30\ubc18\uc73c\ub85c \uac1c\ubc1c\ud558\uc600\ub2e4. \ub530\ub77c\uc11c libmemcached\uc758 \uae30\ub2a5\uc744 \ub300\ubd80\ubd84 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, Arcus cache server\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 failover \uae30\ub2a5\uacfc collection \uae30\ub2a5 \ub4f1\uc744 \ucd94\uac00\ub85c \uc9c0\uc6d0\ud55c\ub2e4. \uc9c0\uc6d0\ub418\ub294 \ucd94\uac00 \uae30\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. Cache Cluster-awareness: Arcus admin \uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\uc5ec \uc790\uc2e0\uc774 \uc0ac\uc6a9\ud558\ub294 \uce90\uc2dc \uc11c\ubc84 \ud074\ub7ec\uc2a4\ud130\uc758 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uc790\ub3d9\uc73c\ub85c \uc778\uc2dd\ud55c\ub2e4. Collection APIs: Arcus cache server\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 List, Set, B+tree \ud615\ud0dc\uc758 \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Prefix: \ud2b9\uc815 prefix\ub97c \uac00\uc9c0\ub294 \ubaa8\ub4e0 item\uc744 \uc0ad\uc81c\ud560 \uc218 \uc788\ub2e4. \uc544\ub798\uc758 \uc21c\uc11c\ub85c Arcus C Client \uc0ac\uc6a9\ubc95\uc744 \uc124\uba85\ud55c\ub2e4. 1-1. \uc11c\ubc84 \ubaa8\ub378\uc5d0 \ub530\ub978 \ucd08\uae30\ud654 \uc11c\ubc84 \ubaa8\ub378\uc5d0 \ub530\ub978 \ucd08\uae30\ud654 \uba54\uc18c\ub4dc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Single-Threaded C arcus_return_t arcus_connect(memcached_st *mc, const char *ensemble_list, const char *svc_code) \uc2f1\uae00 \uc2a4\ub808\ub4dc \uc11c\ubc84\uc5d0\uc11c Arcus\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. Multi-Threaded C arcus_return_t arcus_pool_connect(memcached_pool_st *pool, const char *ensemble_list, const char *svc_code) \uba40\ud2f0 \uc2a4\ub808\ub4dc \uc11c\ubc84\uc5d0\uc11c Arcus\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. Multi-Process C arcus_return_t arcus_proxy_create(memcached_st *mc, const char *ensemble_list, const char *svc_code) arcus_return_t arcus_proxy_connect(memcached_st *mc, memcached_pool_st *pool, memcached_st *proxy) arcus_proxy_create \ud568\uc218\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc758 \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 Arcus\uc5d0 \uc5f0\uacb0\ud55c \ub4a4, \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub4e4\uc774 \uc0ac\uc6a9\ud560 proxy\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. arcus_proxy_connect \ud568\uc218\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc758 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 \uc0dd\uc131\ud55c proxy\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. \ucc38\uace0 \uc0ac\ud56d\uc73c\ub85c, \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc774\uc9c0\ub9cc \uac01 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \uba40\ud2f0 \uc4f0\ub808\ub4dc\ub85c \ub3d9\uc791\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 pool\uc744 \uc0dd\uc131\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Arcus C client\ub294 \uc11c\ube44\uc2a4\uc5d0\uc11c \ucc44\uc6a9\ud55c \uc11c\ubc84 \ubaa8\ub378\uc5d0 \ub530\ub77c \ub2e4\uc591\ud55c \ucd08\uae30\ud654 API\ub97c \uc81c\uacf5\ud55c\ub2e4. \ucd08\uae30\ud654 API\ub294 Arcus admin\uc5d0 \uc811\uc18d\ud558\uc5ec \uc8fc\uc5b4\uc9c4 \uc11c\ube44\uc2a4\ucf54\ub4dc\uc5d0 \ud574\ub2f9\ud558\ub294 Arcus cache server \ub9ac\uc2a4\ud2b8\ub97c \uac00\uc838\uc640\uc11c, consistent hashing\uc744 \uc704\ud55c \ucd08\uae30\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud55c\ub2e4. \ucd08\uae30\ud654 API\uc5d0\uc11c \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud30c\ub77c\ubbf8\ud130\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. ensemble_list : Arcus admin\uc758 \uc8fc\uc18c. svc_code : \ubd80\uc5ec \ubc1b\uc740 \uc11c\ube44\uc2a4\ucf54\ub4dc. 1-2. Multi-Threaded Example \ub9ce\uc740 \uc11c\ube44\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 Multi-threaded \uc11c\ubc84\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd08\uae30\ud654 \ud560 \uc218 \uc788\ub2e4. #include \"libmemcached/memcached.h\" int main(int argc, char** argv) { int initial = 4; int max = 16; memcached_st *master_mc = NULL; memcached_pool_st *pool = NULL; // 1. Pool\uc744 \uad6c\uc131\ud558\uae30 \uc704\ud55c \uae30\uc900\uc774 \ub420 memcached_st \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. master_mc = memcached_create(NULL); // 2. Pool\uc744 \uad6c\uc131\ud55c\ub2e4. \uae30\uc900 memcached_st \uad6c\uc870\uccb4\uc758 \ud3ec\uc778\ud130\uc640 pool\uc758 \ucd08\uae30 \ubc0f \ucd5c\ub300 \ud06c\uae30\ub97c \uc785\ub825\ud55c\ub2e4. pool = memcached_pool_create(master_mc, initial, max); // 3. Arcus admin\uc5d0 \uc5f0\uacb0\ud55c\ub2e4. arcus_return_t error = arcus_pool_connect(pool, \"dev.arcuscloud.nhncorp.com:17288\", \"dev\"); if (error != ARCUS_SUCCESS) { fprintf(stderr, \"arcus_connect() failed, reason=%s\\n\", arcus_strerror(error)); exit(1); } // \uc0dd\uc131\ub41c \uc790\uc6d0\uc744 \ubc18\ud658\ud55c\ub2e4. arcus_pool_close(pool); memcached_pool_destroy(pool); memcached_free(mc); return EXIT_SUCCESS; } \uc704 \ucf54\ub4dc\ub294 Multi-threaded \uc11c\ubc84\uc5d0\uc11c Arcus\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 memcached_st \uad6c\uc870\uccb4\uc5d0 \ub300\ud55c pool\uc744 \uad6c\uc131\ud55c\ub2e4. memcached_st \uad6c\uc870\uccb4\ub294 Arcus cache server \uc5f0\uacb0 \uc815\ubcf4 \ubc0f \uac01\uc885 \uc124\uc815\uc774 \ud3ec\ud568\ub41c \uae30\ubcf8 \uc790\ub8cc\uad6c\uc870\ub85c\uc11c \ubaa8\ub4e0 \uce90\uc2dc \uc694\uccad API\uc5d0\uc11c \uc0ac\uc6a9\ub41c\ub2e4. \uc644\uc804\ud55c \uc608\uc81c\ub294 \uc18c\uc2a4 \ud328\ud0a4\uc9c0\uc5d0 \ud3ec\ud568\ub41c arcus/multi_threaded.c\ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. Multi-Process Example \uc77c\ubd80 \uc11c\ube44\uc2a4\uc5d0\uc11c\ub294 Apache\uc640 \ube44\uc2b7\ud55c \ud504\ub85c\uc138\uc2a4 prefork \ubaa8\ub378\uc744 \uc774\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774 \uac19\uc740 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \ubc29\uc2dd\uc758 \uc11c\ubc84\uc5d0\uc11c Arcus C client\ub97c \ucd08\uae30\ud654 \ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. #include <unistd.h> #include <stdlib.h> #include <string.h> #include <pthread.h> #include <time.h> #include <sys/wait.h> #include \"libmemcached/memcached.h\" #define NUM_OF_CHILDREN 10 #define NUM_OF_WORKERS 10 /* \uac01 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \uc4f0\ub808\ub4dc */ static void *my_app_thread(void *ctx_pool) { memcached_pool_st *pool = (memcached_pool_st *)ctx_pool; memcached_st *mc; memcached_return_t rc; int count = 0; while (count++ < 10000) { struct timespec wait = { 0, 0 }; // pool\uc5d0\uc11c memcached_st \uad6c\uc870\uccb4 \ud558\ub098\ub97c \uaebc\ub0b4\uc628\ub2e4. mc = memcached_pool_fetch(pool, &wait, &rc); if (mc) { char key[256]; uint64_t value = 100; snprintf(key, 100, \"test:kv_%d\", getpid()); rc = memcached_set(mc, key, strlen(key), (char *)&value, sizeof(value), 600, 0); if (rc != MEMCACHED_SUCCESS) { fprintf(stderr, \"memcached_set: %s\\n\", memcached_strerror(NULL, rc)); } } // pool\uc5d0 memcached_st \uad6c\uc870\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. rc = memcached_pool_release(pool, mc); if (rc != MEMCACHED_SUCCESS) { fprintf(stderr, \"memcached_pool_release: %s\\n\", memcached_strerror(NULL, rc)); } } fprintf(stderr, \"[pid:%d] done\\n\", getpid()); } /* \uc790\uc2dd \ud504\ub85c\uc138\uc2a4 */ static inline void process_child(memcached_st *proxy_mc) { fprintf(stderr, \"[pid:%d] begin : child_process\\n\", getpid()); // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \uc0ac\uc6a9\ud560 memcached_st \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_st *per_child_mc = memcached_create(NULL); // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \uba40\ud2f0 \uc4f0\ub808\ub4dc\ub85c \ub3d9\uc791\ud55c\ub2e4\uba74 memcached_st \uad6c\uc870\uccb4\uc5d0 \ub300\ud55c pool\uc744 \uc0dd\uc131\ud55c\ub2e4. memcached_pool_st *pool = memcached_pool_create(per_child_mc, NUM_OF_WORKERS/2, NUM_OF_WORKERS); // \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uc758 memcached_st \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84 \ub9ac\uc2a4\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8 \ubc1b\ub294\ub2e4. arcus_proxy_connect(per_child_mc, pool, proxy_mc); if (!pool) { fprintf(stderr, \"memcahed_pool_create: failed\\n\"); goto RETURN; } pthread_t tid[NUM_OF_WORKERS]; for (int id=0; id<NUM_OF_WORKERS; id++) { pthread_create(&tid[id], NULL, my_app_thread, pool); } for (int id=0; id<NUM_OF_WORKERS; id++) { pthread_join(tid[id], NULL); } memcached_pool_destroy(pool); memcached_free(per_child_mc); RETURN: fprintf(stderr, \"[pid:%d] end : child_process\\n\", getpid()); arcus_proxy_close(per_child_mc); } int main(int argc __attribute__((unused)), char *argv[] __attribute__((unused))) { memcached_st *proxy_mc; arcus_return_t rc; int i; // \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 \uc0ac\uc6a9\ud560 memcached_st \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. proxy_mc = memcached_create(NULL); // Arcus admin\uacfc \uc5f0\uacb0\uc744 \uc720\uc9c0\ud558\ub294 \uc4f0\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84 \uc815\ubcf4\ub97c \uc5c5\ub370\uc774\ud2b8 \ubc1b\ub294\ub2e4. rc = arcus_proxy_create(proxy_mc, \"dev.arcuscloud.nhncorp.com:17288\", \"test1_6\"); if (rc != ARCUS_SUCCESS) { goto RELEASE; } pid_t pid; // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub97c fork \ud55c\ub2e4. for (i=0; i<NUM_OF_CHILDREN; i++) { pid = fork(); switch (pid) { case 0: process_child(proxy_mc); exit(EXIT_SUCCESS); case -1: perror(\"fork error\"); exit(EXIT_FAILURE); default: break; } } // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub97c \uae30\ub2e4\ub9b0\ub2e4. siginfo_t info; waitid(P_ALL, 0, &info, WEXITED | WSTOPPED | WCONTINUED); //sleep(20); RELEASE: arcus_proxy_close(proxy_mc); memcached_free(proxy_mc); return EXIT_SUCCESS; } \uc704 \ucf54\ub4dc\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc5d0\uc11c Arcus\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \uae30\ubcf8 \ucd08\uae30\ud654 \ubc29\ubc95\uc774\ub2e4. \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c Arcus admin\uacfc \uc5f0\uacb0\uc744 \uc720\uc9c0\ud558\ub294 \uc4f0\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84 \ub9ac\uc2a4\ud2b8\uc758 \ubcc0\uacbd \uc0ac\ud56d\uc744 \uc5c5\ub370\uc774\ud2b8 \ubc1b\ub3c4\ub85d \ud558\uace0, \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c\ub294 \ubd80\ubaa8\uc758 memcached_st \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec Arcus admin\uacfc\uc758 \uc5f0\uacb0 \uc5c6\uc774 \uce90\uc2dc \uc11c\ubc84 \ub9ac\uc2a4\ud2b8\ub97c \uc5bb\uc5b4 \uc628\ub2e4. \ud2b9\ud788, \uac01 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \ub0b4\ubd80\uc801\uc73c\ub85c \uba40\ud2f0 \uc4f0\ub808\ub4dc\ub85c \ub3d9\uc791\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c pool\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\ub3c4 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. 1-3. Client \uc124\uc815\uacfc \uc0ac\uc6a9 \ub85c\uadf8 \ub0a8\uae30\uae30 Arcus C client\ub294 Arcus admin\uacfc\uc758 \uc5f0\uacb0 \uc0c1\ud0dc \ubc0f Arcus cache server \ub9ac\uc2a4\ud2b8\uc758 \ubcc0\uacbd \uc0ac\ud56d\uc5d0 \ub300\ud574 \ub85c\uadf8\ub97c \ub0a8\uae34\ub2e4. \ub85c\uadf8\ub294 ZooKeeper client\uc5d0 \ub0b4\uc7a5\ub41c \ub85c\uae45 API\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70 \uae30\ubcf8\uc801\uc73c\ub85c \ud45c\uc900 \uc5d0\ub7ec(stderr )\ub85c \ucd9c\ub825\ub41c\ub2e4. Arcus cache server \ub9ac\uc2a4\ud2b8 \ubcc0\uacbd\uc5d0 \ub300\ud55c \ub85c\uadf8\ub294 \ubb38\uc81c \uc0c1\ud669 \ubc1c\uc0dd \uc2dc \uadc0\uc911\ud55c \ud78c\ud2b8\uac00 \ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \ubcc4\ub3c4\uc758 \ud30c\uc77c\ub85c \ub0a8\uae30\ub294 \uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4. \ub9cc\uc57d \ud45c\uc900 \uc5d0\ub7ec\ub97c \ud30c\uc77c\ub85c \ub0a8\uae30\uae30 \ud798\ub4e4\uac70\ub098 \ub2e4\ub978 \ub85c\uadf8 \ud30c\uc77c\uacfc \ubd84\ub9ac\ud558\uc5ec \uae30\ub85d\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. void arcus_set_log_stream(memcached_st *mc, FILE *logfile); Arcus \uad00\ub828 \ub85c\uadf8\ub97c \uae30\ub85d\ud558\uae30 \uc704\ud55c FILE stream\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc704 API\ub294 \uc544\ub798\uc640 \uac19\uc774 memcached_st \uad6c\uc870\uccb4 \uc0dd\uc131 \ucf54\ub4dc \ubc14\ub85c \ub2e4\uc74c\uc5d0 \ucd94\uac00\ud55c\ub2e4. mc = memcached_create(NULL); arcus_set_log_stream(mc, logfile); \uce90\uc2dc \uba85\ub839\uc5d0 \ub300\ud55c OPERATION TIMEOUT \uc9c0\uc815 \uce90\uc2dc \uba85\ub839\uc744 \ubcf4\ub0b4\uace0 \uc751\ub2f5\uc744 \ubc1b\uae30\uae4c\uc9c0\uc758 timeout \uc2dc\uac04\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. mc = memcached_create(NULL); memcached_behavior_set(mc, MEMCACHED_BEHAVIOR_POLL_TIMEOUT, (uint64_t)timeout); timeout \uc2dc\uac04\uc740 \ubc00\ub9ac\ucd08(ms) \ub2e8\uc704\uc774\uba70, \uae30\ubcf8 \uac12\uc740 MEMCACHED_DEFAULT_TIMEOUT (500ms) \uc774\ub2e4. \uce90\uc2dc \ub178\ub4dc\uc5d0 \ub300\ud55c CONNECTION TIMEOUT \uc9c0\uc815 \uce90\uc2dc\uc5f0\uacb0\uc774 \ub04a\uc5b4\uc9c4 \ud6c4 \uc7ac\uc5f0\uacb0 \uc694\uccad \uc2dc\uc758 timeout \uc2dc\uac04\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. mc = memcached_create(NULL); memcached_behavior_set(mc, MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT, (uint64_t)timeout); timeout \uc2dc\uac04\uc740 \ubc00\ub9ac\ucd08(ms) \ub2e8\uc704\uc774\uba70, \uae30\ubcf8 \uac12\uc740 MEMCACHED_DEFAULT_CONNECT_TIMEOUT (1000ms) \uc774\ub2e4. connection timeout\uc774 \ubc1c\uc0dd\ud558\uba74 RETRY_TIMEOUT \uc2dc\uac04 \ud6c4\uc5d0 \ud574\ub2f9 \uce90\uc2dc \ub178\ub4dc\ub85c \uc7ac\uc5f0\uacb0\uc744 \uc2dc\ub3c4\ud55c\ub2e4. RETRY_TIMEOUT\uc774 0\uc774\uba74, connection timeout\uc774 \ubc1c\uc0dd\ud560 \ub54c\ub9c8\ub2e4 \uc989\uc2dc \uc7ac\uc5f0\uacb0\uc744 \uc2dc\ub3c4\ud55c\ub2e4. \uc774\ub7ec\ud55c RETRY_TIMEOUT \uc2dc\uac04\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. mc = memcached_create(NULL); memcached_behavior_set(mc, MEMCACHED_BEHAVIOR_RETRY_TIMEOUT, (uint64_t)timeout); timeout \uc2dc\uac04\uc740 \ucd08(s) \ub2e8\uc704\uc774\uba70, \uae30\ubcf8 \uac12\uc740 MEMCACHED_SERVER_FAILURE_RETRY_TIMEOUT (2\ucd08) \uc774\ub2e4. \ucc38\uace0 \uc0ac\ud56d\uc73c\ub85c, \uc7ac\uc5f0\uacb0 \uc2dc\ub3c4\ub294 \ubb34\ud55c\ud788 \ubc18\ubcf5\ud55c\ub2e4. \ub9cc\uc57d \ud574\ub2f9 \uce90\uc2dc \ub178\ub4dc\uac00 failure \uc0c1\ud0dc\ub77c\uba74, ARCUS\uc758 admin\uc778 ZooKeeper\uc5d0 \uc758\ud574 failed \uce90\uc2dc \ub178\ub4dc\ub85c \uac10\uc9c0\ub418\uc5b4 cache node list\uc5d0\uc11c \uc81c\uac70\ub418\uc5b4, \uadf8 \uce90\uc2dc \ub178\ub4dc\ub85c\uc758 \uc7ac\uc5f0\uacb0 \uc694\uccad\uc740 \uc911\ub2e8\ub418\uac8c \ub41c\ub2e4. \uadf8\ub9ac\uace0, \uc815\uc0c1\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc740 \uce90\uc2dc \ub178\ub4dc\ub85c\uc758 \uc694\uccad\uc5d0 \ub300\ud574\uc11c\ub294 MEMCACHED_SERVER_TEMPORARILY_DISABLED (\u201cSERVER HAS FAILED AND IS DISABLED UNTIL TIMED RETRY\u201d) \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. \uce90\uc2dc API\uc758 \uc751\ub2f5\ucf54\ub4dc \ud655\uc778 \uce90\uc2dc \uba85\ub839\uc744 \uc2e4\ud589\ud55c \ud6c4\uc5d0 \uce90\uc2dc \uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uc751\ub2f5 \ucf54\ub4dc\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \uc774 \uc751\ub2f5\ucf54\ub4dc\ub294 \uba85\ub839\uc758 \uc2e4\ud589 \uacb0\uacfc\uc5d0 \ub300\ud55c \ucd94\uac00 \uc815\ubcf4\ub97c \uc81c\uacf5\ud55c\ub2e4. memcached_return_t res = memcached_get_last_response_code(mc); \ud655\uc778 \uac00\ub2a5\ud55c \uc751\ub2f5 \ucf54\ub4dc\ub294 \uac01 API \uc124\uba85\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba70 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ub418\uc5b4 \uc788\ub2e4. Response Codes MEMCACHED_SUCCESS (API\uc758 \ub9ac\ud134\uac12\uc774 MEMCACHED_SUCCESS \uc778 \uacbd\uc6b0. \uc989 API\uac00 \uc131\uacf5\ud55c \uacbd\uc6b0) MEMCACHED_STORED (\uac00\ub2a5\ud55c \uc751\ub2f5\ucf54\ub4dc) not MEMCACHED_SUCCESS (API\uc758 \ub9ac\ud134\uac12\uc774 MEMCACHED_SUCCESS\uac00 \uc544\ub2cc \uacbd\uc6b0, \uc989 API\uac00 \uc2e4\ud328\ud55c \uacbd\uc6b0) MEMCACHED_NOTFOUND (\uac00\ub2a5\ud55c \uc751\ub2f5\ucf54\ub4dc)","title":"1. arcus c client"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#1-1","text":"\uc11c\ubc84 \ubaa8\ub378\uc5d0 \ub530\ub978 \ucd08\uae30\ud654 \uba54\uc18c\ub4dc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Single-Threaded C arcus_return_t arcus_connect(memcached_st *mc, const char *ensemble_list, const char *svc_code) \uc2f1\uae00 \uc2a4\ub808\ub4dc \uc11c\ubc84\uc5d0\uc11c Arcus\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. Multi-Threaded C arcus_return_t arcus_pool_connect(memcached_pool_st *pool, const char *ensemble_list, const char *svc_code) \uba40\ud2f0 \uc2a4\ub808\ub4dc \uc11c\ubc84\uc5d0\uc11c Arcus\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. Multi-Process C arcus_return_t arcus_proxy_create(memcached_st *mc, const char *ensemble_list, const char *svc_code) arcus_return_t arcus_proxy_connect(memcached_st *mc, memcached_pool_st *pool, memcached_st *proxy) arcus_proxy_create \ud568\uc218\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc758 \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 Arcus\uc5d0 \uc5f0\uacb0\ud55c \ub4a4, \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub4e4\uc774 \uc0ac\uc6a9\ud560 proxy\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. arcus_proxy_connect \ud568\uc218\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc758 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 \uc0dd\uc131\ud55c proxy\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c\ub2e4. \ucc38\uace0 \uc0ac\ud56d\uc73c\ub85c, \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc774\uc9c0\ub9cc \uac01 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \uba40\ud2f0 \uc4f0\ub808\ub4dc\ub85c \ub3d9\uc791\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 pool\uc744 \uc0dd\uc131\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Arcus C client\ub294 \uc11c\ube44\uc2a4\uc5d0\uc11c \ucc44\uc6a9\ud55c \uc11c\ubc84 \ubaa8\ub378\uc5d0 \ub530\ub77c \ub2e4\uc591\ud55c \ucd08\uae30\ud654 API\ub97c \uc81c\uacf5\ud55c\ub2e4. \ucd08\uae30\ud654 API\ub294 Arcus admin\uc5d0 \uc811\uc18d\ud558\uc5ec \uc8fc\uc5b4\uc9c4 \uc11c\ube44\uc2a4\ucf54\ub4dc\uc5d0 \ud574\ub2f9\ud558\ub294 Arcus cache server \ub9ac\uc2a4\ud2b8\ub97c \uac00\uc838\uc640\uc11c, consistent hashing\uc744 \uc704\ud55c \ucd08\uae30\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud55c\ub2e4. \ucd08\uae30\ud654 API\uc5d0\uc11c \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud30c\ub77c\ubbf8\ud130\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. ensemble_list : Arcus admin\uc758 \uc8fc\uc18c. svc_code : \ubd80\uc5ec \ubc1b\uc740 \uc11c\ube44\uc2a4\ucf54\ub4dc.","title":"1-1. \uc11c\ubc84 \ubaa8\ub378\uc5d0 \ub530\ub978 \ucd08\uae30\ud654"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#1-2-multi-threaded-example","text":"\ub9ce\uc740 \uc11c\ube44\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 Multi-threaded \uc11c\ubc84\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd08\uae30\ud654 \ud560 \uc218 \uc788\ub2e4. #include \"libmemcached/memcached.h\" int main(int argc, char** argv) { int initial = 4; int max = 16; memcached_st *master_mc = NULL; memcached_pool_st *pool = NULL; // 1. Pool\uc744 \uad6c\uc131\ud558\uae30 \uc704\ud55c \uae30\uc900\uc774 \ub420 memcached_st \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. master_mc = memcached_create(NULL); // 2. Pool\uc744 \uad6c\uc131\ud55c\ub2e4. \uae30\uc900 memcached_st \uad6c\uc870\uccb4\uc758 \ud3ec\uc778\ud130\uc640 pool\uc758 \ucd08\uae30 \ubc0f \ucd5c\ub300 \ud06c\uae30\ub97c \uc785\ub825\ud55c\ub2e4. pool = memcached_pool_create(master_mc, initial, max); // 3. Arcus admin\uc5d0 \uc5f0\uacb0\ud55c\ub2e4. arcus_return_t error = arcus_pool_connect(pool, \"dev.arcuscloud.nhncorp.com:17288\", \"dev\"); if (error != ARCUS_SUCCESS) { fprintf(stderr, \"arcus_connect() failed, reason=%s\\n\", arcus_strerror(error)); exit(1); } // \uc0dd\uc131\ub41c \uc790\uc6d0\uc744 \ubc18\ud658\ud55c\ub2e4. arcus_pool_close(pool); memcached_pool_destroy(pool); memcached_free(mc); return EXIT_SUCCESS; } \uc704 \ucf54\ub4dc\ub294 Multi-threaded \uc11c\ubc84\uc5d0\uc11c Arcus\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 memcached_st \uad6c\uc870\uccb4\uc5d0 \ub300\ud55c pool\uc744 \uad6c\uc131\ud55c\ub2e4. memcached_st \uad6c\uc870\uccb4\ub294 Arcus cache server \uc5f0\uacb0 \uc815\ubcf4 \ubc0f \uac01\uc885 \uc124\uc815\uc774 \ud3ec\ud568\ub41c \uae30\ubcf8 \uc790\ub8cc\uad6c\uc870\ub85c\uc11c \ubaa8\ub4e0 \uce90\uc2dc \uc694\uccad API\uc5d0\uc11c \uc0ac\uc6a9\ub41c\ub2e4. \uc644\uc804\ud55c \uc608\uc81c\ub294 \uc18c\uc2a4 \ud328\ud0a4\uc9c0\uc5d0 \ud3ec\ud568\ub41c arcus/multi_threaded.c\ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4.","title":"1-2. Multi-Threaded Example"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#multi-process-example","text":"\uc77c\ubd80 \uc11c\ube44\uc2a4\uc5d0\uc11c\ub294 Apache\uc640 \ube44\uc2b7\ud55c \ud504\ub85c\uc138\uc2a4 prefork \ubaa8\ub378\uc744 \uc774\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774 \uac19\uc740 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \ubc29\uc2dd\uc758 \uc11c\ubc84\uc5d0\uc11c Arcus C client\ub97c \ucd08\uae30\ud654 \ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. #include <unistd.h> #include <stdlib.h> #include <string.h> #include <pthread.h> #include <time.h> #include <sys/wait.h> #include \"libmemcached/memcached.h\" #define NUM_OF_CHILDREN 10 #define NUM_OF_WORKERS 10 /* \uac01 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \uc4f0\ub808\ub4dc */ static void *my_app_thread(void *ctx_pool) { memcached_pool_st *pool = (memcached_pool_st *)ctx_pool; memcached_st *mc; memcached_return_t rc; int count = 0; while (count++ < 10000) { struct timespec wait = { 0, 0 }; // pool\uc5d0\uc11c memcached_st \uad6c\uc870\uccb4 \ud558\ub098\ub97c \uaebc\ub0b4\uc628\ub2e4. mc = memcached_pool_fetch(pool, &wait, &rc); if (mc) { char key[256]; uint64_t value = 100; snprintf(key, 100, \"test:kv_%d\", getpid()); rc = memcached_set(mc, key, strlen(key), (char *)&value, sizeof(value), 600, 0); if (rc != MEMCACHED_SUCCESS) { fprintf(stderr, \"memcached_set: %s\\n\", memcached_strerror(NULL, rc)); } } // pool\uc5d0 memcached_st \uad6c\uc870\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. rc = memcached_pool_release(pool, mc); if (rc != MEMCACHED_SUCCESS) { fprintf(stderr, \"memcached_pool_release: %s\\n\", memcached_strerror(NULL, rc)); } } fprintf(stderr, \"[pid:%d] done\\n\", getpid()); } /* \uc790\uc2dd \ud504\ub85c\uc138\uc2a4 */ static inline void process_child(memcached_st *proxy_mc) { fprintf(stderr, \"[pid:%d] begin : child_process\\n\", getpid()); // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \uc0ac\uc6a9\ud560 memcached_st \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_st *per_child_mc = memcached_create(NULL); // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \uba40\ud2f0 \uc4f0\ub808\ub4dc\ub85c \ub3d9\uc791\ud55c\ub2e4\uba74 memcached_st \uad6c\uc870\uccb4\uc5d0 \ub300\ud55c pool\uc744 \uc0dd\uc131\ud55c\ub2e4. memcached_pool_st *pool = memcached_pool_create(per_child_mc, NUM_OF_WORKERS/2, NUM_OF_WORKERS); // \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uc758 memcached_st \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84 \ub9ac\uc2a4\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8 \ubc1b\ub294\ub2e4. arcus_proxy_connect(per_child_mc, pool, proxy_mc); if (!pool) { fprintf(stderr, \"memcahed_pool_create: failed\\n\"); goto RETURN; } pthread_t tid[NUM_OF_WORKERS]; for (int id=0; id<NUM_OF_WORKERS; id++) { pthread_create(&tid[id], NULL, my_app_thread, pool); } for (int id=0; id<NUM_OF_WORKERS; id++) { pthread_join(tid[id], NULL); } memcached_pool_destroy(pool); memcached_free(per_child_mc); RETURN: fprintf(stderr, \"[pid:%d] end : child_process\\n\", getpid()); arcus_proxy_close(per_child_mc); } int main(int argc __attribute__((unused)), char *argv[] __attribute__((unused))) { memcached_st *proxy_mc; arcus_return_t rc; int i; // \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 \uc0ac\uc6a9\ud560 memcached_st \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. proxy_mc = memcached_create(NULL); // Arcus admin\uacfc \uc5f0\uacb0\uc744 \uc720\uc9c0\ud558\ub294 \uc4f0\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84 \uc815\ubcf4\ub97c \uc5c5\ub370\uc774\ud2b8 \ubc1b\ub294\ub2e4. rc = arcus_proxy_create(proxy_mc, \"dev.arcuscloud.nhncorp.com:17288\", \"test1_6\"); if (rc != ARCUS_SUCCESS) { goto RELEASE; } pid_t pid; // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub97c fork \ud55c\ub2e4. for (i=0; i<NUM_OF_CHILDREN; i++) { pid = fork(); switch (pid) { case 0: process_child(proxy_mc); exit(EXIT_SUCCESS); case -1: perror(\"fork error\"); exit(EXIT_FAILURE); default: break; } } // \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub97c \uae30\ub2e4\ub9b0\ub2e4. siginfo_t info; waitid(P_ALL, 0, &info, WEXITED | WSTOPPED | WCONTINUED); //sleep(20); RELEASE: arcus_proxy_close(proxy_mc); memcached_free(proxy_mc); return EXIT_SUCCESS; } \uc704 \ucf54\ub4dc\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \uc11c\ubc84\uc5d0\uc11c Arcus\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \uae30\ubcf8 \ucd08\uae30\ud654 \ubc29\ubc95\uc774\ub2e4. \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c Arcus admin\uacfc \uc5f0\uacb0\uc744 \uc720\uc9c0\ud558\ub294 \uc4f0\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uc5ec \uce90\uc2dc \uc11c\ubc84 \ub9ac\uc2a4\ud2b8\uc758 \ubcc0\uacbd \uc0ac\ud56d\uc744 \uc5c5\ub370\uc774\ud2b8 \ubc1b\ub3c4\ub85d \ud558\uace0, \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c\ub294 \ubd80\ubaa8\uc758 memcached_st \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec Arcus admin\uacfc\uc758 \uc5f0\uacb0 \uc5c6\uc774 \uce90\uc2dc \uc11c\ubc84 \ub9ac\uc2a4\ud2b8\ub97c \uc5bb\uc5b4 \uc628\ub2e4. \ud2b9\ud788, \uac01 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \ub0b4\ubd80\uc801\uc73c\ub85c \uba40\ud2f0 \uc4f0\ub808\ub4dc\ub85c \ub3d9\uc791\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c pool\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\ub3c4 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","title":"Multi-Process Example"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#1-3-client","text":"","title":"1-3. Client \uc124\uc815\uacfc \uc0ac\uc6a9"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#_1","text":"Arcus C client\ub294 Arcus admin\uacfc\uc758 \uc5f0\uacb0 \uc0c1\ud0dc \ubc0f Arcus cache server \ub9ac\uc2a4\ud2b8\uc758 \ubcc0\uacbd \uc0ac\ud56d\uc5d0 \ub300\ud574 \ub85c\uadf8\ub97c \ub0a8\uae34\ub2e4. \ub85c\uadf8\ub294 ZooKeeper client\uc5d0 \ub0b4\uc7a5\ub41c \ub85c\uae45 API\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70 \uae30\ubcf8\uc801\uc73c\ub85c \ud45c\uc900 \uc5d0\ub7ec(stderr )\ub85c \ucd9c\ub825\ub41c\ub2e4. Arcus cache server \ub9ac\uc2a4\ud2b8 \ubcc0\uacbd\uc5d0 \ub300\ud55c \ub85c\uadf8\ub294 \ubb38\uc81c \uc0c1\ud669 \ubc1c\uc0dd \uc2dc \uadc0\uc911\ud55c \ud78c\ud2b8\uac00 \ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \ubcc4\ub3c4\uc758 \ud30c\uc77c\ub85c \ub0a8\uae30\ub294 \uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4. \ub9cc\uc57d \ud45c\uc900 \uc5d0\ub7ec\ub97c \ud30c\uc77c\ub85c \ub0a8\uae30\uae30 \ud798\ub4e4\uac70\ub098 \ub2e4\ub978 \ub85c\uadf8 \ud30c\uc77c\uacfc \ubd84\ub9ac\ud558\uc5ec \uae30\ub85d\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. void arcus_set_log_stream(memcached_st *mc, FILE *logfile); Arcus \uad00\ub828 \ub85c\uadf8\ub97c \uae30\ub85d\ud558\uae30 \uc704\ud55c FILE stream\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc704 API\ub294 \uc544\ub798\uc640 \uac19\uc774 memcached_st \uad6c\uc870\uccb4 \uc0dd\uc131 \ucf54\ub4dc \ubc14\ub85c \ub2e4\uc74c\uc5d0 \ucd94\uac00\ud55c\ub2e4. mc = memcached_create(NULL); arcus_set_log_stream(mc, logfile);","title":"\ub85c\uadf8 \ub0a8\uae30\uae30"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#operation-timeout","text":"\uce90\uc2dc \uba85\ub839\uc744 \ubcf4\ub0b4\uace0 \uc751\ub2f5\uc744 \ubc1b\uae30\uae4c\uc9c0\uc758 timeout \uc2dc\uac04\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. mc = memcached_create(NULL); memcached_behavior_set(mc, MEMCACHED_BEHAVIOR_POLL_TIMEOUT, (uint64_t)timeout); timeout \uc2dc\uac04\uc740 \ubc00\ub9ac\ucd08(ms) \ub2e8\uc704\uc774\uba70, \uae30\ubcf8 \uac12\uc740 MEMCACHED_DEFAULT_TIMEOUT (500ms) \uc774\ub2e4.","title":"\uce90\uc2dc \uba85\ub839\uc5d0 \ub300\ud55c OPERATION TIMEOUT \uc9c0\uc815"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#connection-timeout","text":"\uce90\uc2dc\uc5f0\uacb0\uc774 \ub04a\uc5b4\uc9c4 \ud6c4 \uc7ac\uc5f0\uacb0 \uc694\uccad \uc2dc\uc758 timeout \uc2dc\uac04\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. mc = memcached_create(NULL); memcached_behavior_set(mc, MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT, (uint64_t)timeout); timeout \uc2dc\uac04\uc740 \ubc00\ub9ac\ucd08(ms) \ub2e8\uc704\uc774\uba70, \uae30\ubcf8 \uac12\uc740 MEMCACHED_DEFAULT_CONNECT_TIMEOUT (1000ms) \uc774\ub2e4. connection timeout\uc774 \ubc1c\uc0dd\ud558\uba74 RETRY_TIMEOUT \uc2dc\uac04 \ud6c4\uc5d0 \ud574\ub2f9 \uce90\uc2dc \ub178\ub4dc\ub85c \uc7ac\uc5f0\uacb0\uc744 \uc2dc\ub3c4\ud55c\ub2e4. RETRY_TIMEOUT\uc774 0\uc774\uba74, connection timeout\uc774 \ubc1c\uc0dd\ud560 \ub54c\ub9c8\ub2e4 \uc989\uc2dc \uc7ac\uc5f0\uacb0\uc744 \uc2dc\ub3c4\ud55c\ub2e4. \uc774\ub7ec\ud55c RETRY_TIMEOUT \uc2dc\uac04\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. mc = memcached_create(NULL); memcached_behavior_set(mc, MEMCACHED_BEHAVIOR_RETRY_TIMEOUT, (uint64_t)timeout); timeout \uc2dc\uac04\uc740 \ucd08(s) \ub2e8\uc704\uc774\uba70, \uae30\ubcf8 \uac12\uc740 MEMCACHED_SERVER_FAILURE_RETRY_TIMEOUT (2\ucd08) \uc774\ub2e4. \ucc38\uace0 \uc0ac\ud56d\uc73c\ub85c, \uc7ac\uc5f0\uacb0 \uc2dc\ub3c4\ub294 \ubb34\ud55c\ud788 \ubc18\ubcf5\ud55c\ub2e4. \ub9cc\uc57d \ud574\ub2f9 \uce90\uc2dc \ub178\ub4dc\uac00 failure \uc0c1\ud0dc\ub77c\uba74, ARCUS\uc758 admin\uc778 ZooKeeper\uc5d0 \uc758\ud574 failed \uce90\uc2dc \ub178\ub4dc\ub85c \uac10\uc9c0\ub418\uc5b4 cache node list\uc5d0\uc11c \uc81c\uac70\ub418\uc5b4, \uadf8 \uce90\uc2dc \ub178\ub4dc\ub85c\uc758 \uc7ac\uc5f0\uacb0 \uc694\uccad\uc740 \uc911\ub2e8\ub418\uac8c \ub41c\ub2e4. \uadf8\ub9ac\uace0, \uc815\uc0c1\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc740 \uce90\uc2dc \ub178\ub4dc\ub85c\uc758 \uc694\uccad\uc5d0 \ub300\ud574\uc11c\ub294 MEMCACHED_SERVER_TEMPORARILY_DISABLED (\u201cSERVER HAS FAILED AND IS DISABLED UNTIL TIMED RETRY\u201d) \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4.","title":"\uce90\uc2dc \ub178\ub4dc\uc5d0 \ub300\ud55c CONNECTION TIMEOUT \uc9c0\uc815"},{"location":"arcus-c-client/1.10-(latest)/1.-arcus-c-client/#api","text":"\uce90\uc2dc \uba85\ub839\uc744 \uc2e4\ud589\ud55c \ud6c4\uc5d0 \uce90\uc2dc \uc11c\ubc84\ub85c\ubd80\ud130 \ubc1b\uc740 \uc751\ub2f5 \ucf54\ub4dc\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \uc774 \uc751\ub2f5\ucf54\ub4dc\ub294 \uba85\ub839\uc758 \uc2e4\ud589 \uacb0\uacfc\uc5d0 \ub300\ud55c \ucd94\uac00 \uc815\ubcf4\ub97c \uc81c\uacf5\ud55c\ub2e4. memcached_return_t res = memcached_get_last_response_code(mc); \ud655\uc778 \uac00\ub2a5\ud55c \uc751\ub2f5 \ucf54\ub4dc\ub294 \uac01 API \uc124\uba85\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba70 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ub418\uc5b4 \uc788\ub2e4. Response Codes MEMCACHED_SUCCESS (API\uc758 \ub9ac\ud134\uac12\uc774 MEMCACHED_SUCCESS \uc778 \uacbd\uc6b0. \uc989 API\uac00 \uc131\uacf5\ud55c \uacbd\uc6b0) MEMCACHED_STORED (\uac00\ub2a5\ud55c \uc751\ub2f5\ucf54\ub4dc) not MEMCACHED_SUCCESS (API\uc758 \ub9ac\ud134\uac12\uc774 MEMCACHED_SUCCESS\uac00 \uc544\ub2cc \uacbd\uc6b0, \uc989 API\uac00 \uc2e4\ud328\ud55c \uacbd\uc6b0) MEMCACHED_NOTFOUND (\uac00\ub2a5\ud55c \uc751\ub2f5\ucf54\ub4dc)","title":"\uce90\uc2dc API\uc758 \uc751\ub2f5\ucf54\ub4dc \ud655\uc778"},{"location":"arcus-c-client/1.10-(latest)/2.-key-value-API/","text":"Key-value item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 \ud558\ub098\uc758 value\ub9cc\uc744 \uc800\uc7a5\ud558\ub294 item\uc774\ub2e4. \uc81c\uc57d\uc870\uac74 - Key\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 250 character\uc774\ub2e4. - Value\ub294 \ucd5c\ub300 1Mb\uae4c\uc9c0 \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4. 2-1. Key-Value Item \uc800\uc7a5 key-value item\uc744 \uc800\uc7a5\ud558\ub294 API\ub85c set, add, replace, prepend/append\uac00 \uc788\ub2e4. memcached_return_t memcached_set(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_return_t memcached_add(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_return_t memcached_replace(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_set: \uc8fc\uc5b4\uc9c4 key\uc5d0 value\ub97c \uc800\uc7a5\ud55c\ub2e4. memcached_add: \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0\uc5d0\ub9cc value\ub97c \uc800\uc7a5\ud55c\ub2e4. memcached_replace: \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc value\ub97c \uc800\uc7a5\ud55c\ub2e4. memcached_return_t memcached_prepend(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_return_t memcached_append(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_prepend: \uc8fc\uc5b4\uc9c4 key\uc758 value\uc5d0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c prepend\ud55c\ub2e4. memcached_append: \uc8fc\uc5b4\uc9c4 key\uc758 value\uc5d0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c append\ud55c\ub2e4. Key-value item \uc800\uc7a5 \uc5f0\uc0b0\uc5d0\uc11c \uc8fc\uc694 \ud30c\ub77c\ubbf8\ud130\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - expiration: key\uac00 \ud604\uc7ac \uc2dc\uac04\ubd80\ud130 expire \ub420 \ub54c\uae4c\uc9c0\uc758 \uc2dc\uac04(\ucd08 \ub2e8\uc704). \uc2dc\uac04\uc774 30\uc77c\uc744 \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 expire \ub420 unix time\uc744 \uc785\ub825\ud55c\ub2e4. - 0: key\uac00 expire \ub418\uc9c0 \uc54a\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4. \ud558\uc9c0\ub9cc Arcus cache server\uc758 \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud55c \uacbd\uc6b0 LRU\uc5d0 \uc758\ud574 \uc5b8\uc81c\ub4e0\uc9c0 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. - -1: key\ub97c sticky item\uc73c\ub85c \ub9cc\ub4e0\ub2e4. Sticky item\uc740 expire \ub418\uc9c0 \uc54a\uc73c\uba70 LRU\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\uc9c0\ub3c4 \uc54a\ub294\ub2e4. - flags: value\uc640\ub294 \ubcc4\ub3c4\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uac12\uc73c\ub85c\uc11c Java client \ub4f1\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc73c\ubbc0\ub85c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uae30\ub97c \uad8c\ud55c\ub2e4. 2-2. Key-Value Item \uc870\ud68c Key-value item\uc744 \uc870\ud68c\ud558\ub294 API\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. char * memcached_get(memcached_st *ptr, const char *key, size_t key_length, size_t *value_length, uint32_t *flags, memcached_return_t *error); \uc8fc\uc5b4\uc9c4 key\uc5d0 \ub300\ud55c value\ub97c \uc870\ud68c\ud55c\ub2e4. \ubc18\ud658\ub41c \uacb0\uacfc\ub294 NULL\uc774 \uc544\ub2cc \uacbd\uc6b0 \ubc18\ub4dc\uc2dc free \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. memcached_return_t memcached_mget(memcached_st *ptr, const char * const *keys, const size_t *key_length, size_t number_of_keys); char * memcached_fetch(memcached_st *ptr, char *key, size_t *key_length, size_t *value_length, uint32_t *flags, memcached_return_t *error); memcached_mget \uc740 \uc8fc\uc5b4\uc9c4 key \ubc30\uc5f4\uc5d0 \ub300\ud55c value\ub4e4\uc744 \uc870\ud68c\ud558\ub294 \uc694\uccad\uc744 \ubcf4\ub0b8\ub2e4. keys \uc778\uc790\ub294 key pointer array\uc774\uace0, key_length \uc778\uc790\ub294 key length array\uc774\ub2e4. memcached_fetch \ub294 mget \uc694\uccad\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud558\ub098\uc529 \uaebc\ub0b4\uc628\ub2e4. error \uac12\uc774 MEMCACHED_END\uac00 \ub420 \ub54c\uae4c\uc9c0 \uc2e4\ud589\ud558\uba74 \ub418\uba70, \uadf8 \uc774\ud6c4\uc5d0 fetch\ub97c \uc218\ud589\ud558\uba74 MEMCACHED_NOTFOUND\uac00 \ubc18\ud658\ub41c\ub2e4. Key-Value Item \uac12\uc758 \uc99d\uac10 Key-value item\uc5d0\uc11c \uc22b\uc790\ud615 value \uac12\uc5d0 \ub300\ud574\uc11c\ub9cc \uc544\ub798 \uc99d\uac10 \uc5f0\uc0b0\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_increment(memcached_st *ptr, const char *key, size_t key_length, uint32_t offset, uint64_t *value) memcached_return_t memcached_decrement(memcached_st *ptr, const char *key, size_t key_length, uint32_t offset, uint64_t *value) \uc8fc\uc5b4\uc9c4 key\uc758 value\ub97c offset \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c \uc2dc\ud0a8\ub2e4. \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74, \uc624\ub958\ub97c \ub0b8\ub2e4. memcached_return_t memcached_increment_with_initial(memcached_st *ptr, const char *key, size_t key_length, uint64_t offset, uint64_t initial, uint32_t flags, time_t expiration, uint64_t *value) memcached_return_t memcached_decrement_with_initial(memcached_st *ptr, const char *key, size_t key_length, uint64_t offset, uint64_t initial, uint32_t flags, time_t expiration, uint64_t *value) \uc8fc\uc5b4\uc9c4 key\uc758 value\ub97c offset \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c \uc2dc\ud0a8\ub2e4. \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74, initial \uac12\uc73c\ub85c \uc800\uc7a5\ud55c\ub2e4. 2-3. Key-Value Item \uc0ad\uc81c memcached_return_t memcached_delete(memcached_st *ptr, const char *key, size_t key_length, time_t expiration); \uc8fc\uc5b4\uc9c4 key\ub97c \uc0ad\uc81c\ud55c\ub2e4. expiration \uac12\uc774 0 \uc774\uc0c1\uc73c\ub85c \uc9c0\uc815\ub418\uba74 key\ub294 expiration \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4.","title":"2. key value API"},{"location":"arcus-c-client/1.10-(latest)/2.-key-value-API/#2-1-key-value-item","text":"key-value item\uc744 \uc800\uc7a5\ud558\ub294 API\ub85c set, add, replace, prepend/append\uac00 \uc788\ub2e4. memcached_return_t memcached_set(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_return_t memcached_add(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_return_t memcached_replace(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_set: \uc8fc\uc5b4\uc9c4 key\uc5d0 value\ub97c \uc800\uc7a5\ud55c\ub2e4. memcached_add: \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0\uc5d0\ub9cc value\ub97c \uc800\uc7a5\ud55c\ub2e4. memcached_replace: \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc value\ub97c \uc800\uc7a5\ud55c\ub2e4. memcached_return_t memcached_prepend(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_return_t memcached_append(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, time_t expiration, uint32_t flags); memcached_prepend: \uc8fc\uc5b4\uc9c4 key\uc758 value\uc5d0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c prepend\ud55c\ub2e4. memcached_append: \uc8fc\uc5b4\uc9c4 key\uc758 value\uc5d0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c append\ud55c\ub2e4. Key-value item \uc800\uc7a5 \uc5f0\uc0b0\uc5d0\uc11c \uc8fc\uc694 \ud30c\ub77c\ubbf8\ud130\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - expiration: key\uac00 \ud604\uc7ac \uc2dc\uac04\ubd80\ud130 expire \ub420 \ub54c\uae4c\uc9c0\uc758 \uc2dc\uac04(\ucd08 \ub2e8\uc704). \uc2dc\uac04\uc774 30\uc77c\uc744 \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 expire \ub420 unix time\uc744 \uc785\ub825\ud55c\ub2e4. - 0: key\uac00 expire \ub418\uc9c0 \uc54a\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4. \ud558\uc9c0\ub9cc Arcus cache server\uc758 \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud55c \uacbd\uc6b0 LRU\uc5d0 \uc758\ud574 \uc5b8\uc81c\ub4e0\uc9c0 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. - -1: key\ub97c sticky item\uc73c\ub85c \ub9cc\ub4e0\ub2e4. Sticky item\uc740 expire \ub418\uc9c0 \uc54a\uc73c\uba70 LRU\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\uc9c0\ub3c4 \uc54a\ub294\ub2e4. - flags: value\uc640\ub294 \ubcc4\ub3c4\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uac12\uc73c\ub85c\uc11c Java client \ub4f1\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc73c\ubbc0\ub85c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uae30\ub97c \uad8c\ud55c\ub2e4.","title":"2-1. Key-Value Item \uc800\uc7a5"},{"location":"arcus-c-client/1.10-(latest)/2.-key-value-API/#2-2-key-value-item","text":"Key-value item\uc744 \uc870\ud68c\ud558\ub294 API\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. char * memcached_get(memcached_st *ptr, const char *key, size_t key_length, size_t *value_length, uint32_t *flags, memcached_return_t *error); \uc8fc\uc5b4\uc9c4 key\uc5d0 \ub300\ud55c value\ub97c \uc870\ud68c\ud55c\ub2e4. \ubc18\ud658\ub41c \uacb0\uacfc\ub294 NULL\uc774 \uc544\ub2cc \uacbd\uc6b0 \ubc18\ub4dc\uc2dc free \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. memcached_return_t memcached_mget(memcached_st *ptr, const char * const *keys, const size_t *key_length, size_t number_of_keys); char * memcached_fetch(memcached_st *ptr, char *key, size_t *key_length, size_t *value_length, uint32_t *flags, memcached_return_t *error); memcached_mget \uc740 \uc8fc\uc5b4\uc9c4 key \ubc30\uc5f4\uc5d0 \ub300\ud55c value\ub4e4\uc744 \uc870\ud68c\ud558\ub294 \uc694\uccad\uc744 \ubcf4\ub0b8\ub2e4. keys \uc778\uc790\ub294 key pointer array\uc774\uace0, key_length \uc778\uc790\ub294 key length array\uc774\ub2e4. memcached_fetch \ub294 mget \uc694\uccad\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud558\ub098\uc529 \uaebc\ub0b4\uc628\ub2e4. error \uac12\uc774 MEMCACHED_END\uac00 \ub420 \ub54c\uae4c\uc9c0 \uc2e4\ud589\ud558\uba74 \ub418\uba70, \uadf8 \uc774\ud6c4\uc5d0 fetch\ub97c \uc218\ud589\ud558\uba74 MEMCACHED_NOTFOUND\uac00 \ubc18\ud658\ub41c\ub2e4.","title":"2-2. Key-Value Item \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/2.-key-value-API/#key-value-item","text":"Key-value item\uc5d0\uc11c \uc22b\uc790\ud615 value \uac12\uc5d0 \ub300\ud574\uc11c\ub9cc \uc544\ub798 \uc99d\uac10 \uc5f0\uc0b0\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_increment(memcached_st *ptr, const char *key, size_t key_length, uint32_t offset, uint64_t *value) memcached_return_t memcached_decrement(memcached_st *ptr, const char *key, size_t key_length, uint32_t offset, uint64_t *value) \uc8fc\uc5b4\uc9c4 key\uc758 value\ub97c offset \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c \uc2dc\ud0a8\ub2e4. \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74, \uc624\ub958\ub97c \ub0b8\ub2e4. memcached_return_t memcached_increment_with_initial(memcached_st *ptr, const char *key, size_t key_length, uint64_t offset, uint64_t initial, uint32_t flags, time_t expiration, uint64_t *value) memcached_return_t memcached_decrement_with_initial(memcached_st *ptr, const char *key, size_t key_length, uint64_t offset, uint64_t initial, uint32_t flags, time_t expiration, uint64_t *value) \uc8fc\uc5b4\uc9c4 key\uc758 value\ub97c offset \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c \uc2dc\ud0a8\ub2e4. \uc8fc\uc5b4\uc9c4 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74, initial \uac12\uc73c\ub85c \uc800\uc7a5\ud55c\ub2e4.","title":"Key-Value Item \uac12\uc758 \uc99d\uac10"},{"location":"arcus-c-client/1.10-(latest)/2.-key-value-API/#2-3-key-value-item","text":"memcached_return_t memcached_delete(memcached_st *ptr, const char *key, size_t key_length, time_t expiration); \uc8fc\uc5b4\uc9c4 key\ub97c \uc0ad\uc81c\ud55c\ub2e4. expiration \uac12\uc774 0 \uc774\uc0c1\uc73c\ub85c \uc9c0\uc815\ub418\uba74 key\ub294 expiration \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4.","title":"2-3. Key-Value Item \uc0ad\uc81c"},{"location":"arcus-c-client/1.10-(latest)/3.-list-API/","text":"List item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 \uc5ec\ub7ec value\ub4e4\uc744 double linked list \uad6c\uc870\ub85c \uc720\uc9c0\ud55c\ub2e4. \uc81c\uc57d \uc870\uac74 - \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218: \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) - \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB - List\uc758 \uc55e, \ub4a4\uc5d0\uc11c element\ub97c \uc0bd\uc785/\uc0ad\uc81c\ud558\uae30\ub97c \uad8c\ud55c\ub2e4. \uc784\uc758\uc758 index \uc704\uce58\uc5d0\uc11c element \uc0bd\uc785/\uc0ad\uc81c\uac00 \uac00\ub2a5\ud558\uc9c0\ub9cc, \uc784\uc758\uc758 index \uc704\uce58\ub97c \uc2e0\uc18d\ud788 \ucc3e\uc544\uac00\uae30 \uc704\ud55c \uc790\ub8cc\uad6c\uc870\uac00 \ud604\uc7ac \uc5c6\ub294 \uc0c1\ud0dc\ub77c\uc11c \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4. 3-1. List Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty list item\uc744 \uc0dd\uc131\ud55c\ub2e4. emcached_return_t memcached_lop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes); key: list item\uc758 key attributes: list item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: List\uac00 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 List\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc640 \uac19\uc774 \ucd08\uae30\ud654\ud55c\ub2e4. Attributes \uad6c\uc870\uccb4\uc758 \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) memcached_coll_create_attrs_set_flags : attributes\uc5d0 flags \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_expiretime : attributes\uc5d0 expire time\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_maxcount : attributes\uc5d0 maxcount \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_overflowaction : List\uc758 Element \uac1c\uc218\uac00 maxcount\ub97c \ub118\uc5b4 \uc130\uc744 \ub54c(overflow)\uc758 \ub3d9\uc791\uc744 \uc124\uc815\ud55c\ub2e4. OVERFLOWACTION_ERROR: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uc624\ub958(MEMCACHED_OVERFLOWED)\ub97c \ubc18\ud658\ud558\ub3c4\ub85d \ud55c\ub2e4. OVERFLOWACTION_HEAD_TRIM: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uac00\uc7a5 \uc791\uc740 index\ub97c \uac16\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. OVERFLOWACTION_TAIL_TRIM: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uac00\uc7a5 \ud070 index\ub97c \uac16\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_create_set_unreadable : \uc0dd\uc131 \uc2dc unreadable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4 \uac83\uc778\uc9c0 \uc124\uc815\ud55c\ub2e4. Unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c List\ub294 readable \uc0c1\ud0dc\uac00 \ub418\uae30 \uc804\uae4c\uc9c0 \uc870\ud68c\ud560 \uc218 \uc5c6\ub2e4. \uc774\ub807\uac8c unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c B+tree\ub97c readable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294 memcached_set_attrs\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. List item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_item_create(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // \ube44\uc5b4\uc788\ub294 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud55c\ub2e4. rc= memcached_lop_create(memc, \"list:an_empty_list\", strlen(\"list:an_empty_list\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \ub9ac\uc2a4\ud2b8\uac00 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74 \uc2e4\ud328\ud55c\ub2e4. rc= memcached_lop_create(memc, \"list:an_empty_list\", strlen(\"list:an_empty_list\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); } 3-2. List Element \uc0bd\uc785 List\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_insert(memcached_st *ptr, const char *key, size_t key_length, const int32_t index, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: list item\uc758 key index: list index (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 value, value_lenth: \uc0bd\uc785\ud560 element\uc758 value attributes: List \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty list\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 List\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: List\uac00 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: List\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 List\uac00 \uc544\ub2d8. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_OUT_OF_RANGE: \uc0bd\uc785 \uc704\uce58\uac00 List\uc758 element index \ubc94\uc704\ub97c \ub118\uc5b4\uc12c. List element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_insert(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); int index= 0; // 1. CREATED_STORED index= 0; rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), index, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // 2. STORED index= 1; rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), index, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // 3. OUT_OF_RANGE index= 10; rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), index, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_OUT_OF_RANGE == rc); } List Element \uc0ad\uc81c List element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 list index\ub85c \ud558\ub098\uc758 element\ub9cc \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_delete(memcached_st *ptr, const char *key, size_t key_length, const int32_t index, bool drop_if_empty) index: single list index (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \ub458\uc9f8, list index range\ub85c \ub2e4\uc218\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_delete_by_range(memcached_st *ptr, const char *key, size_t key_length, const int32_t from, const int32_t to, bool drop_if_empty) from, to: list index range (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 index\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 index\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c List\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 List\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 index\ub098 index \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 List\uac00 \uc544\ub2d8. List element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc0bd\uc785\ud55c\ub2e4. rc= memcached_lop_insert(memc, \"list:a_list\", strlen(\"list:a_list\"), -1, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); rc= memcached_lop_insert(memc, \"list:a_list\", strlen(\"list:a_list\"), -1, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); // 1\ubc88 \uc778\ub371\uc2a4\uc758 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_lop_delete(memc, \"list:a_list\", strlen(\"list:a_list\"), 1, true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // 0\ubc88 \uc778\ub371\uc2a4\uc758 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c \ub9ac\uc2a4\ud2b8\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_lop_delete(memc, \"list:a_list\", strlen(\"list:a_list\"), 0, true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); } 3-3. List Element \uc870\ud68c List element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 list index\ub85c \ud558\ub098\uc758 element\ub9cc \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_get(memcached_st *ptr, const char *key, size_t key_length, const int32_t index, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) index: single list index (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \ub458\uc9f8, list index range\ub85c \ub2e4\uc218\uc758 element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_get_by_range(memcached_st *ptr, const char *key, size_t key_length, const int32_t from, const int32_t to, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) from, to: list index range (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: List\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DELETED: List\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: List\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. \uc774 \uacb0\uacfc empty \uc0c1\ud0dc\uac00 \ub41c List\ub97c \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 List\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 index \ub610\ub294 index \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 List\uac00 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 List\uac00 unreadable \uc0c1\ud0dc\uc784. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) List element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st *result; for (uint32_t i=0; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), i, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 result = memcached_coll_result_create(memc, NULL); rc= memcached_lop_get_by_range(memc, \"a_list\", strlen(\"a_list\"), maxcount, maxcount+maxcount, false, false, result); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. Empty \uc0c1\ud0dc\uac00 \ub41c \ub9ac\uc2a4\ud2b8\ub294 \uc0ad\uc81c\ub41c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_lop_get_by_range(memc, \"a_list\", strlen(\"a_list\"), 0, maxcount, true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); // \uc870\ud68c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { char buffer[15]; snprintf(buffer, 15, \"value%u\", (int)i); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); } 3-4. List Element \uc77c\uad04 \uc0bd\uc785 List\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 list\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t numr_of_piped_items, const int32_t *indexes, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 indexes: list index array (0-based index) values, values_length: \ub2e4\uc218 element \uac01\uac01\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 list\uac00 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c list\ub97c \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 list\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, const size_t numr_of_keys, const int32_t *indexes, const char * const *values, const size_t *valuelengths, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 key\ub4e4\uc744 \uc9c0\uc815 numr_of_keys: key\ub4e4\uc758 \uc218 indexes: list index array (0-based index) values, values_length: \uac01 list\uc5d0 \uc0bd\uc785\ud560 element\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 list\uac00 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c list\ub97c \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. List element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. STORED: element\ub9cc \uc0bd\uc785 CREATE_STORED: list item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. List element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; // pipe operation\uc758 \uc804\uccb4 \uc131\uacf5 \uc5ec\ubd80 memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 key\uc5d0 \ub300\ud55c \uc751\ub2f5\ucf54\ub4dc // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 int32_t indexes[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; for (uint32_t i=0; i<maxcount; i++) { indexes[i] = i; values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); } // piped insert\ub97c \uc694\uccad\ud55c\ub2e4. rc= memcached_lop_piped_insert(memc, \"a_list\", strlen(\"a_list\"), MEMCACHED_COLL_MAX_PIPED_CMD_SIZE, indexes, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); // \uac01 key\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<maxcount; i++)</nowiki> { assert(MEMCACHED_STORED == results[i] or MEMCACHED_CREATED_STORED == results[i]); } for (uint32_t i=0; i<maxcount; i++) free((void *)values[i]); free((void *)values); }","title":"3. list API"},{"location":"arcus-c-client/1.10-(latest)/3.-list-API/#3-1-list-item","text":"\uc0c8\ub85c\uc6b4 empty list item\uc744 \uc0dd\uc131\ud55c\ub2e4. emcached_return_t memcached_lop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes); key: list item\uc758 key attributes: list item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: List\uac00 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 List\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc640 \uac19\uc774 \ucd08\uae30\ud654\ud55c\ub2e4. Attributes \uad6c\uc870\uccb4\uc758 \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) memcached_coll_create_attrs_set_flags : attributes\uc5d0 flags \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_expiretime : attributes\uc5d0 expire time\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_maxcount : attributes\uc5d0 maxcount \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_overflowaction : List\uc758 Element \uac1c\uc218\uac00 maxcount\ub97c \ub118\uc5b4 \uc130\uc744 \ub54c(overflow)\uc758 \ub3d9\uc791\uc744 \uc124\uc815\ud55c\ub2e4. OVERFLOWACTION_ERROR: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uc624\ub958(MEMCACHED_OVERFLOWED)\ub97c \ubc18\ud658\ud558\ub3c4\ub85d \ud55c\ub2e4. OVERFLOWACTION_HEAD_TRIM: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uac00\uc7a5 \uc791\uc740 index\ub97c \uac16\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. OVERFLOWACTION_TAIL_TRIM: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uac00\uc7a5 \ud070 index\ub97c \uac16\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_create_set_unreadable : \uc0dd\uc131 \uc2dc unreadable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4 \uac83\uc778\uc9c0 \uc124\uc815\ud55c\ub2e4. Unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c List\ub294 readable \uc0c1\ud0dc\uac00 \ub418\uae30 \uc804\uae4c\uc9c0 \uc870\ud68c\ud560 \uc218 \uc5c6\ub2e4. \uc774\ub807\uac8c unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c B+tree\ub97c readable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294 memcached_set_attrs\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. List item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_item_create(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // \ube44\uc5b4\uc788\ub294 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud55c\ub2e4. rc= memcached_lop_create(memc, \"list:an_empty_list\", strlen(\"list:an_empty_list\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \ub9ac\uc2a4\ud2b8\uac00 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74 \uc2e4\ud328\ud55c\ub2e4. rc= memcached_lop_create(memc, \"list:an_empty_list\", strlen(\"list:an_empty_list\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); }","title":"3-1. List Item \uc0dd\uc131"},{"location":"arcus-c-client/1.10-(latest)/3.-list-API/#3-2-list-element","text":"List\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_insert(memcached_st *ptr, const char *key, size_t key_length, const int32_t index, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: list item\uc758 key index: list index (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 value, value_lenth: \uc0bd\uc785\ud560 element\uc758 value attributes: List \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty list\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 List\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: List\uac00 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: List\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 List\uac00 \uc544\ub2d8. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_OUT_OF_RANGE: \uc0bd\uc785 \uc704\uce58\uac00 List\uc758 element index \ubc94\uc704\ub97c \ub118\uc5b4\uc12c. List element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_insert(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); int index= 0; // 1. CREATED_STORED index= 0; rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), index, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // 2. STORED index= 1; rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), index, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // 3. OUT_OF_RANGE index= 10; rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), index, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_OUT_OF_RANGE == rc); }","title":"3-2. List Element \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/3.-list-API/#list-element","text":"List element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 list index\ub85c \ud558\ub098\uc758 element\ub9cc \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_delete(memcached_st *ptr, const char *key, size_t key_length, const int32_t index, bool drop_if_empty) index: single list index (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \ub458\uc9f8, list index range\ub85c \ub2e4\uc218\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_delete_by_range(memcached_st *ptr, const char *key, size_t key_length, const int32_t from, const int32_t to, bool drop_if_empty) from, to: list index range (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 index\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 index\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c List\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 List\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 index\ub098 index \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 List\uac00 \uc544\ub2d8. List element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc0bd\uc785\ud55c\ub2e4. rc= memcached_lop_insert(memc, \"list:a_list\", strlen(\"list:a_list\"), -1, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); rc= memcached_lop_insert(memc, \"list:a_list\", strlen(\"list:a_list\"), -1, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); // 1\ubc88 \uc778\ub371\uc2a4\uc758 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_lop_delete(memc, \"list:a_list\", strlen(\"list:a_list\"), 1, true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // 0\ubc88 \uc778\ub371\uc2a4\uc758 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c \ub9ac\uc2a4\ud2b8\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_lop_delete(memc, \"list:a_list\", strlen(\"list:a_list\"), 0, true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); }","title":"List Element \uc0ad\uc81c"},{"location":"arcus-c-client/1.10-(latest)/3.-list-API/#3-3-list-element","text":"List element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 list index\ub85c \ud558\ub098\uc758 element\ub9cc \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_get(memcached_st *ptr, const char *key, size_t key_length, const int32_t index, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) index: single list index (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \ub458\uc9f8, list index range\ub85c \ub2e4\uc218\uc758 element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_get_by_range(memcached_st *ptr, const char *key, size_t key_length, const int32_t from, const int32_t to, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) from, to: list index range (0-based index) 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: List\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DELETED: List\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: List\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. \uc774 \uacb0\uacfc empty \uc0c1\ud0dc\uac00 \ub41c List\ub97c \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 List\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 index \ub610\ub294 index \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 List\uac00 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 List\uac00 unreadable \uc0c1\ud0dc\uc784. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) List element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st *result; for (uint32_t i=0; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_lop_insert(memc, \"a_list\", strlen(\"a_list\"), i, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 result = memcached_coll_result_create(memc, NULL); rc= memcached_lop_get_by_range(memc, \"a_list\", strlen(\"a_list\"), maxcount, maxcount+maxcount, false, false, result); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. Empty \uc0c1\ud0dc\uac00 \ub41c \ub9ac\uc2a4\ud2b8\ub294 \uc0ad\uc81c\ub41c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_lop_get_by_range(memc, \"a_list\", strlen(\"a_list\"), 0, maxcount, true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); // \uc870\ud68c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { char buffer[15]; snprintf(buffer, 15, \"value%u\", (int)i); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); }","title":"3-3. List Element \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/3.-list-API/#3-4-list-element","text":"List\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 list\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t numr_of_piped_items, const int32_t *indexes, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 indexes: list index array (0-based index) values, values_length: \ub2e4\uc218 element \uac01\uac01\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 list\uac00 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c list\ub97c \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 list\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_lop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, const size_t numr_of_keys, const int32_t *indexes, const char * const *values, const size_t *valuelengths, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 key\ub4e4\uc744 \uc9c0\uc815 numr_of_keys: key\ub4e4\uc758 \uc218 indexes: list index array (0-based index) values, values_length: \uac01 list\uc5d0 \uc0bd\uc785\ud560 element\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 list\uac00 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c list\ub97c \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. List element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. STORED: element\ub9cc \uc0bd\uc785 CREATE_STORED: list item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. List element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_list_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; // pipe operation\uc758 \uc804\uccb4 \uc131\uacf5 \uc5ec\ubd80 memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 key\uc5d0 \ub300\ud55c \uc751\ub2f5\ucf54\ub4dc // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 int32_t indexes[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; for (uint32_t i=0; i<maxcount; i++) { indexes[i] = i; values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); } // piped insert\ub97c \uc694\uccad\ud55c\ub2e4. rc= memcached_lop_piped_insert(memc, \"a_list\", strlen(\"a_list\"), MEMCACHED_COLL_MAX_PIPED_CMD_SIZE, indexes, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); // \uac01 key\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<maxcount; i++)</nowiki> { assert(MEMCACHED_STORED == results[i] or MEMCACHED_CREATED_STORED == results[i]); } for (uint32_t i=0; i<maxcount; i++) free((void *)values[i]); free((void *)values); }","title":"3-4. List Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/","text":"Set item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 unique value\uc758 \uc9d1\ud569\uc744 \uc800\uc7a5\ud55c\ub2e4. \uc8fc\ub85c membership checking\uc5d0 \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc81c\uc57d \uc870\uac74 - \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218 : \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) - \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB - Element \uac12\uc758 \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. 4-1. Set Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty set item\uc744 \uc0dd\uc131\ud55c\ub2e4. emcached_return_t memcached_sop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes) key: set item\uc758 key attributes: set item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: set\uc774 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 set\uc774 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc640 \uac19\uc774 \ucd08\uae30\ud654\ud55c\ub2e4. Attributes \uad6c\uc870\uccb4\uc758 \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) Set item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_item_create(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ube44\uc5b4 \uc788\ub294 Set\uc744 \uc0dd\uc131\ud55c\ub2e4. rc= memcached_sop_create(memc, \"set:an_empty_set\", strlen(\"set:an_empty_set\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 key\ub97c \uc774\uc6a9\ud558\uc5ec Set\uc744 \uc0dd\uc131\ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_create(memc, \"set:an_empty_set\", strlen(\"set:an_empty_set\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); } 4-2. Set Element \uc0bd\uc785 Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_insert(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: set item\uc758 key value, value_lenth: \uc0bd\uc785\ud560 element\uc758 value attributes: Set \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty set\uc744 \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: element\ub9cc \uc0bd\uc785 MEMCACHED_CREATED_STORED: Set \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785 not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: Set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc758 \uc790\ub8cc\uad6c\uc870\uac00 set\uc774 \uc544\ub2d8. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_ELEMENT_EXISTS: \ub3d9\uc77c\ud55c value\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uace0 \uc788\uc74c Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \uc785\ub825\ud560 \ub54c Set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uac12\uc744 \uc785\ub825\ud558\ub824 \ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\"), NULL); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_ELEMENT_EXISTS == memcached_get_last_response_code(memc)); // Set\uc758 element \uac1c\uc218\uac00 maxcount\uc5d0 \ub2e4\ub2e4\ub97c \ub54c\uae4c\uc9c0 \uc785\ub825\ud55c\ub2e4. for (uint32_t i=1; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); } // Set\uc758 element \uac1c\uc218\uac00 maxcount\uc5d0 \ub2e4\ub2e4\ub978 \uc0c1\ud0dc\uc5d0\uc11c \uc0c8\ub85c\uc6b4 \uac12\uc744 \uc785\ub825\ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"last_value\", strlen(\"last_value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_OVERFLOWED == memcached_get_last_response_code(memc)); } 4-3. Set Element \uc0ad\uc81c Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_delete(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, bool drop_if_empty) value, value_length: \uc0ad\uc81c\ud560 element\uc758 value drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c Set\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Set\uc774 \uc544\ub2d8. Set\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. void arcus_set_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value1\", strlen(\"value1\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value2\", strlen(\"value2\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // \uc0ad\uc81c\ub97c \uc694\uccad\ud55c \uac12\uc774 Set\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_delete(memc, \"set:a_set\", strlen(\"set:a_set\"), \"no value\", strlen(\"no value\"), true); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); // \uac12 \ud558\ub098\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_sop_delete(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value1\", strlen(\"value1\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // \uac12 \ud558\ub098\ub97c \uc0ad\uc81c\ud55c\ub2e4. \uc0ad\uc81c \ud6c4 empty \uc0c1\ud0dc\uac00 \ub41c Set\uc740 \uc0ad\uc81c\ub41c\ub2e4. rc= memcached_sop_delete(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value2\", strlen(\"value2\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); } 4-4. Set Element \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778 Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\uc758 \uc874\uc7ac \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. memcached_return_t memcached_sop_exist(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length) value, value_length: \uc874\uc7ac \uc5ec\ubd80\ub97c \ud655\uc778\ud560 element\uc758 value Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_EXIST: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc874\uc7ac\ud568. MEMCACHED_NOT_EXIST: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Set\uc774 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 unreadable \uc0c1\ud0dc\uc784. Set element\uc758 \uc874\uc7ac \uc5ec\ubd80\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_exist(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc694\uccad\ud55c \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\ub294 \uc54a\ub294 \uacbd\uc6b0 rc= memcached_sop_exist(memc, \"set:a_set\", strlen(\"set:a_set\"), \"no value\", strlen(\"no value\")); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_NOT_EXIST == memcached_get_last_response_code(memc)); // \uc694\uccad\ud55c \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0 rc= memcached_sop_exist(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\")); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_EXIST == memcached_get_last_response_code(memc)); } 4-5. Set Element \uc870\ud68c Set element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc774 \ud568\uc218\ub294 \uc784\uc758\uc758 count \uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. memcached_return_t memcached_sop_get(memcached_st *ptr, const char *key, size_t key_length, size_t count, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) count: \uc870\ud68c\ud560 element \uac1c\uc218 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Set\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DELETED: Set\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: Set\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. \uc774 \uacb0\uacfc empty \uc0c1\ud0dc\uac00 \ub41c Set\uc744 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Set\uc774 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 unreadable \uc0c1\ud0dc\uc784. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) Set element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; for (uint32_t i=0; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_sop_insert(memc, \"a_set\", strlen(\"a_set\"), buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 rc= memcached_sop_create(memc, \"an_empty_set\", strlen(\"an_empty_set\"), &attributes); assert(MEMCACHED_SUCCESS == rc); result = memcached_coll_result_create(memc, NULL); rc= memcached_sop_get(memc, \"an_empty_set\", strlen(\"an_empty_set\"), maxcount, false, false, result); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. Empty \uc0c1\ud0dc\uac00 \ub41c Set\uc740 \uc0ad\uc81c\ub41c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_sop_get(memc, \"a_set\", strlen(\"a_set\"), maxcount, true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); assert(maxcount == memcached_coll_result_get_count(result)); // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); } 4-6. Set Element \uc77c\uad04 \uc0bd\uc785 Set\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 set\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t num_of_piped_items, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 values, values_length: \ub2e4\uc218 element \uac01\uac01\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 set\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attributes\uc5d0 \ub530\ub77c set\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 set\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, const size_t num_of_keys, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 key\ub4e4\uc744 \uc9c0\uc815 numr_of_keys: key\ub4e4\uc758 \uc218 values, values_length: \uac01 set\uc5d0 \uc0bd\uc785\ud560 element\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 set\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c set\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. Set element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. STORED: element\ub9cc \uc0bd\uc785 CREATE_STORED: set item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. Set element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; // pipe operation\uc758 \uc804\uccb4 \uc131\uacf5 \uc5ec\ubd80 memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 key\uc5d0 \ub300\ud55c \uc751\ub2f5\ucf54\ub4dc // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 int32_t indexes[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; for (uint32_t i=0; i<maxcount; i++) { values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); } // piped insert\ub97c \uc694\uccad\ud55c\ub2e4. rc= memcached_sop_piped_insert(memc, \"a_set\", strlen(\"a_set\"), MEMCACHED_COLL_MAX_PIPED_CMD_SIZE, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); // \uac01 key\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<maxcount; i++) { assert(MEMCACHED_STORED == results[i] or MEMCACHED_CREATED_STORED == results[i]); } for (uint32_t i=0; i<maxcount; i++) free((void*)values[i]); free((void*)values); } 4-7. Set Element \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778 Set\uc5d0\uc11c \uc5ec\ub7ec element\uc758 \uc874\uc7ac \uc5ec\ubd80\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_piped_exist(memcached_st *ptr, const char *key, size_t key_length, const size_t number_of_piped_items, const char * const *values, const size_t *values_length, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \ud655\uc778\ud560 element \uac1c\uc218 values, values_length: \uac01 element\uc758 value\uc640 \uae38\uc774 Set element \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uac01 value\uc5d0 \ub300\ud55c element \uc874\uc7ac \uc5ec\ubd80 \uacb0\uacfc\ub97c \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ud55c\ub2e4. MEMCACHED_EXIST MEMCACHED_NOT_EXIST piped_rc: \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4. MEMCACHED_ALL_EXIST: \ubaa8\ub4e0 element\uac00 \uc874\uc7ac\ud568. MEMCACHED_SOME_EXIST: \uc77c\ubd80 element\uac00 \uc874\uc7ac\ud568. MEMCACHED_ALL_NOT_EXIST: \ubaa8\ub4e0 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. Set element \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778\uc758 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_piped_exist(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \ube44\uc5b4 \uc788\ub294 Set\uc744 \ud558\ub098 \uc0dd\uc131\ud55c\ub2e4. memcached_sop_create(memc, \"set:a_set\", strlen(\"set:a_set\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. for (uint32_t i=0; i<maxcount; i++) { values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); // \uc77c\ubd80 \ub370\uc774\ud130\ub97c \uc758\ub3c4\uc801\uc73c\ub85c \uc785\ub825\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. if ((i % 10) == 0) continue; rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), values[i], valuelengths[i], &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); } // Piped exist \uba85\ub839\uc744 \uc218\ud589\ud55c\ub2e4. memcached_return_t piped_rc; // \uc804\uccb4 \ub370\uc774\ud130 \uc874\uc7ac \uc5ec\ubd80 memcached_return_t responses[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc874\uc7ac \uc5ec\ubd80 rc= memcached_sop_piped_exist(memc, \"set:a_set\", strlen(\"set:a_set\"), maxcount, values, valuelengths, responses, &piped_rc); // \uc77c\ubd80 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud55c\ub2e4\ub294 \uacb0\uacfc\uac00 \ub098\uc654\ub2e4. assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_SOME_EXIST == piped_rc); // \uc2e4\uc81c \uacb0\uacfc\uac00 \ub9de\ub294\uc9c0 \uac80\uc99d\ud574\ubcf4\uc790. for (uint32_t i=0; i<maxcount; i++) { if ((i % 10) == 0) assert(MEMCACHED_NOT_EXIST == responses[i]); else assert(MEMCACHED_EXIST == responses[i]); } for (uint32_t i=0; i<maxcount; i++) free(values[i]); free(values); }","title":"4. set API"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/#4-1-set-item","text":"\uc0c8\ub85c\uc6b4 empty set item\uc744 \uc0dd\uc131\ud55c\ub2e4. emcached_return_t memcached_sop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes) key: set item\uc758 key attributes: set item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: set\uc774 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 set\uc774 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc640 \uac19\uc774 \ucd08\uae30\ud654\ud55c\ub2e4. Attributes \uad6c\uc870\uccb4\uc758 \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) Set item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_item_create(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ube44\uc5b4 \uc788\ub294 Set\uc744 \uc0dd\uc131\ud55c\ub2e4. rc= memcached_sop_create(memc, \"set:an_empty_set\", strlen(\"set:an_empty_set\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 key\ub97c \uc774\uc6a9\ud558\uc5ec Set\uc744 \uc0dd\uc131\ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_create(memc, \"set:an_empty_set\", strlen(\"set:an_empty_set\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); }","title":"4-1. Set Item \uc0dd\uc131"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/#4-2-set-element","text":"Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_insert(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: set item\uc758 key value, value_lenth: \uc0bd\uc785\ud560 element\uc758 value attributes: Set \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty set\uc744 \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: element\ub9cc \uc0bd\uc785 MEMCACHED_CREATED_STORED: Set \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785 not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: Set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc758 \uc790\ub8cc\uad6c\uc870\uac00 set\uc774 \uc544\ub2d8. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_ELEMENT_EXISTS: \ub3d9\uc77c\ud55c value\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uace0 \uc788\uc74c Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \uc785\ub825\ud560 \ub54c Set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uac12\uc744 \uc785\ub825\ud558\ub824 \ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\"), NULL); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_ELEMENT_EXISTS == memcached_get_last_response_code(memc)); // Set\uc758 element \uac1c\uc218\uac00 maxcount\uc5d0 \ub2e4\ub2e4\ub97c \ub54c\uae4c\uc9c0 \uc785\ub825\ud55c\ub2e4. for (uint32_t i=1; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); } // Set\uc758 element \uac1c\uc218\uac00 maxcount\uc5d0 \ub2e4\ub2e4\ub978 \uc0c1\ud0dc\uc5d0\uc11c \uc0c8\ub85c\uc6b4 \uac12\uc744 \uc785\ub825\ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"last_value\", strlen(\"last_value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_OVERFLOWED == memcached_get_last_response_code(memc)); }","title":"4-2. Set Element \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/#4-3-set-element","text":"Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_delete(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length, bool drop_if_empty) value, value_length: \uc0ad\uc81c\ud560 element\uc758 value drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c Set\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Set\uc774 \uc544\ub2d8. Set\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. void arcus_set_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value1\", strlen(\"value1\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value2\", strlen(\"value2\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // \uc0ad\uc81c\ub97c \uc694\uccad\ud55c \uac12\uc774 Set\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_sop_delete(memc, \"set:a_set\", strlen(\"set:a_set\"), \"no value\", strlen(\"no value\"), true); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); // \uac12 \ud558\ub098\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_sop_delete(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value1\", strlen(\"value1\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // \uac12 \ud558\ub098\ub97c \uc0ad\uc81c\ud55c\ub2e4. \uc0ad\uc81c \ud6c4 empty \uc0c1\ud0dc\uac00 \ub41c Set\uc740 \uc0ad\uc81c\ub41c\ub2e4. rc= memcached_sop_delete(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value2\", strlen(\"value2\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); }","title":"4-3. Set Element \uc0ad\uc81c"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/#4-4-set-element","text":"Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\uc758 \uc874\uc7ac \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. memcached_return_t memcached_sop_exist(memcached_st *ptr, const char *key, size_t key_length, const char *value, size_t value_length) value, value_length: \uc874\uc7ac \uc5ec\ubd80\ub97c \ud655\uc778\ud560 element\uc758 value Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_EXIST: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc874\uc7ac\ud568. MEMCACHED_NOT_EXIST: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Set\uc774 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 unreadable \uc0c1\ud0dc\uc784. Set element\uc758 \uc874\uc7ac \uc5ec\ubd80\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_exist(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc694\uccad\ud55c \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\ub294 \uc54a\ub294 \uacbd\uc6b0 rc= memcached_sop_exist(memc, \"set:a_set\", strlen(\"set:a_set\"), \"no value\", strlen(\"no value\")); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_NOT_EXIST == memcached_get_last_response_code(memc)); // \uc694\uccad\ud55c \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0 rc= memcached_sop_exist(memc, \"set:a_set\", strlen(\"set:a_set\"), \"value\", strlen(\"value\")); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_EXIST == memcached_get_last_response_code(memc)); }","title":"4-4. Set Element \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/#4-5-set-element","text":"Set element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc774 \ud568\uc218\ub294 \uc784\uc758\uc758 count \uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. memcached_return_t memcached_sop_get(memcached_st *ptr, const char *key, size_t key_length, size_t count, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) count: \uc870\ud68c\ud560 element \uac1c\uc218 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Set\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DELETED: Set\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: Set\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. \uc774 \uacb0\uacfc empty \uc0c1\ud0dc\uac00 \ub41c Set\uc744 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c0\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Set\uc774 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Set\uc774 unreadable \uc0c1\ud0dc\uc784. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) Set element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; for (uint32_t i=0; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_sop_insert(memc, \"a_set\", strlen(\"a_set\"), buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 rc= memcached_sop_create(memc, \"an_empty_set\", strlen(\"an_empty_set\"), &attributes); assert(MEMCACHED_SUCCESS == rc); result = memcached_coll_result_create(memc, NULL); rc= memcached_sop_get(memc, \"an_empty_set\", strlen(\"an_empty_set\"), maxcount, false, false, result); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. Empty \uc0c1\ud0dc\uac00 \ub41c Set\uc740 \uc0ad\uc81c\ub41c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_sop_get(memc, \"a_set\", strlen(\"a_set\"), maxcount, true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); assert(maxcount == memcached_coll_result_get_count(result)); // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); }","title":"4-5. Set Element \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/#4-6-set-element","text":"Set\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 set\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t num_of_piped_items, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 values, values_length: \ub2e4\uc218 element \uac01\uac01\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 set\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attributes\uc5d0 \ub530\ub77c set\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 set\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, const size_t num_of_keys, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 key\ub4e4\uc744 \uc9c0\uc815 numr_of_keys: key\ub4e4\uc758 \uc218 values, values_length: \uac01 set\uc5d0 \uc0bd\uc785\ud560 element\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 set\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c set\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. Set element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. STORED: element\ub9cc \uc0bd\uc785 CREATE_STORED: set item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. Set element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; // pipe operation\uc758 \uc804\uccb4 \uc131\uacf5 \uc5ec\ubd80 memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 key\uc5d0 \ub300\ud55c \uc751\ub2f5\ucf54\ub4dc // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 int32_t indexes[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; for (uint32_t i=0; i<maxcount; i++) { values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); } // piped insert\ub97c \uc694\uccad\ud55c\ub2e4. rc= memcached_sop_piped_insert(memc, \"a_set\", strlen(\"a_set\"), MEMCACHED_COLL_MAX_PIPED_CMD_SIZE, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); // \uac01 key\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<maxcount; i++) { assert(MEMCACHED_STORED == results[i] or MEMCACHED_CREATED_STORED == results[i]); } for (uint32_t i=0; i<maxcount; i++) free((void*)values[i]); free((void*)values); }","title":"4-6. Set Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/4.-set-API/#4-7-set-element","text":"Set\uc5d0\uc11c \uc5ec\ub7ec element\uc758 \uc874\uc7ac \uc5ec\ubd80\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_sop_piped_exist(memcached_st *ptr, const char *key, size_t key_length, const size_t number_of_piped_items, const char * const *values, const size_t *values_length, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \ud655\uc778\ud560 element \uac1c\uc218 values, values_length: \uac01 element\uc758 value\uc640 \uae38\uc774 Set element \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uac01 value\uc5d0 \ub300\ud55c element \uc874\uc7ac \uc5ec\ubd80 \uacb0\uacfc\ub97c \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ud55c\ub2e4. MEMCACHED_EXIST MEMCACHED_NOT_EXIST piped_rc: \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4. MEMCACHED_ALL_EXIST: \ubaa8\ub4e0 element\uac00 \uc874\uc7ac\ud568. MEMCACHED_SOME_EXIST: \uc77c\ubd80 element\uac00 \uc874\uc7ac\ud568. MEMCACHED_ALL_NOT_EXIST: \ubaa8\ub4e0 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. Set element \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778\uc758 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_set_element_piped_exist(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \ube44\uc5b4 \uc788\ub294 Set\uc744 \ud558\ub098 \uc0dd\uc131\ud55c\ub2e4. memcached_sop_create(memc, \"set:a_set\", strlen(\"set:a_set\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. for (uint32_t i=0; i<maxcount; i++) { values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); // \uc77c\ubd80 \ub370\uc774\ud130\ub97c \uc758\ub3c4\uc801\uc73c\ub85c \uc785\ub825\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. if ((i % 10) == 0) continue; rc= memcached_sop_insert(memc, \"set:a_set\", strlen(\"set:a_set\"), values[i], valuelengths[i], &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); } // Piped exist \uba85\ub839\uc744 \uc218\ud589\ud55c\ub2e4. memcached_return_t piped_rc; // \uc804\uccb4 \ub370\uc774\ud130 \uc874\uc7ac \uc5ec\ubd80 memcached_return_t responses[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc874\uc7ac \uc5ec\ubd80 rc= memcached_sop_piped_exist(memc, \"set:a_set\", strlen(\"set:a_set\"), maxcount, values, valuelengths, responses, &piped_rc); // \uc77c\ubd80 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud55c\ub2e4\ub294 \uacb0\uacfc\uac00 \ub098\uc654\ub2e4. assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_SOME_EXIST == piped_rc); // \uc2e4\uc81c \uacb0\uacfc\uac00 \ub9de\ub294\uc9c0 \uac80\uc99d\ud574\ubcf4\uc790. for (uint32_t i=0; i<maxcount; i++) { if ((i % 10) == 0) assert(MEMCACHED_NOT_EXIST == responses[i]); else assert(MEMCACHED_EXIST == responses[i]); } for (uint32_t i=0; i<maxcount; i++) free(values[i]); free(values); }","title":"4-7. Set Element \uc77c\uad04 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778"},{"location":"arcus-c-client/1.10-(latest)/5.-map-API/","text":"Map item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 hash \uad6c\uc870 \uae30\ubc18\uc73c\ub85c mkey & value \uc30d\uc744 data \uc9d1\ud569\uc73c\ub85c \uac00\uc9c4\ub2e4. \uc81c\uc57d \uc870\uac74 - \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218: \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) - \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB - mkey \ucd5c\ub300 \uae38\uc774\ub294 250 \ubc14\uc774\ud2b8 \uc774\uace0, \ud558\ub098\uc758 map\uc5d0 \uc911\ubcf5\ub41c mkey\ub294 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. 5-1. Map Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty map item\uc744 \uc0dd\uc131\ud55c\ub2e4. emcached_return_t memcached_mop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes); key: map item\uc758 key attributes: map item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: Map\uc774 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 Map\uc774 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc640 \uac19\uc774 \ucd08\uae30\ud654\ud55c\ub2e4. Attributes \uad6c\uc870\uccb4\uc758 \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) memcached_coll_create_attrs_set_flags : attributes\uc5d0 flags \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_expiretime : attributes\uc5d0 expire time\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_maxcount : attributes\uc5d0 maxcount \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_overflowaction : Map\uc758 Element \uac1c\uc218\uac00 maxcount\ub97c \ub118\uc5b4 \uc130\uc744 \ub54c(overflow)\uc758 \ub3d9\uc791\uc744 \uc124\uc815\ud55c\ub2e4. OVERFLOWACTION_ERROR: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uc624\ub958(MEMCACHED_OVERFLOWED)\ub97c \ubc18\ud658\ud558\ub3c4\ub85d \ud55c\ub2e4. OVERFLOWACTION_HEAD_TRIM: Map\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. OVERFLOWACTION_TAIL_TRIM: Map\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. memcached_coll_create_set_unreadable : \uc0dd\uc131 \uc2dc unreadable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4 \uac83\uc778\uc9c0 \uc124\uc815\ud55c\ub2e4. Unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c Map\uc740 readable \uc0c1\ud0dc\uac00 \ub418\uae30 \uc804\uae4c\uc9c0 \uc870\ud68c\ud560 \uc218 \uc5c6\ub2e4. \uc774\ub807\uac8c unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c Map\uc744 readable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294 memcached_set_attrs\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Map item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_item_create(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // \ube44\uc5b4\uc788\ub294 \ub9f5\uc744 \uc0dd\uc131\ud55c\ub2e4. rc= memcached_mop_create(memc, \"map:an_empty_map\", strlen(\"map:an_empty_map\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \ub9f5\uc774 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74 \uc2e4\ud328\ud55c\ub2e4. rc= memcached_mop_create(memc, \"map:an_empty_map\", strlen(\"map:an_empty_map\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); } 5-2. Map Element \uc0bd\uc785 Map\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_insert(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: map item\uc758 key mkey, mkey_length: \uc0bd\uc785\ud560 element\uc758 mkey value, value_lenth: \uc0bd\uc785\ud560 element\uc758 value attributes: Map \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty map\uc744 \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 Map\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: Map\uc774 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: Map\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error) MEMCACHED_ELEMENT_EXISTS: \ub3d9\uc77c\ud55c mkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uace0 \uc788\uc74c Map element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_insert(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // 1. CREATED_STORED rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey\", strlen(\"mkey\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // 2. STORED rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey1\", strlne(\"mkey1\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // 3. ELEMENT_EXIST rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey1\", strlen(\"mkey1\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_ELEMENT_EXIST == rc); } 5-3. Map Element \ubcc0\uacbd Map\uc5d0 \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uc758 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. memcached_return_t memcached_mop_update(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, const char *value, size_t value_length) key, key_length: map item\uc758 key mkey, mkey_length: \ubcc0\uacbd\ud560 element\uc758 mkey value, value_lenth: element\uc758 new value Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_UPDATED: \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\ub97c \uc5c5\ub370\uc774\ud2b8\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: Map\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. Map element\ub97c \ubcc0\uacbd\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_update(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // 1. CREATED_STORED rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey\", strlen(\"mkey\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // 2. UPDATED rc= memcached_mop_update(memc, \"a_map\", strlen(\"a_map\"), \"mkey\", strlne(\"mkey\"), \"new_value\", strlen(\"new_value\")); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_UPDATED == memcached_get_last_response_code(memc)); } 5-4. Map Element \uc0ad\uc81c Map element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, map\uc5d0\uc11c \ud558\ub098\uc758 mkey\ub85c \ud558\ub098\uc758 element\ub9cc \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_delete(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, bool drop_if_empty) \ub458\uc9f8, map\uc758 element \uc804\uccb4\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_delete_all(memcached_st *ptr, const char *key, size_t key_length, bool drop_if_empty) key, key_length: map item\uc758 key mkey, mkey_length: \uc0ad\uc81c\ud560 element\uc758 mkey drop_if_empty: element \uc0ad\uc81c\ub85c empty map\uc774 \ub420 \uacbd\uc6b0, \uadf8 map\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 mkey\uc5d0 \ud574\ub2f9\ud558\ub294 element \ud639\uc740 \uc804\uccb4 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 mkey\uc5d0 \ud574\ub2f9\ud558\ub294 element \ud639\uc740 \uc804\uccb4 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c Map\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Map\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 mkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. Map element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc0bd\uc785\ud55c\ub2e4. rc= memcached_mop_insert(memc, \"map:a_map\", strlen(\"map:a_map\"), \"mkey0\", strlen(\"mkey0\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); rc= memcached_mop_insert(memc, \"map:a_map\", strlen(\"map:a_map\"), \"mkey1\", strlen(\"mkey1\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); // mkey0\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_mop_delete(memc, \"map:a_map\", strlen(\"map:a_map\"), \"mkey0\", strlen(\"mkey0\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // \uc804\uccb4 map element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c \ub9f5\uc744 \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_mop_delete_all(memc, \"map:a_map\", strlen(\"map:a_map\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); } 5-5. Map Element \uc870\ud68c Map element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc138 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 map mkey\ub85c \ud558\ub098\uc758 element\ub9cc \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_get(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \ub458\uc9f8, map\uc758 \uc804\uccb4 element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_get_all(memcached_st *ptr, const char *key, size_t key_length, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \uc14b\uc9f8, mkey list\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_get_by_list(memcached_st *ptr, const char *key, size_t key_length, const char * const *mkeys, const size_t *mkeys_length, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) key, key_length: map item\uc758 key mkey, mkey_length: \uc870\ud68c\ud560 mkey mkeys, mkeys_length: \uc870\ud68c\ud560 mkey list with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Map\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DELETED: Map\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: Map\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Map\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 mkey \ub610\ub294 mkeys(mkey list)\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Map\uc774 unreadable \uc0c1\ud0dc\uc784. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_mkey(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_mkey_length(memcached_coll_result_st *result, size_t index) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) Map element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st *result; for (uint32_t i=0; i<maxcount; i++) { char mkey[15]; char buffer[15]; size_t mkey_len = snprintf(mkey, 15, \"mkey%d\", i); size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), mkey, mkey_len, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 const char *not_mkeys[]= { \"mkey1001\", \"mkey1010\", \"mkey1100\" }; size_t not_mkeys_length[]= { 8, 8, 8 }; result = memcached_coll_result_create(memc, NULL); rc= memcached_mop_get_by_list(memc, \"a_map\", strlen(\"a_map\"), not_mkeys, not_mkeys_length, 3, false, false, result); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. const char *mkeys[]= { \"mkey0\", \"mkey1\", \"mkey2\", \"mkey3\", \"mkey4\", \"mkey5\"}; size_t mkeys_length[]= { 5, 5, 5, 5, 5, 5 }; result = memcached_coll_result_create(memc, NULL); rc= memcached_mop_get_by_list(memc, \"a_map\", strlen(\"a_map\"), mkeys, mkeys_length, 6, true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // \uc870\ud68c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { char mkey[15]; char buffer[15]; snprintf(mkey, 15, \"mkey%u\", (int)i); snprintf(buffer, 15, \"value%u\", (int)i); assert(0 == strcmp(mkey, memcached_coll_result_get_mkey(result, i))); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } // \uc804\uccb4 map element\ub97c \uc870\ud68c\ud558\uace0, \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc0ad\uc81c\ud55c\ub2e4. empty \uc0c1\ud0dc\uac00 \ub41c \ub9f5\uc744 \uc0ad\uc81c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_mop_get_all(memc, \"a_map\", strlen(\"a_map\"), true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); } 5-6. Map Element \uc77c\uad04 \uc0bd\uc785 Map\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 map\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t numr_of_piped_items, const char * const *mkeys, const size_t *mkeys_length, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 mkeys, mkeys_length: \ub2e4\uc218 element \uac01\uac01\uc758 mkey\uc640 \uadf8 \uae38\uc774 values, values_length: \ub2e4\uc218 element \uac01\uac01\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 map\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c map\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 map\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, const size_t numr_of_keys, const char *mkey, size_t mkey_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 key\ub4e4\uc744 \uc9c0\uc815 numr_of_keys: key\ub4e4\uc758 \uc218 mkey, mkey_length: element\uc758 mkey value, value_length: element\uc758 value attributes: \ud574\ub2f9 map\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c map\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. Map element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. STORED: element\ub9cc \uc0bd\uc785 CREATE_STORED: map item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. Map element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; // pipe operation\uc758 \uc804\uccb4 \uc131\uacf5 \uc5ec\ubd80 memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 key\uc5d0 \ub300\ud55c \uc751\ub2f5 \ucf54\ub4dc // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 char **mkeys = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t mkeylengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; for (uint32_t i=0; i<maxcount; i++) { mkeys[i]= (char *)malloc(sizeof(char) * 15); mkeylengths[i]= snprintf(values[i], 15, \"mkey%d\", i); values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); } // piped insert\ub97c \uc694\uccad\ud55c\ub2e4. rc= memcached_mop_piped_insert(memc, \"a_map\", strlen(\"a_map\"), MEMCACHED_COLL_MAX_PIPED_CMD_SIZE, mkeys, mkeylengths, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); // \uac01 key\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<maxcount; i++)</nowiki> { assert(MEMCACHED_STORED == results[i] or MEMCACHED_CREATED_STORED == results[i]); } for (uint32_t i=0; i<maxcount; i++) { free((void *)mkeys[i]); free((void *)values[i]); } free((void *)mkeys); free((void *)values); }","title":"5. map API"},{"location":"arcus-c-client/1.10-(latest)/5.-map-API/#5-1-map-item","text":"\uc0c8\ub85c\uc6b4 empty map item\uc744 \uc0dd\uc131\ud55c\ub2e4. emcached_return_t memcached_mop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes); key: map item\uc758 key attributes: map item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: Map\uc774 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 Map\uc774 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc640 \uac19\uc774 \ucd08\uae30\ud654\ud55c\ub2e4. Attributes \uad6c\uc870\uccb4\uc758 \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) memcached_coll_create_attrs_set_flags : attributes\uc5d0 flags \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_expiretime : attributes\uc5d0 expire time\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_maxcount : attributes\uc5d0 maxcount \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_create_attrs_set_overflowaction : Map\uc758 Element \uac1c\uc218\uac00 maxcount\ub97c \ub118\uc5b4 \uc130\uc744 \ub54c(overflow)\uc758 \ub3d9\uc791\uc744 \uc124\uc815\ud55c\ub2e4. OVERFLOWACTION_ERROR: overflow\uac00 \ubc1c\uc0dd\ud558\uba74 \uc624\ub958(MEMCACHED_OVERFLOWED)\ub97c \ubc18\ud658\ud558\ub3c4\ub85d \ud55c\ub2e4. OVERFLOWACTION_HEAD_TRIM: Map\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. OVERFLOWACTION_TAIL_TRIM: Map\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. memcached_coll_create_set_unreadable : \uc0dd\uc131 \uc2dc unreadable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4 \uac83\uc778\uc9c0 \uc124\uc815\ud55c\ub2e4. Unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c Map\uc740 readable \uc0c1\ud0dc\uac00 \ub418\uae30 \uc804\uae4c\uc9c0 \uc870\ud68c\ud560 \uc218 \uc5c6\ub2e4. \uc774\ub807\uac8c unreadable \uc0c1\ud0dc\ub85c \uc0dd\uc131\ub41c Map\uc744 readable \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294 memcached_set_attrs\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Map item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_item_create(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // \ube44\uc5b4\uc788\ub294 \ub9f5\uc744 \uc0dd\uc131\ud55c\ub2e4. rc= memcached_mop_create(memc, \"map:an_empty_map\", strlen(\"map:an_empty_map\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \ub9f5\uc774 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74 \uc2e4\ud328\ud55c\ub2e4. rc= memcached_mop_create(memc, \"map:an_empty_map\", strlen(\"map:an_empty_map\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); }","title":"5-1. Map Item \uc0dd\uc131"},{"location":"arcus-c-client/1.10-(latest)/5.-map-API/#5-2-map-element","text":"Map\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_insert(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: map item\uc758 key mkey, mkey_length: \uc0bd\uc785\ud560 element\uc758 mkey value, value_lenth: \uc0bd\uc785\ud560 element\uc758 value attributes: Map \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty map\uc744 \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 Map\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: Map\uc774 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: Map\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error) MEMCACHED_ELEMENT_EXISTS: \ub3d9\uc77c\ud55c mkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uace0 \uc788\uc74c Map element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_insert(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // 1. CREATED_STORED rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey\", strlen(\"mkey\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // 2. STORED rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey1\", strlne(\"mkey1\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // 3. ELEMENT_EXIST rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey1\", strlen(\"mkey1\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_ELEMENT_EXIST == rc); }","title":"5-2. Map Element \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/5.-map-API/#5-3-map-element","text":"Map\uc5d0 \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uc758 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. memcached_return_t memcached_mop_update(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, const char *value, size_t value_length) key, key_length: map item\uc758 key mkey, mkey_length: \ubcc0\uacbd\ud560 element\uc758 mkey value, value_lenth: element\uc758 new value Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_UPDATED: \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\ub97c \uc5c5\ub370\uc774\ud2b8\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: Map\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. Map element\ub97c \ubcc0\uacbd\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_update(memcached_st *memc) { memcached_return_t rc; uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // 1. CREATED_STORED rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), \"mkey\", strlen(\"mkey\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // 2. UPDATED rc= memcached_mop_update(memc, \"a_map\", strlen(\"a_map\"), \"mkey\", strlne(\"mkey\"), \"new_value\", strlen(\"new_value\")); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_UPDATED == memcached_get_last_response_code(memc)); }","title":"5-3. Map Element \ubcc0\uacbd"},{"location":"arcus-c-client/1.10-(latest)/5.-map-API/#5-4-map-element","text":"Map element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, map\uc5d0\uc11c \ud558\ub098\uc758 mkey\ub85c \ud558\ub098\uc758 element\ub9cc \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_delete(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, bool drop_if_empty) \ub458\uc9f8, map\uc758 element \uc804\uccb4\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_delete_all(memcached_st *ptr, const char *key, size_t key_length, bool drop_if_empty) key, key_length: map item\uc758 key mkey, mkey_length: \uc0ad\uc81c\ud560 element\uc758 mkey drop_if_empty: element \uc0ad\uc81c\ub85c empty map\uc774 \ub420 \uacbd\uc6b0, \uadf8 map\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 mkey\uc5d0 \ud574\ub2f9\ud558\ub294 element \ud639\uc740 \uc804\uccb4 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 mkey\uc5d0 \ud574\ub2f9\ud558\ub294 element \ud639\uc740 \uc804\uccb4 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c Map\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Map\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 mkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. Map element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc0bd\uc785\ud55c\ub2e4. rc= memcached_mop_insert(memc, \"map:a_map\", strlen(\"map:a_map\"), \"mkey0\", strlen(\"mkey0\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); rc= memcached_mop_insert(memc, \"map:a_map\", strlen(\"map:a_map\"), \"mkey1\", strlen(\"mkey1\"), \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); // mkey0\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_mop_delete(memc, \"map:a_map\", strlen(\"map:a_map\"), \"mkey0\", strlen(\"mkey0\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // \uc804\uccb4 map element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c \ub9f5\uc744 \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_mop_delete_all(memc, \"map:a_map\", strlen(\"map:a_map\"), true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); }","title":"5-4. Map Element \uc0ad\uc81c"},{"location":"arcus-c-client/1.10-(latest)/5.-map-API/#5-5-map-element","text":"Map element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc138 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 map mkey\ub85c \ud558\ub098\uc758 element\ub9cc \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_get(memcached_st *ptr, const char *key, size_t key_length, const char *mkey, size_t mkey_length, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \ub458\uc9f8, map\uc758 \uc804\uccb4 element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_get_all(memcached_st *ptr, const char *key, size_t key_length, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \uc14b\uc9f8, mkey list\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_get_by_list(memcached_st *ptr, const char *key, size_t key_length, const char * const *mkeys, const size_t *mkeys_length, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) key, key_length: map item\uc758 key mkey, mkey_length: \uc870\ud68c\ud560 mkey mkeys, mkeys_length: \uc870\ud68c\ud560 mkey list with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Map\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DELETED: Map\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: Map\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Map\uc774 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 mkey \ub610\ub294 mkeys(mkey list)\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 Map\uc774 \uc544\ub2d8. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 Map\uc774 unreadable \uc0c1\ud0dc\uc784. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_mkey(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_mkey_length(memcached_coll_result_st *result, size_t index) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) Map element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st *result; for (uint32_t i=0; i<maxcount; i++) { char mkey[15]; char buffer[15]; size_t mkey_len = snprintf(mkey, 15, \"mkey%d\", i); size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_mop_insert(memc, \"a_map\", strlen(\"a_map\"), mkey, mkey_len, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 const char *not_mkeys[]= { \"mkey1001\", \"mkey1010\", \"mkey1100\" }; size_t not_mkeys_length[]= { 8, 8, 8 }; result = memcached_coll_result_create(memc, NULL); rc= memcached_mop_get_by_list(memc, \"a_map\", strlen(\"a_map\"), not_mkeys, not_mkeys_length, 3, false, false, result); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. const char *mkeys[]= { \"mkey0\", \"mkey1\", \"mkey2\", \"mkey3\", \"mkey4\", \"mkey5\"}; size_t mkeys_length[]= { 5, 5, 5, 5, 5, 5 }; result = memcached_coll_result_create(memc, NULL); rc= memcached_mop_get_by_list(memc, \"a_map\", strlen(\"a_map\"), mkeys, mkeys_length, 6, true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED == memcached_get_last_response_code(memc)); // \uc870\ud68c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { char mkey[15]; char buffer[15]; snprintf(mkey, 15, \"mkey%u\", (int)i); snprintf(buffer, 15, \"value%u\", (int)i); assert(0 == strcmp(mkey, memcached_coll_result_get_mkey(result, i))); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } // \uc804\uccb4 map element\ub97c \uc870\ud68c\ud558\uace0, \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc0ad\uc81c\ud55c\ub2e4. empty \uc0c1\ud0dc\uac00 \ub41c \ub9f5\uc744 \uc0ad\uc81c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_mop_get_all(memc, \"a_map\", strlen(\"a_map\"), true, true, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); }","title":"5-5. Map Element \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/5.-map-API/#5-6-map-element","text":"Map\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 map\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t numr_of_piped_items, const char * const *mkeys, const size_t *mkeys_length, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: \ud558\ub098\uc758 key\ub97c \uc9c0\uc815 numr_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 mkeys, mkeys_length: \ub2e4\uc218 element \uac01\uac01\uc758 mkey\uc640 \uadf8 \uae38\uc774 values, values_length: \ub2e4\uc218 element \uac01\uac01\uc758 value\uc640 \uadf8 \uae38\uc774 attributes: \ud574\ub2f9 map\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c map\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 map\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_mop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, const size_t numr_of_keys, const char *mkey, size_t mkey_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 key\ub4e4\uc744 \uc9c0\uc815 numr_of_keys: key\ub4e4\uc758 \uc218 mkey, mkey_length: element\uc758 mkey value, value_length: element\uc758 value attributes: \ud574\ub2f9 map\uc774 \uc5c6\uc744 \uc2dc\uc5d0, attrbiutes\uc5d0 \ub530\ub77c map\uc744 \uc0dd\uc131 \ud6c4\uc5d0 \uc0bd\uc785\ud55c\ub2e4. Map element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. STORED: element\ub9cc \uc0bd\uc785 CREATE_STORED: map item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. Map element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_map_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= MEMCACHED_COLL_MAX_PIPED_CMD_SIZE; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; // pipe operation\uc758 \uc804\uccb4 \uc131\uacf5 \uc5ec\ubd80 memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; // \uac01 key\uc5d0 \ub300\ud55c \uc751\ub2f5 \ucf54\ub4dc // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 char **mkeys = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t mkeylengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; char **values = (char **)malloc(sizeof(char *) * MEMCACHED_COLL_MAX_PIPED_CMD_SIZE); size_t valuelengths[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; for (uint32_t i=0; i<maxcount; i++) { mkeys[i]= (char *)malloc(sizeof(char) * 15); mkeylengths[i]= snprintf(values[i], 15, \"mkey%d\", i); values[i]= (char *)malloc(sizeof(char) * 15); valuelengths[i]= snprintf(values[i], 15, \"value%d\", i); } // piped insert\ub97c \uc694\uccad\ud55c\ub2e4. rc= memcached_mop_piped_insert(memc, \"a_map\", strlen(\"a_map\"), MEMCACHED_COLL_MAX_PIPED_CMD_SIZE, mkeys, mkeylengths, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); // \uac01 key\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud55c\ub2e4. for (size_t i=0; i<maxcount; i++)</nowiki> { assert(MEMCACHED_STORED == results[i] or MEMCACHED_CREATED_STORED == results[i]); } for (uint32_t i=0; i<maxcount; i++) { free((void *)mkeys[i]); free((void *)values[i]); } free((void *)mkeys); free((void *)values); }","title":"5-6. Map Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/","text":"B+tree item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 b+tree \uad6c\uc870 \uae30\ubc18\uc73c\ub85c b+tree key(bkey)\ub85c \uc815\ub82c\ub41c data\uc758 \uc9d1\ud569\uc744 \uac00\uc9c4\ub2e4. \uc81c\uc57d \uc870\uac74 \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218 : \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB \ud558\ub098\uc758 b+tree \ub0b4\uc5d0\uc11c \ubaa8\ub4e0 element\ub294 \ub3d9\uc77c\ud55c bkey \uc720\ud615\uc744 \uac00\uc838\uc57c \ud55c\ub2e4. \uc989, 8\ubc14\uc774\ud2b8 unsigned integer bkey \uc720\ud615\uacfc byte array bkey \uc720\ud615\uc774 \ud63c\uc7ac\ud560 \uc218 \uc5c6\ub2e4. B+tree item \uad6c\uc870\uc640 \uae30\ubcf8 \ud2b9\uc9d5\uc740 Arcus Server Ascii Protocol \ubb38\uc11c\uc758 \ub0b4\uc6a9 \uc744 \uba3c\uc800 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. 6-1. BKey(B+Tree Key)\uc640 EFlag(Element Flag) B+tree item\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud55c bkey \ub370\uc774\ud130 \ud0c0\uc785\uc740 \uc544\ub798 \ub450 \uac00\uc9c0\uc774\ub2e4. 8\ubc14\uc774\ud2b8 unsigned integer \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array eflag\ub294 \ud604\uc7ac b+tree element\uc5d0\ub9cc \uc874\uc7ac\ud558\ub294 \ud544\ub4dc\uc774\ub2e4. eflag \ub370\uc774\ud130 \ud0c0\uc785\uc740 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\ub9cc \uac00\ub2a5\ud558\ub2e4. 6-2. Element Flag Filter \uad6c\uc870\uccb4 B+tree\uc758 element flag\uc5d0 \ub300\ud55c filtering\uc744 \uc9c0\uc815\ud558\uae30 \uc704\ud574\uc120, eflag_filter \uad6c\uc870\uccb4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uba3c\uc800, eflag_filter \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud558\ub294 API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc774\ub97c \ud1b5\ud574, eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uacfc \ud2b9\uc815 \uac12\uacfc\uc758 compare \uc5f0\uc0b0\uc744 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_eflag_filter_init(memcached_ coll _eflag_filter_st *ptr, const size_t fwhere, const unsigned char *fvalue, const size_t fvalue_length, memcached_coll_comp_t comp_op) fwhere: eflag\uc5d0\uc11c \ube44\uad50 \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub370\uc774\ud130\uc758 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. fvalue: \ube44\uad50 \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub370\uc774\ud130 \uac12\uc744 \uc9c0\uc815\ud55c\ub2e4. comp_op: \ube44\uad50 \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. MEMCACHED_COLL_COMP_EQ MEMCACHED_COLL_COMP_NE MEMCACHED_COLL_COMP_LT MEMCACHED_COLL_COMP_LE MEMCACHED_COLL_COMP_GT MEMCACHED_COLL_COMP_GE eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc5d0 \ub300\ud574 \uc5b4\ub5a4 operand\ub85c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud568\uc73c\ub85c\uc368 eflag\uc758 \ud2b9\uc815 bits\ub4e4\ub9cc\uc744 \uace8\ub77c\ub0b4\uc5b4 compare\ud560 \uc218 \uc788\ub2e4. \uc774\uc640 \uac19\uc774 eflag_filter \uc5d0 bitwise \uc5f0\uc0b0\uc744 \ucd94\uac00\ud560 \uacbd\uc6b0\uc5d0\ub294 \uc544\ub798\uc758 API\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_eflag_filter_set_bitwise(memcached_coll_eflag_filter_st *ptr, memcached_coll_bitwise_t bitwise_op, const unsigned char *foperand, const size_t foperand_length) bitwise_op: bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. MEMCACHED_COLL_BITWISE_AND MEMCACHED_COLL_BITWISE_OR MEMCACHED_COLL_BITWISE_XOR foperand: eflag\uc5d0\uc11c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 operand\ub97c \uc9c0\uc815\ud55c\ub2e4. 6-3. Element Flag Update \uad6c\uc870\uccb4 B+tree\uc758 element flag\ub97c \ubcc0\uacbd\ud558\uae30 \uc704\ud574\uc120 eflag_update \uad6c\uc870\uccb4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uba3c\uc800, eflag_update \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud558\ub294 API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc774\ub97c \ud1b5\ud574, \uc0c8\ub85c \ubcc0\uacbd\ud558\uace0\uc790 \ud558\ub294 new element flag \uac12\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_eflag_update_init(memcached_coll_eflag_update_st *ptr, const unsigned char *fvalue, const size_t fvalue_length) \ub9cc\uc57d, eflag\uc758 \ubd80\ubd84 \uac12\ub9cc\uc744 \ubcc0\uacbd\ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc544\ub798 \ud568\uc218\ub85c \ubd80\ubd84 \uac12\uc758 \uc2dc\uc791 \uc704\uce58\ub97c \uba85\uc2dc\ud558\uc5ec\uc57c \ud558\uace0, \ubd80\ubd84 \uac12\uacfc eflag_update \uc758 init \uc2dc\uc5d0 \uba85\uc2dc\ud55c fvalue\uc5d0 \ub300\ud574 \ucde8\ud560 bitwise \uc5f0\uc0b0\uc744 \uba85\uc2dc\ud558\uc5ec\uc57c \ud55c\ub2e4. memcached_return_t memcached_coll_eflag_update_set_bitwise(memcached_coll_eflag_update_st *ptr, const size_t fwhere, memcached_coll_bitwise_t bitwise_op) fwhere: eflag\uc5d0\uc11c \ubd80\ubd84 \ubcc0\uacbd\ud560 \ubd80\ubd84 \ub370\uc774\ud130\uc758 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. bitwise_op: bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. MEMCACHED_COLL_BITWISE_AND MEMCACHED_COLL_BITWISE_OR MEMCACHED_COLL_BITWISE_XOR 6-4. B+Tree Query \uad6c\uc870\uccb4 memcached_bop_query_st \uad6c\uc870\uccb4\ub294 B+tree \uc870\ud68c \uc870\uac74\uc744 \ucd94\uc0c1\ud654\ud558\uace0 \uc788\uc73c\uba70 \ub2e4\uc591\ud55c API\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. \uba3c\uc800, \uc544\ub798 \ud568\uc218\ub294 \ud558\ub098\uc758 bkey\uc758 element\ub97c \uc870\ud68c\ud558\ub294 query \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_return_t memcached_bop_query_init(memcached_bop_query_st *ptr, const uint64_t bkey, memcached_bop_eflag_filter_st *eflag_filter) memcached_return_t memcached_bop_ext_query_init(memcached_bop_query_st *ptr, const unsigned char *bkey, const size_t bkey_length, memcached_bop_eflag_filter_st *eflag_filter) \uc544\ub798 \ud568\uc218\ub294 bkey range, element flag filter, offset\uacfc count\ub97c \ud568\uaed8 \uba85\uc2dc\ud558\uc5ec query \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_return_t memcached_bop_range_query_init(memcached_bop_query_st *ptr, const uint64_t bkey_from, const uint64_t bkey_to, memcached_bop_eflag_filter_st *eflag_filter, const size_t offset, const size_t count) memcached_return_t memcached_bop_ext_range_query_init (memcached_bop_query_st *ptr, const unsigned char *bkey_from, const size_t bkey_from_length, const unsigned char *bkey_to, const size_t bkey_to_length, memcached_bop_eflag_filter_st *eflag_filter, const size_t offset, const size_t count) 6-5. B+Tree Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty b+tree item\uc744 \uc0dd\uc131\ud55c\ub2e4. memcached_return_t memcached_bop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes) key: b+tree item\uc758 key attributes: b+tree item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: b+tree item\uc774 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 b+tree\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc758 \ud568\uc218\ub85c \ucd08\uae30\ud654\ud558\uba70, \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) B+tree item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_item_create(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc // \ube44\uc5b4 \uc788\ub294 B+tree\ub97c \uc0dd\uc131\ud55c\ub2e4. rc= memcached_bop_create(memc, \"btree:an_empty_btree\", strlen(\"btree:an_empty_btree\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 key\ub97c \uac16\ub294 B+tree\ub97c \uc0dd\uc131\ud558\ub824 \ud558\uba74 \uc624\ub958\ub97c \ubc18\ud658\ud55c\ub2e4. rc= memcached_bop_create(memc, \"btree:an_empty_btree\", strlen(\"btree:an_empty_btree\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); } 6-6. B+Tree Element \uc0bd\uc785 B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_insert(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) memcached_return_t memcached_bop_ext_insert(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey(b+tree key) eflag, eflag_length: element\uc758 eflag(element flag), that is optional value, value_lenth: element\uc758 value attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree item\uc744 \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 B+tree\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: B+tree\uac00 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: B+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_ELEMENT_EXISTS: \ub3d9\uc77c\ud55c bkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uace0 \uc788\uc74c. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_OUT_OF_RANGE: \uc8fc\uc5b4\uc9c4 bkey\uac00 maxcount \ub610\ub294 maxbkeyrange\ub97c \uc704\ubc30\ud558\uc5ec overflowaction\uc5d0 \ub530\ub77c trim\ub428. B+tree element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \uc785\ub825\ud560 \ub54c B+Tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 bkey\ub97c \uac00\uc9c0\ub294 element\ub294 \uc785\ub825\ud560 \uc218 \uc5c6\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ELEMENT_EXISTS == memcached_get_last_response_code(memc)); // B+tree\uc5d0 \uc124\uc815\ub41c overflow action\uc5d0 \ub530\ub77c \uc785\ub825 \ubd88\uac00\ub2a5\ud55c bkey\uac00 \uacb0\uc815\ub41c\ub2e4. // B+tree\ub294 smallest_trim \uc815\ucc45\uc774 \uae30\ubcf8\uac12\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \uc788\uc73c\uba70, B+tree\uc5d0 \ud3ec\ud568\ub41c \uac00\uc7a5 \uc791\uc740 bkey \ubcf4\ub2e4 // \uc791\uc740 bkey\ub97c \uc785\ub825\ud558\ub824 \ud558\uba74 OUT_OF_RANGE \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_OUT_OF_RANGE == memcached_get_last_response_code(memc)); } \uc544\ucee4\uc2a4\uc5d0\uc11c B+tree\ub294 \uac00\uc9c8 \uc218 \uc788\ub294 \ucd5c\ub300 \uc5d8\ub9ac\uba3c\ud2b8 \uac1c\uc218\uac00 \uc81c\ud55c\ub418\uc5b4 \uc788\ub2e4. \uc774 \uc81c\ud55c \ubc94\uc704 \uc548\uc5d0\uc11c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 B+tree \ud06c\uae30\ub97c \uc9c0\uc815\ud560 \uc218\ub3c4 \uc788\ub294\ub370(maxcount), \uc774\ub7ec\ud55c \uc81c\uc57d\uc870\uac74 \ub54c\ubb38\uc5d0 \uac00\ub4dd \ucc2c B+tree\uc5d0 \uc0c8\ub85c\uc6b4 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825\ud558\uba74 \uc124\uc815\uc5d0 \ub530\ub77c \uae30\uc874\uc758 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c \uc554\ubb35\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825(insert, upsert)\uc2dc\uc810\uc5d0 \ud68d\ub4dd\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \ud558\uc9c0\ub9cc, C client\uc5d0\uc11c\ub294 \uc774 \uae30\ub2a5\uc744 \uc544\uc9c1 \uc81c\uacf5\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4. 6-7. B+Tree Element Upsert B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c upsert\ud558\ub294 \ud568\uc218\ub4e4\uc774\ub2e4. Upsert \uc5f0\uc0b0\uc740 \ud574\ub2f9 element\uac00 \uc5c6\uc73c\uba74 insert\ud558\uace0, \uc788\uc73c\uba74 update\ud558\ub294 \uc5f0\uc0b0\uc774\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_upsert(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) memcached_return_t memcached_bop_ext_upsert(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey eflag, eflag_length: element\uc758 eflag, that is optional value, value_lenth: element\uc758 value attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 B+tree\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: B+tree\uac00 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_REPLACED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 B+tree\uc5d0\uc11c \ub3d9\uc77c\ud55c bkey\ub97c \uac00\uc9c4 element\ub97c \ub300\uccb4\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: B+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_OUT_OF_RANGE: \uc0bd\uc785 \uc704\uce58\uac00 b+tree\uc758 element bkey \ubc94\uc704\ub97c \ub118\uc5b4\uc12c. B+tree element\ub97c upsert\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_upsert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \uc785\ub825\ud560 \ub54c B+Tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_upsert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 bkey\ub97c \uac00\uc9c0\ub294 element\ub97c \uc0c8\ub85c\uc6b4 element\ub85c \ub300\uccb4\ud55c\ub2e4. rc= memcached_bop_upsert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"new value\", strlen(\"new value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_REPLACED == memcached_get_last_response_code(memc)); } 6-8. B+Tree Element \ubcc0\uacbd B+Tree\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. Element\uc758 eflag \uadf8\ub9ac\uace0/\ub610\ub294 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_update(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type memcached_coll_update_filter_st *update_filter, const char *value, size_t value_length) memcached_return_t memcached_bop_ext_update(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type memcached_coll_update_filter_st *update_filter, const char *value, size_t value_length) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey update_filter: element\uc758 eflag \ubcc0\uacbd \uc694\uccad\uc744 \ub2f4\uc740 \uad6c\uc870\uccb4 value, value_lenth: element\uc758 new value Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_UPDATED: \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\ub97c \uc5c5\ub370\uc774\ud2b8\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_NOTHING_TO_UPDATE: \ubcc0\uacbd\uc0ac\ud56d\uc774 \uba85\uc2dc\ub418\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_EFLAG_MISMATCH: update_filter\uc5d0 \uba85\uc2dc\ub41c eflag \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. B+tree element\ub97c \ubcc0\uacbd\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_update(memcached_st *memc) { /* TODO : example code */ } 6-9. B+Tree Element \uc0ad\uc81c B+tree\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, b+tree\uc5d0\uc11c \ud2b9\uc815 bkey\ub97c \uac00\uc9c4 element\uc5d0 \ub300\ud574 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\uba74 \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_delete(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type memcached_coll_eflag_filter_st *eflag_filter, bool drop_if_empty) memcached_return_t memcached_bop_ext_delete(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type memcached_coll_eflag_filter_st *eflag_filter, bool drop_if_empty) \ub458\uc9f8, b+tree\uc5d0\uc11c bkey range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc2a4\uce94\ud558\uba74\uc11c eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 N\uac1c\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_delete_by_range(memcached_st *ptr, const char *key, size_t key_length, const uint64_t from, const uint64_t to, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool drop_if_empty) memcached_return_t memcached_bop_ext_delete_by_range(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *from, size_t from_length, const unsigned char *to, size_t to_length, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool drop_if_empty) key, key_length: b+tree item\uc758 key bkeuy \ub610\ub294 \\<from, to>: \uc0ad\uc81c\ud560 element\uc758 bkey(b+tree key) \ub610\ub294 bkey range eflag_filter: element\uc758 eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 count: \uc0ad\uc81c\ud560 element \uac1c\uc218, 0\uc774\uba74 bkey range\uc758 \ubaa8\ub4e0 element\uac00 \uc0ad\uc81c \ub300\uc0c1\uc774 \ub41c\ub2e4. drop_if_empty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub420 \uacbd\uc6b0, \uadf8 b+tree\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c B+tree\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. B+tree element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // \uc0ad\uc81c\ub97c \uc694\uccad\ud55c bkey\uac00 B+tree\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_bop_delete(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 2, NULL, true); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); // bkey \ubc94\uc704\uac00 0~10 \uc0ac\uc774\uc778 element\ub97c \ubaa8\ub450 \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_bop_delete_by_range(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, 10, NULL, 0, true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); } 6-10. B+Tree Element \uac12\uc758 \uc99d\uac10 B+tree element\uc758 \uac12\uc744 \uc99d\uac00/\uac10\uc18c\uc2dc\ud0a4\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Element\uc758 \uac12\uc740 \uc22b\uc790\ud615 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_incr(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, const uint64_t delta, uint64_t *value) memcached_return_t memcached_bop_decr(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, const uint64_t delta, uint64_t *value) memcached_return_t memcached_bop_ext_incr(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, const uint64_t delta, uint64_t *value) memcached_return_t memcached_bop_ext_decr(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, const uint64_t delta, uint64_t *value) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey delta: \uc99d\uac10\uc2dc\ud0ac \uac12 (\uac10\uc18c\uc2dc\ud0ac \uac12\uc774 element \uac12\ubcf4\ub2e4 \ud06c\uba74, 0\uc73c\ub85c \uc124\uc815\ud55c\ub2e4.) value: \uc99d\uac10\ud6c4\uc758 element \uac12\uc744 \ubc18\ud658\ubc1b\ub294 \uc778\uc790 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c increment/decrement \ud6c4 \uc870\ud68c\ud558\uc600\uc74c. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey \uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 unreadable \uc0c1\ud0dc\uc784. MEMCACHED_OUT_OF_RANGE : \uc8fc\uc5b4\uc9c4 \uc870\ud68c \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. B+tree element \uac12\uc758 \uc99d\uac10\uc744 \uc218\ud589\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_incr(memcached_st *memc) { uint64_t value; uint32_t flags= 10; int32_t exptime= 600; uint32_t maxcount= 1000; uint64_t value; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st result_obj; memcached_coll_result_st *result= memcached_coll_result_create(memc, &result_obj); // element \ucd94\uac00 rc= memcached_bop_insert(memc, \"btree:a_btree_incr\", 19, 1, NULL, 0, \"2\", 1, &attributes); assert(rc == MEMCACHED_SUCCESS); // element increment rc= memcached_bop_incr(memc, \"btree:a_btree_incr\", 19, 1, 1, &value); assert(rc == MEMCACHED_SUCCESS); assert(uint64_t(3), value); } void arcus_btree_element_decr(memcached_st *memc) { uint64_t value; uint32_t flags= 10; int32_t exptime= 600; uint32_t maxcount= 1000; uint64_t value; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st result_obj; memcached_coll_result_st *result= memcached_coll_result_create(memc, &result_obj); // element \ucd94\uac00 rc= memcached_bop_insert(memc, \"btree:a_btree_incr\", 19, 1, NULL, 0, \"2\", 1, &attributes); assert(rc == MEMCACHED_SUCCESS); // element decrement 1 rc= memcached_bop_decr(memc, \"btree:a_btree_incr\", 19, 1, 1, &value); assert(rc == MEMCACHED_SUCCESS); assert(uint64_t(1), value); // element decrement 2 rc= memcached_bop_decr(memc, \"btree:a_btree_incr\", 19, 1, 2, &value); assert(rc == MEMCACHED_SUCCESS); assert(uint64_t(0), value); } 6-11. B+Tree Element \uac1c\uc218 \ud655\uc778 B+tree element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, b+tree\uc5d0\uc11c \ud2b9\uc815 bkey\ub97c \uac00\uc9c4 element\uc5d0 \ub300\ud574 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294\uc9c0\ub97c \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_count(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) memcached_return_t memcached_bop_ext_count(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) \ub458\uc9f8, b+tree\uc5d0\uc11c bkey range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4 \uc911 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_count_by_range(memcached_st *ptr, const char *key, size_t key_length, const uint64_t from, const uint64_t to, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) memcached_return_t memcached_bop_ext_count_by_range(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *from, size_t from_length, const unsigned char *to, size_t to_length, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 \\<from, to>: \uac1c\uc218 \uacc4\uc0b0\ud560 element\uc758 bkey \ub610\ub294 bkey range eflag_filter: element\uc758 eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 count: element \uac1c\uc218\uac00 \ubc18\ud658\ub418\ub294 \uc778\uc790 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_COUNT: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uc758 element \uac1c\uc218\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. B+tree element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_count(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); uint32_t bkey_from = 0; uint32_t bkey_to = 10000; memcached_coll_query_st query; memcached_bop_count_range_query_create(memc, &query, bkey_from, bkey_to, NULL); // \ubc94\uc704 \uc548\uc758 element \uac1c\uc218\ub97c \uc694\uccad\ud55c\ub2e4. size_t count = 0; rc= memcached_bop_count(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), &query, &count); assert(MEMCACHED_SUCCESS == rc); assert(2 == count); } 6-12. B+Tree Element \uc870\ud68c B+tree element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc138 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, b+tree\uc5d0\uc11c \ud2b9\uc815 bkey\ub97c \uac00\uc9c4 element\uc5d0 \ub300\ud574 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\uba74 \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_get(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_eflag_filter_st *eflag_filter, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) memcached_return_t memcached_bop_ext_get(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_eflag_filter_st *eflag_filter, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \ub458\uc9f8, b+tree\uc5d0\uc11c bkey range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc2a4\uce94\ud558\uba74\uc11c eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub4e4 \uc911 offset \uac1c\ub97c skip\ud55c \ud6c4 count \uac1c\uc758 element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_get_by_range(memcached_st *ptr, const char *key, size_t key_length, const uint64_t from, const uint64_t to, memcached_coll_eflag_filter_st *eflag_filter, const size_t offset, const size_t count, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) memcached_return_t memcached_bop_ext_get_by_range(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *from, size_t from_length, const unsigned char *to, size_t to_length, memcached_coll_eflag_filter_st *eflag_filter, const size_t offset, const size_t count, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \uc14b\uc9f8, query \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec b+tree element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_get_by_query(memcached_st *ptr, const char *key, size_t key_length, memcached_bop_query_st *query bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 \\<from, to>: \uc870\ud68c\ud560 bkey \ub610\ub294 bkey range query: \uc870\ud68c\ub97c \uba85\uc2dc\ud55c query \uad6c\uc870\uccb4 \uc989, bkey range, eflag filter, offset, count\uac00 \uba85\uc2dc\ub41c\ub2e4. eflag_filter: element\uc758 eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub420 \uacbd\uc6b0, \uadf8 b+tree\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_TRIMMED B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. MEMCACHED_DELETED: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. \uc774 \uacb0\uacfc empty \uc0c1\ud0dc\uac00 \ub41c B+tree\ub97c \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\ub610\ub294 bkey \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 unreadable \uc0c1\ud0dc\uc784. MEMCACHED_OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 \uc870\ud68c \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) B+tree element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; for (uint32_t i=0; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), i, NULL, 0, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_range(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), maxcount, maxcount+maxcount, NULL, 0, maxcount, false, false, result); assert(MEMCACHED_NOTFOUND_ELEMENT == rc); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. Empty \uc0c1\ud0dc\uac00 \ub41c B+tree\ub294 \uc0ad\uc81c\ub41c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_range(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, maxcount, NULL, 0, maxcount, true, false, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { char buffer[15]; snprintf(buffer, 15, \"value%u\", (int)i); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); } 6-13. B+Tree Element \uc77c\uad04 \uc0bd\uc785 B+tree\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 b+tree\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t number_of_piped_items, const uint64_t *bkeys, const unsigned char * const *eflags, const size_t *eflags_length, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) memcached_return_t memcached_bop_ext_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t number_of_piped_items, const unsigned char * const *bkeys, const size_t *bkeys_length, const unsigned char * const *eflags, const size_t *eflags_length, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: b+tree item\uc758 key number_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 bkeys \ub610\ub294 bkeys, bkeys_length: element \uac1c\uc218\ub9cc\ud07c\uc758 bkey array (\ud544\uc218) eflags, eflags_length: element \uac1c\uc218\ub9cc\ud07c\uc758 eflag array (\uc635\uc158) values, values_length: element \uac1c\uc218\ub9cc\ud07c\uc758 value array (\ud544\uc218) attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 b+tree\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, size_t number_of_keys, const uint64_t bkey, const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) memcached_return_t memcached_bop_ext_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, size_t number_of_keys, const unsigned char *bkey, size_t bkey_length, const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 b+tree items\uc758 key array number_of_keys: key\ub4e4\uc758 \uac1c\uc218 bkey, bkey_length: element\uc758 bkey(b+tree key) eflag, eflag_length: element\uc758 eflag(element flag) (\uc635\uc158) value, value_length: element\uc758 value attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. B+tree element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. MEMCACHED_STORED: element\ub9cc \uc0bd\uc785 MEMCACHED_CRATED_STORED: b+tree item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. B+tree element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 500; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; uint64_t bkeys[100]; unsigned char **eflags = (unsigned char **)malloc(sizeof(unsigned char *) * 100); size_t elfaglengths[100]; char **values = (char **)malloc(sizeof(char *) * 100); uint32_t elfag = 0; int i; // pipe \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c argument\ub97c \uc0dd\uc131\ud55c\ub2e4. for (i=0; i<100; i++) { bkeys[i] = i; eflags[i] = (unsigned char *)&eflag; eflaglengts[i] = sizeof(eflag); values[i] = (char *)malloc(sizeof(char)*15); valuelengths[i] = snprintf(values[i], 15, \"value%llu\", (unsigned long long)i); } // \uc785\ub825\ud560 \ub54c B+Tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_piped_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 100, bkeys, eflags, eflaglengths, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); for (i=0; i<100; i++) { assert(MEMCACHED_STORED == results[i] || MEMCACHED_CREATED_STORED == results[i]); } for (i=0; i<100; i++) { free((void*)values[i]); } free((void*)eflags); free((void*)values); } 6-14. B+tree Element \uc77c\uad04 \uc870\ud68c \uc11c\ub85c \ub2e4\ub978 key\ub85c \ubd84\uc0b0\ub418\uc5b4 \uc788\ub294 b+tree\ub4e4\uc758 element\ub4e4\uc744 \ud55c \ubc88\uc758 \uc694\uccad\uc73c\ub85c \uc870\ud68c\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc774\ub2e4. \uc774 \uae30\ub2a5\uc740 \ube44\ub3d9\uae30(asynchronous) \ubc29\uc2dd\uc73c\ub85c \uc218\ud589\ud558\uba70, (1) \ub2e4\uc218 b+tree\ub4e4\uc758 element \uc870\ud68c \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \ub2e8\uacc4\uc640 (2) \uc870\ud68c \uacb0\uacfc\ub97c \ubc1b\uc544\ub0b4\ub294 \ub2e8\uacc4\ub85c \uad6c\ubd84\ub41c\ub2e4. \uccab\uc9f8 \ub2e8\uacc4\ub85c, \ub2e4\uc218 b+tree\ub4e4\uc5d0 \ub300\ud55c element \uc870\ud68c \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. B+tree element \uc870\ud68c \uc870\uac74\ub294 query \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec \uba85\uc2dc\ud55c\ub2e4. memcached_return_t memcached_bop_mget(memcached_st *ptr, const char * const *keys, const size_t *keys_length, size_t number_of_keys, memcached_coll_query_st *query) keys, keys_length: \ub2e4\uc218 bt+tree item\ub4e4\uc758 key array number_of_keys: key \uac1c\uc218 query: \uc870\ud68c \uc870\uac74\uc744 \uac00\uc9c4 query \uad6c\uc870\uccb4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS : \uac01 key\ub97c \ub2f4\ub2f9\ud558\ub294 \ubaa8\ub4e0 \uce90\uc2dc \uc11c\ubc84\uc5d0 \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c \uc694\uccad\uc744 \ubcf4\ub0c4. MEMCACHED_SOME_SUCCESS : \uac01 key\ub97c \ub2f4\ub2f9\ud558\ub294 \uce90\uc2dc \uc11c\ubc84\ub85c\uc758 \uc694\uccad\uc774 \uc77c\ubd80 \uc2e4\ud328\ud568. MEMCACHED_FAILURE : \uac01 key\ub97c \ub2f4\ub2f9\ud558\ub294 \ubaa8\ub4e0 \uce90\uc2dc \uc11c\ubc84\ub85c\uc758 \uc694\uccad\uc774 \ubaa8\ub450 \uc2e4\ud328\ud568. \ub458\uc9f8 \ub2e8\uacc4\ub85c, element \uc870\ud68c \uacb0\uacfc\ub97c iteration \ubc29\uc2dd\uc73c\ub85c \ud558\ub098\uc529 \uac00\uc838\uc624\uae30 \uc704\ud55c \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_coll_result_st *memcached_coll_fetch_result(memcached_st *ptr, memcached_coll_result_st *result, memcached_return_t *error) \uc870\ud68c \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. result != null MEMCACHED_SUCCESS: \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud568. MEMCACHED_TRIMMED: \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 \ud2b9\uc815 B+tree\uc758 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, \ud574\ub2f9 B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc874\uc7ac\ud560 \uc218 \uc788\uc74c. result == null MEMCACHED_NOT_FOUND: \uc8fc\uc5b4\uc9c4 key\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c. MEMCACHED_NOT_FOUND_ELEMENT: \uc870\ud68c \uc870\uac74\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c. MEMCACHED_OUT_OF_RANGE: \uc8fc\uc5b4\uc9c4 \uc870\ud68c \uc870\uac74\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, \ud574\ub2f9 B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc874\uc7ac\ud560 \uc218 \uc788\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. B+tree element \uc77c\uad04 \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. static void arcus_btree_element_mget(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 50; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // test data const char *keys[]= { \"btree:a_btree1\", \"btree:a_btree2\", \"btree:a_btree3\", \"btree:a_btree4\", \"btree:a_btree5\" }; size_t key_length[] = { 14, 14, 14, 14, 14 }; for (size_t i=0; i<3; i++) { for (size_t j=0; j<maxcount; j++) { char buffer[32]; size_t buffer_len= snprintf(buffer, 32, \"value%lu\", (unsigned long)j); rc= memcached_bop_insert(memc, keys[i], key_length[i], j, NULL, 1, buffer, buffer_len, &attributes); } } // query memcached_bop_query_st query_obj; memcached_bop_range_query_init(&query_obj, 0, 10000, NULL, 0, maxcount); rc= memcached_bop_mget(memc, keys, key_length, 5, &query_obj); // result memcached_coll_result_st result_obj; memcached_coll_result_st *result= memcached_coll_result_create(memc, &result_obj); while ((result= memcached_coll_fetch_result(memc, &result_obj, &rc))) { if (rc == MEMCACHED_SUCCESS or rc == MEMCACHED_TRIMMED ) { for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { fprintf(stderr, \"[debug] %04lu : %s[%llu]=%s (rc=%s)\\n\", (unsigned long)i, memcached_coll_result_get_key(result), memcached_coll_result_get_bkey(result, i), memcached_coll_result_get_value(result, i), memcached_strerror(NULL, rc)); } } else { } memcached_coll_result_free(result); } } 6-15. B+tree Element Sort-Merge \uc870\ud68c \uc11c\ub85c \ub2e4\ub978 key\ub85c \ubd84\uc0b0\ub418\uc5b4 \uc788\ub294 b+Tree\ub4e4\uc758 element\ub97c sort-merge \ubc29\uc2dd\uc73c\ub85c \uc870\ud68c\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. \uc774\ub294 \uc11c\ub85c \ub2e4\ub978 b+tree\ub4e4\uc774\uc9c0\ub9cc, \ub17c\ub9ac\uc801\uc73c\ub85c \ud558\ub098\ub85c \ud569\uccd0\uc9c4 \uac70\ub300\ud55c b+tree\uc5d0 \ub300\ud574 element \uc870\ud68c \uc5f0\uc0b0\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \ud6a8\uacfc\ub97c \ub0b8\ub2e4. smget \ub3d9\uc791\uc740 \uc870\ud68c \ubc94\uc704\uc640 \uc5b4\ub5a4 b+tree\uc758 trim \uc601\uc5ed\uacfc \uacb9\uce68\uc5d0 \ub300\ud55c \ucc98\ub9ac\ub85c, \uc544\ub798 \ub450 \uac00\uc9c0 \ub3d9\uc791 \ubaa8\ub4dc\uac00 \uc788\ub2e4. 1) \uae30\uc874 Sort-Merge \uc870\ud68c (1.8.X \uc774\ud558 \ubc84\uc804\uc5d0\uc11c \ub3d9\uc791\ud558\ub358 \ubc29\uc2dd) - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uccab \ubc88\uc9f8 element\uac00 trim\ub41c b+tree\uac00 \ud558\ub098\ub77c\ub3c4 \uc874\uc7ac\ud558\uba74 OUT_OF_RANGE \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements \uc870\ud68c\ud55c \ud6c4\uc5d0 \uc751\uc6a9\uc5d0\uc11c sort-merge \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. - OUT_OF_RANGE\uac00 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c smget\uc744 \uc218\ud589\ud558\uba74\uc11c \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450 \ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\ub97c \ub9cc\ub098\uac8c \ub418\uba74, \uadf8 \uc9c0\uc810\uae4c\uc9c0 \uc870\ud68c\ud55c elements\ub97c \ucd5c\uc885 elements \uacb0\uacfc\ub85c \ud558\uace0 smget \uc218\ud589 \uc0c1\ud0dc\ub294 TRIMMED\ub85c \ud558\uc5ec \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim \uc601\uc5ed\uc758 elements\ub97c \uc870\ud68c\ud558\uc5ec smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. 2) \uc2e0\uaddc Sort-Merge \uc870\ud68c (1.9.0 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub41c \ubc29\uc2dd) - \uae30\uc874\uc758 OUT_OF_RANGE\uc5d0 \ud574\ub2f9\ud558\ub294 b+tree\ub97c missed keys\ub85c \ubd84\ub958\ud558\uace0 \ub098\uba38\uc9c0 b+tree\ub4e4\uc5d0 \ub300\ud574 smget\uc744 \uacc4\uc18d \uc218\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 missed keys\uc5d0 \ud55c\ud574\uc11c\ub9cc \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450 \ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\uac00 \uc874\uc7ac\ud558\ub354\ub77c\ub3c4, \uadf8 \uc9c0\uc810\uc5d0\uc11c smget\uc744 \uc911\uc9c0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uadf8\ub7ec\ud55c b+tree\ub97c trimmed keys\ub85c \ubd84\ub958\ud558\uace0 \uc6d0\ud558\ub294 \uac1c\uc218\uc758 elements\ub97c \ucc3e\uc744 \ub54c\uae4c\uc9c0 smget\uc744 \uacc4\uc18d \uc9c4\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 trimmed keys\uc5d0 \ud55c\ud558\uc5ec \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim\ub41c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - bkey\uc5d0 \ub300\ud55c unique \uc870\ud68c \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\ub294 duplicate \uc870\ud68c \uc678\uc5d0 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uace0 unique bkey\ub9cc\uc744 \uc870\ud68c\ud558\ub294 unique \uc870\ud68c\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - \uc870\ud68c \uc870\uac74\uc5d0 offset \uae30\ub2a5\uc744 \uc81c\uac70\ud55c\ub2e4. \uae30\uc874 smget \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4, offset \uac12\uc740 \ud56d\uc0c1 0\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\uace0\ud55c\ub2e4. \uc591\uc218\uc758 offset\uc744 \uc0ac\uc6a9\ud558\ub294 smget\uc5d0\uc11c missed keys\uac00 \uc874\uc7ac\ud558\uace0 missed keys\uc5d0 \ub300\ud55c DB \uc870\ud68c\uac00 offset\uc73c\ub85c skip\ub41c element\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0, \uc751\uc6a9\uc5d0\uc11c \uc815\ud655\ud55c offset \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud574\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\uc804\uc758 \uc870\ud68c \uacb0\uacfc\uc5d0 \uc774\uc5b4\uc11c \ucd94\uac00\ub85c \uc870\ud68c\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, \uc774\uc804\uc5d0 \uc870\ud68c\ub41c bkey \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c bkey range\ub97c \uc7ac\uc870\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Sort-Merge \uc870\ud68c\ub97c \uc218\ud589\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_return_t memcached_bop_smget(memcached_st *ptr, const char * const *keys, const size_t *keys_length, size_t num_of_keys, memcached_bop_query_st *query, memcached_bop_smget_result_st *result) keys, keys_length: \ub2e4\uc218 bt+tree item\ub4e4\uc758 key array number_of_keys: key \uac1c\uc218 query: \uc870\ud68c \uc870\uac74\uc744 \uac00\uc9c4 query \uad6c\uc870\uccb4 result: sort-merge \uc870\ud68c \uacb0\uacfc\ub294 \ub2f4\ub294 \uad6c\uc870\uccb4 Sort-Merge \uc870\ud68c \uc9c8\uc758\ub97c \ud45c\ud604\ud558\ub294 memcached_bop_query_st \uad6c\uc870\uccb4 \uc0dd\uc131 \ubc29\ubc95\uc740 \uae30\uc874 sort-merge \uc870\ud68c\uc640 \uc2e0\uaddc sort-merge \uc870\ud68c\uc5d0 \ub530\ub77c \ub2e4\ub974\ub2e4. \uae30\uc874 sort-merge \uc870\ud68c\uc5d0\uc11c memcached_bop_query_st \uad6c\uc870\uccb4 \uc0dd\uc131 \ubc29\ubc95\uc740 \uc55e\uc11c \uc124\uba85\ud55c B+Tree Query \uad6c\uc870\uccb4 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. \uc2e0\uaddc sort-merge \uc870\ud68c\uc5d0\uc11c\ub294 \uc544\ub798\uc758 sort-merge \uc9c8\uc758 \uc0dd\uc131\ud558\ub294 \uc804\uc6a9 API\ub97c \uc0ac\uc6a9\ud574 bkey range, element flag, count \uadf8\ub9ac\uace0 unique\ub97c \uba85\uc2dc\ud558\uc5ec query \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \uc778\uc790\uc778 unique\uac00 false\uc774\uba74 \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\uba70, true\uc774\uba74 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uc5ec unique bkey\ub9cc\uc744 \uc870\ud68c\ud55c\ub2e4. memcached_return_t memcached_bop_smget_query_init(memcached_bop_query_st *ptr, const uint64_t bkey_from, const uint64_t bkey_to, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool unique); memcached_return_t memcached_bop_ext_smget_query_init(memcached_bop_query_st *ptr, const unsigned char *bkey_from, size_t bkey_from_length, const unsigned char *bkey_to, size_t bkey_to_length, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool unique); Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: \uc5ec\ub7ec B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DUPLICATED: \uc5ec\ub7ec B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098 \uc911\ubcf5\ub41c bkey\uac00 \uc874\uc7ac\ud568. MEMCACHED_TRIMMED (\uae30\uc874 sort-merge \uc870\ud68c\uc5d0 \ud55c\uc815) \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 \ud2b9\uc815 B+tree\uc758 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, \ud574\ub2f9 B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. MEMCACHED_DUPLICATED_TRIMMED (\uae30\uc874 sort-merge \uc870\ud68c\uc5d0 \ud55c\uc815) MEMCACHED_DUPLICATED \uc0c1\ud0dc\uc640MEMCACHED_TRIMMED \uc0c1\ud0dc\uac00 \ubaa8\ub450 \uc874\uc7ac. not MEMCACHED_SUCCESS MEMCACHED_OUT_OF_RANGE (\uae30\uc874 sort-merge \uc870\ud68c\uc5d0 \ud55c\uc815) \uc8fc\uc5b4\uc9c4 \uc870\ud68c \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_ATTR_MISMATCH: smget\uc5d0 \ucc38\uc5ec\ud558\ub294 B+tree\ub4e4\uc758 attribute\uac00 \uc11c\ub85c \ub2e4\ub984. \ucc38\uace0\ub85c smget\uc5d0 \ucc38\uc5ec\ud558\ub294 B+tree\ub4e4\uc740 maxcount, maxbkeyrange, overflowaction\uc774 \ubaa8\ub450 \ub3d9\uc77c\ud574\uc57c \ud568. arcus-memcached 1.11.3 \uc774\ud6c4\ub85c attribute \ud1b5\uc77c \uc81c\uc57d\uc774 \uc0ac\ub77c\uc9d0. Sort-merge \uc870\ud68c \uacb0\uacfc\ub294 memcached_bop_smget_result_t \uad6c\uc870\uccb4\ub85c \ubc1b\uc544\uc628\ub2e4. Sort-merge \uc870\ud68c\ud558\uae30 \uc804\uc5d0 memcached_bop_smget_result_t \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud558\uc5ec \uc0ac\uc6a9\ud574\uc57c \ud558\uace0, memcached_bop_smget_result_t \uad6c\uc870\uccb4\uc5d0\uc11c \uc870\ud68c \uacb0\uacfc\ub97c \ubaa8\ub450 \uc5bb\uc740 \ud6c4\uc5d0\ub294 \ub2e4\uc2dc \ubc18\ud658\ud558\uc5ec\uc57c \ud55c\ub2e4. \uc774\ub97c \uc218\ud589\ud558\ub294 \ub450 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_bop_smget_result_st *memcached_bop_smget_result_create(const memcached_st *ptr, memcached_bop_smget_result_st *result) void memcached_bop_smget_result_free(memcached_bop_smget_result_st *result) \ud568\uc218 \uae30\ub2a5 memcached_bop_smget_result_create result \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. result\uc5d0 NULL\uc744 \ub123\uc73c\uba74 \uc0c8\ub85c allocate \ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. memcached_bop_smget_result_free result \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud558\uace0 allocate \ub41c \uacbd\uc6b0 free \ud55c\ub2e4. memcached_bop_smget_result_t \uad6c\uc870\uccb4\uc5d0\uc11c \uc870\ud68c \uacb0\uacfc\ub97c \uc5bb\uae30 \uc704\ud55c \ud568\uc218\ub4e4\uc740 \uc544\ub798\uc640 \uac19\ub2e4. size_t memcached_bop_smget_result_get_count(memcached_bop_smget_result_st *result) const char * memcached_bop_smget_result_get_key(memcached_bop_smget_result_st *result, size_t index) uint64_t memcached_bop_smget_result_get_bkey(memcached_bop_smget_result_st *result, size_t index) memcached_hexadecimal_st *memcached_bop_smget_result_get_bkey_ext(memcached_bop_smget_result_st *result, size_t index) memcached_hexadecimal_st *memcached_bop_smget_result_get_eflag(memcached_bop_smget_result_st *result, size_t index) const char * memcached_bop_smget_result_get_value(memcached_bop_smget_result_st *result, size_t index) size_t memcached_bop_smget_result_get_value_length(memcached_bop_smget_result_st *result, size_t index) size_t memcached_bop_smget_result_get_missed_key_count(memcached_bop_smget_result_st *result) const char * memcached_bop_smget_result_get_missed_key(memcached_bop_smget_result_st *result, size_t index) size_t memcached_bop_smget_result_get_missed_key_length(memcached_bop_smget_result_st *result, size_t index) memcached_return_t memcached_coll_smget_result_get_missed_cause(memcached_coll_smget_result_st *result, size_t index) size_t memcached_coll_smget_result_get_trimmed_key_count(memcached_coll_smget_result_st *result) const char * memcached_coll_smget_result_get_trimmed_key(memcached_coll_smget_result_st *result, size_t index) size_t memcached_coll_smget_result_get_trimmed_key_length(memcached_coll_smget_result_st *result, size_t index) uint64_t memcached_coll_smget_result_get_trimmed_bkey(memcached_coll_smget_result_st *result, size_t index) memcached_hexadecimal_st *memcached_coll_smget_result_get_trimmed_bkey_ext(memcached_coll_smget_result_st *result, size_t index) \ud568\uc218 \uae30\ub2a5 memcached_bop_smget_result_get_count \uc870\ud68c \uacb0\uacfc\uc758 element \uac1c\uc218 memcached_bop_smget_result_get_key Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 key memcached_bop_smget_result_get_bkey Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 unsigned int bkey memcached_bop_smget_result_get_bkey_ext Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 byte array bkey memcached_bop_smget_result_get_eflag Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 eflag memcached_bop_smget_result_get_value Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 value memcached_bop_smget_result_get_value_length Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 value \uae38\uc774 memcached_bop_smget_result_get_missed_key_count \uc870\ud68c \uacb0\uacfc\uc758 missed key \uac1c\uc218 memcached_bop_smget_result_get_missed_key Missed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key memcached_bop_smget_result_get_missed_key_length Missed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key \uae38\uc774 memcached_bop_smget_result_get_missed_cause \ud574\ub2f9 missed key\uac00 miss\ub41c \uc6d0\uc778 (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_key_count \uc870\ud68c \uacb0\uacfc\uc758 trimmed key \uac1c\uc218 (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_key_key Trimmed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_key_length Trimmed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key \uae38\uc774 (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_bkey \ud574\ub2f9 trimmed key\uc758 \ub9c8\uc9c0\ub9c9 unsigned int bkey (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_bkey_ext \ud574\ub2f9 trimmed key\uc758 \ub9c8\uc9c0\ub9c9 byte array bkey (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) B+tree element sort-merge \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_smget(memcached_st *memc) { memcached_return_t rc; const char *keys[100]; size_t key_length[100]; uint32_t bkeys[100]; srand(time(NULL)); // 100\uac1c\uc758 key\uc640 \ubb34\uc791\uc704\ub85c \uc0dd\uc131\ud55c bkey\ub97c \uc900\ube44\ud55c\ub2e4. for (int i=0; i<100; i++) { keys[i] = (char *)malloc(255); key_length[i] = (size_t) snprintf((char *)keys[i], 255, \"test:ext_ascending_order_id_%d\", i); // Integer -> Hexadecimal \ubcc0\ud658\uc744 Big-endian\uc5d0 \ub9de\ucd94\uae30\ub85c \ud558\uc790. bkeys[i] = htonl(rand()); } memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, 0, 600, 1000); // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. for (int i=0; i<100; i++) { uint32_t bkey = bkeys[i]; uint32_t eflag = 0; char value[64]; size_t value_length = snprintf(value, 64, \"value_id%d_bkey%u\", i, bkey); // \uc5ec\uae30\uc11c\ub294 bkey\uc640 eflag\ub97c uint32_t \ud615\ud0dc\uc758 \uc815\uc218(big-endian)\ub97c \uce90\uc2a4\ud305\ud558\uc5ec \ub118\uaca8 \uc8fc\uace0 \uc788\uc74c\uc744 \ucc38\uace0\ud558\uc790. rc = memcached_bop_ext_insert(memc, keys[i], key_length[i], (unsigned char *)&bkey, sizeof(uint32_t), (unsigned char *)&eflag, sizeof(eflag), value, value_length, &attributes); } memcached_bop_smget_result_st smget_result_object; memcached_bop_smget_result_st *smget_result = memcached_bop_smget_result_create(memc, &smget_result_object); uint32_t bkey_from = 0; uint32_t bkey_to = htonl(UINT32_MAX); // byte array bkey\uc5d0 \ub300\ud574 \uc911\ubcf5 bkey \ud5c8\uc6a9\ud55c \ubc94\uc704 \uac80\uc0c9 \ucffc\ub9ac\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_bop_query_st query; memcached_bop_ext_smget_query_init(memc, &query, (unsigned char *)&bkey_from, sizeof(uint32_t), (unsigned char *)&bkey_to, sizeof(uint32_t), NULL, 100, false); // smget\uc744 \uc218\ud589\ud55c\ub2e4. rc = memcached_bop_smget(memc, keys, key_length, 100, &query, smget_result); assert(MEMCACHED_END == memcached_get_last_response_code(memc)); aseert(100 == memcached_bop_smget_result_get_count(smget_result)); aseert(0 == memcached_bop_smget_result_get_missed_key_count(smget_result)); aseert(0 == memcached_bop_smget_result_get_trimmed_key_count(smget_result)); if (rc == MEMCACHED_SUCCESS) { uint32_t last_bkey = bkey_from; for (uint32_t i=0; i<memcached_bop_smget_result_get_count(smget_result); i++) { memcached_hexadecimal_st bkey = smget_result->sub_keys[i].bkey_ext; char bkey_buf[64]; memcached_hexadecimal_to_str(&bkey, bkey_buf, 64); char eflag_buf[64]; memcached_hexadecimal_to_str(&smget_result->eflags[i], eflag_buf, 64); char *rvalue = smget_result->values[i].string; fprintf(stderr, \"key[%s], bkey[%s], eflag[%s] = %s\\n\", smget_result->keys[i].string, bkey_buf, eflag_buf, rvalue); } } else { fprintf(stderr, \"memcached_bop_smget() failed, reason=%s\\n\", memcached_strerror(NULL, rc)); return; } memcached_bop_smget_result_free(smget_result); for (int i=0; i<100; i++) { free((void*)keys[i]); } } 6-16. B+Tree Element \uc21c\uc704 \uc870\ud68c B+Tree element \uc21c\uc704\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_find_position(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_order_t order, size_t *position) memcached_return_t memcached_bop_ext_find_position(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_order_t order, size_t *position) key, key_length: B+Tree item\uc758 key bkey, bkey_length: \uc21c\uc704\ub97c \uc870\ud68c\ud560 element\uc758 bkey order : \uc21c\uc704 \uae30\uc900 MEMCACHED_COLL_ORDER_ASC: bkey \uac12\uc758 \uc624\ub984\ucc28\uc21c MEMCACHED_COLL_ORDER_DESC: bkey \uac12\uc758 \ub0b4\ub9bc\ucc28\uc21c position: element \uc21c\uc704\uac00 \ubc18\ud658\ub418\ub294 \uc778\uc790 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - MEMCACHED_SUCCESS - MEMCACHED_SUCCESS: \uc8fc\uc5b4\uc9c4 key\uc5d0\uc11c bkey\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element \uc21c\uc704\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568 - not MEMCACHED_SUCCESS - MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree item\uc774 \uc5c6\uc74c - MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element\uac00 \uc5c6\uc74c - MEMCACHED_TYPE_MISMATCH: \ud574\ub2f9 item\uc774 B+Tree\uac00 \uc544\ub2d8 - MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 - MEMCACHED_UNREADABLE: \ud574\ub2f9 key item\uc774 unreadable \uc0c1\ud0dc\uc784 - MEMCACHED_NOT_SUPPORTED: \ud604\uc7ac \uc21c\uc704 \uc870\ud68c \uc5f0\uc0b0\uc774 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc74c. B+Tree element \uc21c\uc704\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_find_position(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_return_t rc; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value0\", strlen(\"value0\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value1\", strlen(\"value1\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // \uc21c\uc704\ub97c \uc870\ud68c\ud55c\ub2e4. int position = -1; rc = memcached_bop_find_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, MEMCACHED_COLL_ORDER_ASC, &position); assert(1 == position); rc = memcached_bop_find_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, MEMCACHED_COLL_ORDER_DESC, &position); assert(0 == position); } 6-17. B+Tree \uc21c\uc704 \uae30\ubc18\uc758 Element \uc870\ud68c B+Tree\uc5d0\uc11c \uc21c\uc704 \ubc94\uc704\ub85c element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_return_t memcached_bop_get_by_position(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_order_t order, size_t from_position, size_t to_position, memcached_coll_result_st *result); key, key_length: B+Tree item\uc758 key order : \uc21c\uc704 \uae30\uc900 MEMCACHED_COLL_ORDER_ASC: bkey \uac12\uc758 \uc624\ub984\ucc28\uc21c MEMCACHED_COLL_ORDER_DESC: bkey \uac12\uc758 \ub0b4\ub9bc\ucc28\uc21c from_position, to_position: \uc21c\uc704\uc758 \ubc94\uc704\ub85c \uc2dc\uc791 \uc21c\uc704\uc640 \ub05d \uc21c\uc704 result: \uc870\ud68c \uacb0\uacfc\ub97c \ub2f4\ub294 result \uad6c\uc870\uccb4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - MEMCACHED_SUCCESS - MEMCACHED_SUCCESS: \uc8fc\uc5b4\uc9c4 \uc21c\uc704 \uae30\uc900\uacfc \uc21c\uc704 \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568 - not MEMCACHED_SUCCESS - MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree item\uc774 \uc5c6\uc74c - MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 \uc21c\uc704 \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element\uac00 \uc5c6\uc74c - MEMCACHED_TYPE_MISMATCH: \ud574\ub2f9 item\uc774 B+Tree\uac00 \uc544\ub2d8 - MEMCACHED_UNREADABLE: \ud574\ub2f9 key item\uc774 unreadable \uc0c1\ud0dc\uc784 - MEMCACHED_NOT_SUPPORTED: \ud604\uc7ac \uc21c\uc704 \uc870\ud68c \uc5f0\uc0b0\uc774 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc74c. B+Tree\uc5d0\uc11c \uc21c\uc704 \ubc94\uc704\ub85c element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_get_by_position(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; char buffer[16]; size_t buffer_len; memcached_return_t rc; memcached_coll_result_st *result; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // bkey \ubc94\uc704\uac00 0 ~ 999\uc778 1000\uac1c element\ub97c \uac00\uc9c4 b+tree \uc0dd\uc131. for (uint32_t bkey=0; bkey<maxcount; bkey++) { buffer_len= snprintf(buffer, 15, \"value%u\", bkey); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), bkey, NULL, 0, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc624\ub984\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_ASC, 99, 99, result); assert(MEMCACHED_SUCCESS == rc); assert(1 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", (99+i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); // \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_DESC, 99, 99, result); assert(MEMCACHED_SUCCESS == rc); assert(1 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", ((maxcount-1)-99-i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); // \uc624\ub984\ucc28\uc21c\uc73c\ub85c 101\ubc88\uc9f8\ubd80\ud130 200\ubc88\uc9f8\uae4c\uc9c0\uc758 element\ub4e4\uc744 \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_ASC, 100, 199, result); assert(MEMCACHED_SUCCESS == rc); assert(100 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", (100+i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); // \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c 101\ubc88\uc9f8\ubd80\ud130 200\ubc88\uc9f8\uae4c\uc9c0\uc758 element\ub4e4\uc744 \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_DESC, 100, 199, result); assert(MEMCACHED_SUCCESS == rc); assert(100 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", ((maxcount-1)-100-i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); } 6-17. B+Tree \uc21c\uc704\uc640 Element \ub3d9\uc2dc \uc870\ud68c B+Tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ub300\ud55c \uc21c\uc704\ub97c \uc870\ud68c\ud558\uba74\uc11c \uadf8 bkey\uc758 element\ub97c \ud3ec\ud568\ud558\uc5ec \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01 N\uac1c\uc758 elements\ub97c \ud568\uaed8 \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc774\uace0, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_find_position_with_get(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_order_t order, size_t count, memcached_coll_result_st *result); memcached_return_t memcached_bop_ext_find_position_with_get(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_order_t order, size_t count, memcached_coll_result_st *result); key, key_length: B+Tree item\uc758 key bkey, bkey_length: \uc21c\uc704\ub97c \uc870\ud68c\ud560 element\uc758 bkey order : \uc21c\uc704 \uae30\uc900 MEMCACHED_COLL_ORDER_ASC: bkey \uac12\uc758 \uc624\ub984\ucc28\uc21c MEMCACHED_COLL_ORDER_DESC: bkey \uac12\uc758 \ub0b4\ub9bc\ucc28\uc21c count : \ucc3e\uc740 element\uc758 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01\uac01 \uc870\ud68c\ud560 element \uac1c\uc218 result: \uc870\ud68c\ud55c \uc21c\uc704\uc640 element\ub97c \ub2f4\ub294 result \uad6c\uc870\uccb4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - MEMCACHED_SUCCESS - MEMCACHED_SUCCESS: \uc21c\uc704 \uc870\ud68c\uc640 element \uc870\ud68c\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc218\ud589\ud568. - not MEMCACHED_SUCCESS - MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree item\uc774 \uc5c6\uc74c - MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element\uac00 \uc5c6\uc74c - MEMCACHED_TYPE_MISMATCH: \ud574\ub2f9 item\uc774 B+Tree\uac00 \uc544\ub2d8 - MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 - MEMCACHED_UNREADABLE: \ud574\ub2f9 key item\uc774 unreadable \uc0c1\ud0dc\uc784 - MEMCACHED_NOT_SUPPORTED: \ud604\uc7ac \uc21c\uc704 \uc870\ud68c \uc5f0\uc0b0\uc774 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc74c. \uc815\uc0c1 \uc218\ud589\ub418\uc5c8\uc744 \uacbd\uc6b0, result \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc758 \uacb0\uacfc\ub97c \uac00\uc9c4\ub2e4. - \uc870\ud68c\ub41c element \uacb0\uacfc - bkey \uac12\uc758 order \uae30\uc900\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc21c\uc11c\ub300\ub85c element\ub4e4\uc774 \ubcf4\uad00\ub41c\ub2e4. - \uac01 element\uc758 bkey \uc21c\uc704 - memcached_coll_result_get_position(result, index) API\ub97c \ud1b5\ud574 \uc870\ud68c\ud55c\ub2e4. - btree \ub0b4\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc758 \uc21c\uc704 - memcached_coll_result_get_btree_position(result) API\ub97c \ud1b5\ud574 \uc870\ud68c\ud55c\ub2e4. - result\uc5d0 \ubcf4\uad00\ub41c element\ub4e4\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc758 element \uc704\uce58 - memcached_coll_result_get_result_position(result) API\ub97c \ud1b5\ud574 \uc870\ud68c\ud55c\ub2e4. B+Tree\uc5d0\uc11c \ud2b9\uc815 bkey\uc5d0 \ub300\ud55c \uc21c\uc704 \ubc0f element \uc870\ud68c\uc640 \ud568\uaed8 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c N\uac1c element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_find_position_with_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; char buffer[16]; size_t buffer_len; memcached_return_t rc; memcached_coll_result_st *result; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // bkey \ubc94\uc704\uac00 0 ~ 999\uc778 1000\uac1c element\ub97c \uac00\uc9c4 b+tree \uc0dd\uc131. for (uint32_t bkey=0; bkey<maxcount; bkey++) { buffer_len= snprintf(buffer, 15, \"value%u\", bkey); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), bkey, NULL, 0, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc624\ub984\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 bkey\uc758 \uc21c\uc704 \ubc0f element\uc640 \ud568\uaed8 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01 10\uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); bkdata_len= snprintf(bkdata, 15, \"%04u\", 99); rc= memcached_bop_ext_find_position_with_get(memc, test_literal_param(\"btree:a_btree\"), (unsigned char *)bkdata, bkdata_len, MEMCACHED_COLL_ORDER_ASC, 10, result); assert(rc == MEMCACHED_SUCCESS); assert(21 == memcached_coll_result_get_count(result)); assert(99 == memcached_coll_result_get_btree_position(result)); assert(10 == memcached_coll_result_get_result_position(result)); if (rc == MEMCACHED_SUCCESS) { size_t position = (99-10); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { assert(position == memcached_coll_result_get_position(result, i)); snprintf(buffer, 15, \"value%u\", ((99-10)+i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); position += 1; } } memcached_coll_result_free(result); // \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 bkey\uc758 \uc21c\uc704 \ubc0f element\uc640 \ud568\uaed8 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01 10\uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); bkdata_len= snprintf(bkdata, 15, \"%04u\", ((maxcount-1)-99)); rc= memcached_bop_ext_find_position_with_get(memc, test_literal_param(\"btree:a_btree\"), (unsigned char *)bkdata, bkdata_len, MEMCACHED_COLL_ORDER_DESC, 10, result); assert(rc == MEMCACHED_SUCCESS); assert(21 == memcached_coll_result_get_count(result)); assert(99 == memcached_coll_result_get_btree_position(result)); assert(10 == memcached_coll_result_get_result_position(result)); if (rc == MEMCACHED_SUCCESS) { size_t position = (99-10); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { assert(position == memcached_coll_result_get_position(result, i)); snprintf(buffer, 15, \"value%u\", ((maxcount-1)-(99-10)-i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); position += 1; } } memcached_coll_result_free(result); }","title":"6. btree API"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-1-bkeybtree-key-eflagelement-flag","text":"B+tree item\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud55c bkey \ub370\uc774\ud130 \ud0c0\uc785\uc740 \uc544\ub798 \ub450 \uac00\uc9c0\uc774\ub2e4. 8\ubc14\uc774\ud2b8 unsigned integer \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array eflag\ub294 \ud604\uc7ac b+tree element\uc5d0\ub9cc \uc874\uc7ac\ud558\ub294 \ud544\ub4dc\uc774\ub2e4. eflag \ub370\uc774\ud130 \ud0c0\uc785\uc740 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\ub9cc \uac00\ub2a5\ud558\ub2e4.","title":"6-1. BKey(B+Tree Key)\uc640 EFlag(Element Flag)"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-2-element-flag-filter","text":"B+tree\uc758 element flag\uc5d0 \ub300\ud55c filtering\uc744 \uc9c0\uc815\ud558\uae30 \uc704\ud574\uc120, eflag_filter \uad6c\uc870\uccb4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uba3c\uc800, eflag_filter \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud558\ub294 API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc774\ub97c \ud1b5\ud574, eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uacfc \ud2b9\uc815 \uac12\uacfc\uc758 compare \uc5f0\uc0b0\uc744 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_eflag_filter_init(memcached_ coll _eflag_filter_st *ptr, const size_t fwhere, const unsigned char *fvalue, const size_t fvalue_length, memcached_coll_comp_t comp_op) fwhere: eflag\uc5d0\uc11c \ube44\uad50 \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub370\uc774\ud130\uc758 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. fvalue: \ube44\uad50 \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub370\uc774\ud130 \uac12\uc744 \uc9c0\uc815\ud55c\ub2e4. comp_op: \ube44\uad50 \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. MEMCACHED_COLL_COMP_EQ MEMCACHED_COLL_COMP_NE MEMCACHED_COLL_COMP_LT MEMCACHED_COLL_COMP_LE MEMCACHED_COLL_COMP_GT MEMCACHED_COLL_COMP_GE eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc5d0 \ub300\ud574 \uc5b4\ub5a4 operand\ub85c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud568\uc73c\ub85c\uc368 eflag\uc758 \ud2b9\uc815 bits\ub4e4\ub9cc\uc744 \uace8\ub77c\ub0b4\uc5b4 compare\ud560 \uc218 \uc788\ub2e4. \uc774\uc640 \uac19\uc774 eflag_filter \uc5d0 bitwise \uc5f0\uc0b0\uc744 \ucd94\uac00\ud560 \uacbd\uc6b0\uc5d0\ub294 \uc544\ub798\uc758 API\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_eflag_filter_set_bitwise(memcached_coll_eflag_filter_st *ptr, memcached_coll_bitwise_t bitwise_op, const unsigned char *foperand, const size_t foperand_length) bitwise_op: bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. MEMCACHED_COLL_BITWISE_AND MEMCACHED_COLL_BITWISE_OR MEMCACHED_COLL_BITWISE_XOR foperand: eflag\uc5d0\uc11c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 operand\ub97c \uc9c0\uc815\ud55c\ub2e4.","title":"6-2. Element Flag Filter \uad6c\uc870\uccb4"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-3-element-flag-update","text":"B+tree\uc758 element flag\ub97c \ubcc0\uacbd\ud558\uae30 \uc704\ud574\uc120 eflag_update \uad6c\uc870\uccb4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uba3c\uc800, eflag_update \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud558\ub294 API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc774\ub97c \ud1b5\ud574, \uc0c8\ub85c \ubcc0\uacbd\ud558\uace0\uc790 \ud558\ub294 new element flag \uac12\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_eflag_update_init(memcached_coll_eflag_update_st *ptr, const unsigned char *fvalue, const size_t fvalue_length) \ub9cc\uc57d, eflag\uc758 \ubd80\ubd84 \uac12\ub9cc\uc744 \ubcc0\uacbd\ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc544\ub798 \ud568\uc218\ub85c \ubd80\ubd84 \uac12\uc758 \uc2dc\uc791 \uc704\uce58\ub97c \uba85\uc2dc\ud558\uc5ec\uc57c \ud558\uace0, \ubd80\ubd84 \uac12\uacfc eflag_update \uc758 init \uc2dc\uc5d0 \uba85\uc2dc\ud55c fvalue\uc5d0 \ub300\ud574 \ucde8\ud560 bitwise \uc5f0\uc0b0\uc744 \uba85\uc2dc\ud558\uc5ec\uc57c \ud55c\ub2e4. memcached_return_t memcached_coll_eflag_update_set_bitwise(memcached_coll_eflag_update_st *ptr, const size_t fwhere, memcached_coll_bitwise_t bitwise_op) fwhere: eflag\uc5d0\uc11c \ubd80\ubd84 \ubcc0\uacbd\ud560 \ubd80\ubd84 \ub370\uc774\ud130\uc758 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. bitwise_op: bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. MEMCACHED_COLL_BITWISE_AND MEMCACHED_COLL_BITWISE_OR MEMCACHED_COLL_BITWISE_XOR","title":"6-3. Element Flag Update \uad6c\uc870\uccb4"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-4-btree-query","text":"memcached_bop_query_st \uad6c\uc870\uccb4\ub294 B+tree \uc870\ud68c \uc870\uac74\uc744 \ucd94\uc0c1\ud654\ud558\uace0 \uc788\uc73c\uba70 \ub2e4\uc591\ud55c API\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. \uba3c\uc800, \uc544\ub798 \ud568\uc218\ub294 \ud558\ub098\uc758 bkey\uc758 element\ub97c \uc870\ud68c\ud558\ub294 query \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_return_t memcached_bop_query_init(memcached_bop_query_st *ptr, const uint64_t bkey, memcached_bop_eflag_filter_st *eflag_filter) memcached_return_t memcached_bop_ext_query_init(memcached_bop_query_st *ptr, const unsigned char *bkey, const size_t bkey_length, memcached_bop_eflag_filter_st *eflag_filter) \uc544\ub798 \ud568\uc218\ub294 bkey range, element flag filter, offset\uacfc count\ub97c \ud568\uaed8 \uba85\uc2dc\ud558\uc5ec query \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_return_t memcached_bop_range_query_init(memcached_bop_query_st *ptr, const uint64_t bkey_from, const uint64_t bkey_to, memcached_bop_eflag_filter_st *eflag_filter, const size_t offset, const size_t count) memcached_return_t memcached_bop_ext_range_query_init (memcached_bop_query_st *ptr, const unsigned char *bkey_from, const size_t bkey_from_length, const unsigned char *bkey_to, const size_t bkey_to_length, memcached_bop_eflag_filter_st *eflag_filter, const size_t offset, const size_t count)","title":"6-4. B+Tree Query \uad6c\uc870\uccb4"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-5-btree-item","text":"\uc0c8\ub85c\uc6b4 empty b+tree item\uc744 \uc0dd\uc131\ud55c\ub2e4. memcached_return_t memcached_bop_create(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_create_attrs_st *attributes) key: b+tree item\uc758 key attributes: b+tree item\uc758 \uc18d\uc131 \uc815\ubcf4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_CREATED: b+tree item\uc774 \uc0dd\uc131\ub428. not MEMCACHED_SUCCESS MEMCACHED_EXISTS: \ub3d9\uc77c\ud55c key\ub97c \uac00\uc9c4 b+tree\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568. Item \uc0dd\uc131 \uc2dc, item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\uac00 \ud544\uc694\ud558\ub2e4. Item \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 attributes \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc758 \ud568\uc218\ub85c \ucd08\uae30\ud654\ud558\uba70, \ud544\uc218 \uc18d\uc131 \uc815\ubcf4\uc778 flags, exptime, maxcount \ub9cc\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_init(memcached_coll_create_attrs_st *attributes, uint32_t flags, uint32_t exptime, uint32_t maxcount) \uadf8 \uc678\uc5d0, \uc120\ud0dd\uc801 \uc18d\uc131\ub4e4\uc740 attributes \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c \uc774\ud6c4, \uc544\ub798\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_create_attrs_set_flags(memcached_coll_create_attrs_st *attributes, uint32_t flags) memcached_return_t memcached_coll_create_attrs_set_expiretime(memcached_coll_create_attrs_st *attributes, uint32_t expiretime) memcached_return_t memcached_coll_create_attrs_set_maxcount(memcached_coll_create_attrs_st *attributes, uint32_t maxcount) memcached_return_t memcached_coll_create_attrs_set_overflowaction(memcached_coll_create_attrs_st *attributes, memcached_coll_overflowaction_t overflowaction) memcached_return_t memcached_coll_create_set_unreadable(memcached_coll_create_attrs_st *attributes) B+tree item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_item_create(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc // \ube44\uc5b4 \uc788\ub294 B+tree\ub97c \uc0dd\uc131\ud55c\ub2e4. rc= memcached_bop_create(memc, \"btree:an_empty_btree\", strlen(\"btree:an_empty_btree\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 key\ub97c \uac16\ub294 B+tree\ub97c \uc0dd\uc131\ud558\ub824 \ud558\uba74 \uc624\ub958\ub97c \ubc18\ud658\ud55c\ub2e4. rc= memcached_bop_create(memc, \"btree:an_empty_btree\", strlen(\"btree:an_empty_btree\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_EXISTS == memcached_get_last_response_code(memc)); }","title":"6-5. B+Tree Item \uc0dd\uc131"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-6-btree-element","text":"B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_insert(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) memcached_return_t memcached_bop_ext_insert(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey(b+tree key) eflag, eflag_length: element\uc758 eflag(element flag), that is optional value, value_lenth: element\uc758 value attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree item\uc744 \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 B+tree\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: B+tree\uac00 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: B+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_ELEMENT_EXISTS: \ub3d9\uc77c\ud55c bkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uace0 \uc788\uc74c. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_OUT_OF_RANGE: \uc8fc\uc5b4\uc9c4 bkey\uac00 maxcount \ub610\ub294 maxbkeyrange\ub97c \uc704\ubc30\ud558\uc5ec overflowaction\uc5d0 \ub530\ub77c trim\ub428. B+tree element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \uc785\ub825\ud560 \ub54c B+Tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 bkey\ub97c \uac00\uc9c0\ub294 element\ub294 \uc785\ub825\ud560 \uc218 \uc5c6\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ELEMENT_EXISTS == memcached_get_last_response_code(memc)); // B+tree\uc5d0 \uc124\uc815\ub41c overflow action\uc5d0 \ub530\ub77c \uc785\ub825 \ubd88\uac00\ub2a5\ud55c bkey\uac00 \uacb0\uc815\ub41c\ub2e4. // B+tree\ub294 smallest_trim \uc815\ucc45\uc774 \uae30\ubcf8\uac12\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \uc788\uc73c\uba70, B+tree\uc5d0 \ud3ec\ud568\ub41c \uac00\uc7a5 \uc791\uc740 bkey \ubcf4\ub2e4 // \uc791\uc740 bkey\ub97c \uc785\ub825\ud558\ub824 \ud558\uba74 OUT_OF_RANGE \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_OUT_OF_RANGE == memcached_get_last_response_code(memc)); } \uc544\ucee4\uc2a4\uc5d0\uc11c B+tree\ub294 \uac00\uc9c8 \uc218 \uc788\ub294 \ucd5c\ub300 \uc5d8\ub9ac\uba3c\ud2b8 \uac1c\uc218\uac00 \uc81c\ud55c\ub418\uc5b4 \uc788\ub2e4. \uc774 \uc81c\ud55c \ubc94\uc704 \uc548\uc5d0\uc11c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 B+tree \ud06c\uae30\ub97c \uc9c0\uc815\ud560 \uc218\ub3c4 \uc788\ub294\ub370(maxcount), \uc774\ub7ec\ud55c \uc81c\uc57d\uc870\uac74 \ub54c\ubb38\uc5d0 \uac00\ub4dd \ucc2c B+tree\uc5d0 \uc0c8\ub85c\uc6b4 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825\ud558\uba74 \uc124\uc815\uc5d0 \ub530\ub77c \uae30\uc874\uc758 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c \uc554\ubb35\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825(insert, upsert)\uc2dc\uc810\uc5d0 \ud68d\ub4dd\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \ud558\uc9c0\ub9cc, C client\uc5d0\uc11c\ub294 \uc774 \uae30\ub2a5\uc744 \uc544\uc9c1 \uc81c\uacf5\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4.","title":"6-6. B+Tree Element \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-7-btree-element-upsert","text":"B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c upsert\ud558\ub294 \ud568\uc218\ub4e4\uc774\ub2e4. Upsert \uc5f0\uc0b0\uc740 \ud574\ub2f9 element\uac00 \uc5c6\uc73c\uba74 insert\ud558\uace0, \uc788\uc73c\uba74 update\ud558\ub294 \uc5f0\uc0b0\uc774\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_upsert(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) memcached_return_t memcached_bop_ext_upsert(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey eflag, eflag_length: element\uc758 eflag, that is optional value, value_lenth: element\uc758 value attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_STORED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 B+tree\uc5d0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_CREATED_STORED: B+tree\uac00 \uc0c8\ub86d\uac8c \uc0dd\uc131\ub418\uace0 element\uac00 \uc0bd\uc785\ub428. MEMCACHED_REPLACED: \uae30\uc874\uc5d0 \uc874\uc7ac\ud558\ub358 B+tree\uc5d0\uc11c \ub3d9\uc77c\ud55c bkey\ub97c \uac00\uc9c4 element\ub97c \ub300\uccb4\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: B+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_OVERFLOWED: Overflow \uc0c1\ud0dc\uc784. (overflowaction=error, maxcount=count) MEMCACHED_OUT_OF_RANGE: \uc0bd\uc785 \uc704\uce58\uac00 b+tree\uc758 element bkey \ubc94\uc704\ub97c \ub118\uc5b4\uc12c. B+tree element\ub97c upsert\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_upsert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \uc785\ub825\ud560 \ub54c B+Tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_upsert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); // \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 bkey\ub97c \uac00\uc9c0\ub294 element\ub97c \uc0c8\ub85c\uc6b4 element\ub85c \ub300\uccb4\ud55c\ub2e4. rc= memcached_bop_upsert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"new value\", strlen(\"new value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_REPLACED == memcached_get_last_response_code(memc)); }","title":"6-7. B+Tree Element Upsert"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-8-btree-element","text":"B+Tree\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. Element\uc758 eflag \uadf8\ub9ac\uace0/\ub610\ub294 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_update(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type memcached_coll_update_filter_st *update_filter, const char *value, size_t value_length) memcached_return_t memcached_bop_ext_update(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type memcached_coll_update_filter_st *update_filter, const char *value, size_t value_length) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey update_filter: element\uc758 eflag \ubcc0\uacbd \uc694\uccad\uc744 \ub2f4\uc740 \uad6c\uc870\uccb4 value, value_lenth: element\uc758 new value Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_UPDATED: \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\ub97c \uc5c5\ub370\uc774\ud2b8\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_NOTHING_TO_UPDATE: \ubcc0\uacbd\uc0ac\ud56d\uc774 \uba85\uc2dc\ub418\uc9c0 \uc54a\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_EFLAG_MISMATCH: update_filter\uc5d0 \uba85\uc2dc\ub41c eflag \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. B+tree element\ub97c \ubcc0\uacbd\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_update(memcached_st *memc) { /* TODO : example code */ }","title":"6-8. B+Tree Element \ubcc0\uacbd"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-9-btree-element","text":"B+tree\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, b+tree\uc5d0\uc11c \ud2b9\uc815 bkey\ub97c \uac00\uc9c4 element\uc5d0 \ub300\ud574 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\uba74 \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_delete(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, // bkey of 8 bytes unsigned integer type memcached_coll_eflag_filter_st *eflag_filter, bool drop_if_empty) memcached_return_t memcached_bop_ext_delete(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, // bkey of byte array type memcached_coll_eflag_filter_st *eflag_filter, bool drop_if_empty) \ub458\uc9f8, b+tree\uc5d0\uc11c bkey range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc2a4\uce94\ud558\uba74\uc11c eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 N\uac1c\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_delete_by_range(memcached_st *ptr, const char *key, size_t key_length, const uint64_t from, const uint64_t to, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool drop_if_empty) memcached_return_t memcached_bop_ext_delete_by_range(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *from, size_t from_length, const unsigned char *to, size_t to_length, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool drop_if_empty) key, key_length: b+tree item\uc758 key bkeuy \ub610\ub294 \\<from, to>: \uc0ad\uc81c\ud560 element\uc758 bkey(b+tree key) \ub610\ub294 bkey range eflag_filter: element\uc758 eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 count: \uc0ad\uc81c\ud560 element \uac1c\uc218, 0\uc774\uba74 bkey range\uc758 \ubaa8\ub4e0 element\uac00 \uc0ad\uc81c \ub300\uc0c1\uc774 \ub41c\ub2e4. drop_if_empty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub420 \uacbd\uc6b0, \uadf8 b+tree\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_DELETED: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud568. MEMCACHED_DELETED_DROPPED: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud558\uace0, empty \uc0c1\ud0dc\uac00 \ub41c B+tree\ub3c4 \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. B+tree element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_delete(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // \uc0ad\uc81c\ub97c \uc694\uccad\ud55c bkey\uac00 B+tree\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. rc= memcached_bop_delete(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 2, NULL, true); assert(MEMCACHED_SUCCESS != rc); assert(MEMCACHED_NOTFOUND_ELEMENT == memcached_get_last_response_code(memc)); // bkey \ubc94\uc704\uac00 0~10 \uc0ac\uc774\uc778 element\ub97c \ubaa8\ub450 \uc0ad\uc81c\ud55c\ub2e4. rc= memcached_bop_delete_by_range(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, 10, NULL, 0, true); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); }","title":"6-9. B+Tree Element \uc0ad\uc81c"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-10-btree-element","text":"B+tree element\uc758 \uac12\uc744 \uc99d\uac00/\uac10\uc18c\uc2dc\ud0a4\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Element\uc758 \uac12\uc740 \uc22b\uc790\ud615 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_incr(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, const uint64_t delta, uint64_t *value) memcached_return_t memcached_bop_decr(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, const uint64_t delta, uint64_t *value) memcached_return_t memcached_bop_ext_incr(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, const uint64_t delta, uint64_t *value) memcached_return_t memcached_bop_ext_decr(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, const uint64_t delta, uint64_t *value) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 bkey, bkey_length: element\uc758 bkey delta: \uc99d\uac10\uc2dc\ud0ac \uac12 (\uac10\uc18c\uc2dc\ud0ac \uac12\uc774 element \uac12\ubcf4\ub2e4 \ud06c\uba74, 0\uc73c\ub85c \uc124\uc815\ud55c\ub2e4.) value: \uc99d\uac10\ud6c4\uc758 element \uac12\uc744 \ubc18\ud658\ubc1b\ub294 \uc778\uc790 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c increment/decrement \ud6c4 \uc870\ud68c\ud558\uc600\uc74c. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey \uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 unreadable \uc0c1\ud0dc\uc784. MEMCACHED_OUT_OF_RANGE : \uc8fc\uc5b4\uc9c4 \uc870\ud68c \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. B+tree element \uac12\uc758 \uc99d\uac10\uc744 \uc218\ud589\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_incr(memcached_st *memc) { uint64_t value; uint32_t flags= 10; int32_t exptime= 600; uint32_t maxcount= 1000; uint64_t value; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st result_obj; memcached_coll_result_st *result= memcached_coll_result_create(memc, &result_obj); // element \ucd94\uac00 rc= memcached_bop_insert(memc, \"btree:a_btree_incr\", 19, 1, NULL, 0, \"2\", 1, &attributes); assert(rc == MEMCACHED_SUCCESS); // element increment rc= memcached_bop_incr(memc, \"btree:a_btree_incr\", 19, 1, 1, &value); assert(rc == MEMCACHED_SUCCESS); assert(uint64_t(3), value); } void arcus_btree_element_decr(memcached_st *memc) { uint64_t value; uint32_t flags= 10; int32_t exptime= 600; uint32_t maxcount= 1000; uint64_t value; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_coll_result_st result_obj; memcached_coll_result_st *result= memcached_coll_result_create(memc, &result_obj); // element \ucd94\uac00 rc= memcached_bop_insert(memc, \"btree:a_btree_incr\", 19, 1, NULL, 0, \"2\", 1, &attributes); assert(rc == MEMCACHED_SUCCESS); // element decrement 1 rc= memcached_bop_decr(memc, \"btree:a_btree_incr\", 19, 1, 1, &value); assert(rc == MEMCACHED_SUCCESS); assert(uint64_t(1), value); // element decrement 2 rc= memcached_bop_decr(memc, \"btree:a_btree_incr\", 19, 1, 2, &value); assert(rc == MEMCACHED_SUCCESS); assert(uint64_t(0), value); }","title":"6-10. B+Tree Element \uac12\uc758 \uc99d\uac10"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-11-btree-element","text":"B+tree element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, b+tree\uc5d0\uc11c \ud2b9\uc815 bkey\ub97c \uac00\uc9c4 element\uc5d0 \ub300\ud574 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294\uc9c0\ub97c \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_count(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) memcached_return_t memcached_bop_ext_count(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) \ub458\uc9f8, b+tree\uc5d0\uc11c bkey range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4 \uc911 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_count_by_range(memcached_st *ptr, const char *key, size_t key_length, const uint64_t from, const uint64_t to, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) memcached_return_t memcached_bop_ext_count_by_range(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *from, size_t from_length, const unsigned char *to, size_t to_length, memcached_coll_eflag_filter_st *eflag_filter, size_t *count) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 \\<from, to>: \uac1c\uc218 \uacc4\uc0b0\ud560 element\uc758 bkey \ub610\ub294 bkey range eflag_filter: element\uc758 eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 count: element \uac1c\uc218\uac00 \ubc18\ud658\ub418\ub294 \uc778\uc790 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_COUNT: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uc758 element \uac1c\uc218\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. B+tree element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_count(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value\", strlen(\"value\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); uint32_t bkey_from = 0; uint32_t bkey_to = 10000; memcached_coll_query_st query; memcached_bop_count_range_query_create(memc, &query, bkey_from, bkey_to, NULL); // \ubc94\uc704 \uc548\uc758 element \uac1c\uc218\ub97c \uc694\uccad\ud55c\ub2e4. size_t count = 0; rc= memcached_bop_count(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), &query, &count); assert(MEMCACHED_SUCCESS == rc); assert(2 == count); }","title":"6-11. B+Tree Element \uac1c\uc218 \ud655\uc778"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-12-btree-element","text":"B+tree element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc138 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, b+tree\uc5d0\uc11c \ud2b9\uc815 bkey\ub97c \uac00\uc9c4 element\uc5d0 \ub300\ud574 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\uba74 \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_get(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_eflag_filter_st *eflag_filter, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) memcached_return_t memcached_bop_ext_get(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_eflag_filter_st *eflag_filter, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \ub458\uc9f8, b+tree\uc5d0\uc11c bkey range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc2a4\uce94\ud558\uba74\uc11c eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub4e4 \uc911 offset \uac1c\ub97c skip\ud55c \ud6c4 count \uac1c\uc758 element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_get_by_range(memcached_st *ptr, const char *key, size_t key_length, const uint64_t from, const uint64_t to, memcached_coll_eflag_filter_st *eflag_filter, const size_t offset, const size_t count, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) memcached_return_t memcached_bop_ext_get_by_range(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *from, size_t from_length, const unsigned char *to, size_t to_length, memcached_coll_eflag_filter_st *eflag_filter, const size_t offset, const size_t count, bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) \uc14b\uc9f8, query \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec b+tree element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_get_by_query(memcached_st *ptr, const char *key, size_t key_length, memcached_bop_query_st *query bool with_delete, bool drop_if_empty, memcached_coll_result_st *result) key, key_length: b+tree item\uc758 key bkey \ub610\ub294 \\<from, to>: \uc870\ud68c\ud560 bkey \ub610\ub294 bkey range query: \uc870\ud68c\ub97c \uba85\uc2dc\ud55c query \uad6c\uc870\uccb4 \uc989, bkey range, eflag filter, offset, count\uac00 \uba85\uc2dc\ub41c\ub2e4. eflag_filter: element\uc758 eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 with_delete: \uc870\ud68c\uc640 \ud568\uaed8 \uc0ad\uc81c\ub3c4 \uc218\ud589\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 drop_if_empty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub420 \uacbd\uc6b0, \uadf8 b+tree\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_TRIMMED B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. MEMCACHED_DELETED: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. MEMCACHED_DELETED_DROPPED: B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\uba70, \ub3d9\uc2dc\uc5d0 \uc774\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc74c. \uc774 \uacb0\uacfc empty \uc0c1\ud0dc\uac00 \ub41c B+tree\ub97c \uc0ad\uc81c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 \uc5c6\uc74c. MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\ub610\ub294 bkey \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_UNREADABLE: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+tree\uac00 unreadable \uc0c1\ud0dc\uc784. MEMCACHED_OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 \uc870\ud68c \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. \uc870\ud68c \uacb0\uacfc\ub294 memcached_coll_result_t \uad6c\uc870\uccb4\uc5d0 \uc800\uc7a5\ub41c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c API\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. memcached_coll_result_st *memcached_coll_result_create(const memcached_st *ptr, memcached_coll_result_st *result) void memcached_coll_result_free(memcached_coll_result_st *result) memcached_coll_type_t memcached_coll_result_get_type(memcached_coll_result_st *result) size_t memcached_coll_result_get_count(memcached_coll_result_st *result) uint32_t memcached_coll_result_get_flags(memcached_coll_result_st *result) const char * memcached_coll_result_get_value(memcached_coll_result_st *result, size_t index) size_t memcached_coll_result_get_value_length(memcached_coll_result_st *result, size_t index) B+tree element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; for (uint32_t i=0; i<maxcount; i++) { char buffer[15]; size_t buffer_len= snprintf(buffer, 15, \"value%d\", i); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), i, NULL, 0, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc870\ud68c \ubc94\uc704\uc5d0 \uc544\ubb34\ub7f0 element\uac00 \uc5c6\ub294 \uacbd\uc6b0 result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_range(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), maxcount, maxcount+maxcount, NULL, 0, maxcount, false, false, result); assert(MEMCACHED_NOTFOUND_ELEMENT == rc); memcached_coll_result_free(result); // \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 \uc870\ud68c\ub41c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. Empty \uc0c1\ud0dc\uac00 \ub41c B+tree\ub294 \uc0ad\uc81c\ub41c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_range(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, maxcount, NULL, 0, maxcount, true, false, result); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_DELETED_DROPPED == memcached_get_last_response_code(memc)); for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { char buffer[15]; snprintf(buffer, 15, \"value%u\", (int)i); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } // \uc870\ud68c \uacb0\uacfc\ub97c \uc0ad\uc81c\ud55c\ub2e4. memcached_coll_result_free(result); }","title":"6-12. B+Tree Element \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-13-btree-element","text":"B+tree\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 b+tree\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t number_of_piped_items, const uint64_t *bkeys, const unsigned char * const *eflags, const size_t *eflags_length, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) memcached_return_t memcached_bop_ext_piped_insert(memcached_st *ptr, const char *key, const size_t key_length, const size_t number_of_piped_items, const unsigned char * const *bkeys, const size_t *bkeys_length, const unsigned char * const *eflags, const size_t *eflags_length, const char * const *values, const size_t *values_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) key, key_length: b+tree item\uc758 key number_of_piped_items: \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud560 element \uac1c\uc218 bkeys \ub610\ub294 bkeys, bkeys_length: element \uac1c\uc218\ub9cc\ud07c\uc758 bkey array (\ud544\uc218) eflags, eflags_length: element \uac1c\uc218\ub9cc\ud07c\uc758 eflag array (\uc635\uc158) values, values_length: element \uac1c\uc218\ub9cc\ud07c\uc758 value array (\ud544\uc218) attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 b+tree\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, size_t number_of_keys, const uint64_t bkey, const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) memcached_return_t memcached_bop_ext_piped_insert_bulk(memcached_st *ptr, const char * const *keys, const size_t *keylengths, size_t number_of_keys, const unsigned char *bkey, size_t bkey_length, const unsigned char *eflag, size_t eflag_length, const char *value, size_t value_length, memcached_coll_create_attrs_st *attributes, memcached_return_t *results, memcached_return_t *piped_rc) keys, keys_length: \ub2e4\uc218 b+tree items\uc758 key array number_of_keys: key\ub4e4\uc758 \uac1c\uc218 bkey, bkey_length: element\uc758 bkey(b+tree key) eflag, eflag_length: element\uc758 eflag(element flag) (\uc635\uc158) value, value_length: element\uc758 value attributes: B+tree \uc5c6\uc744 \uc2dc\uc5d0 attributes\uc5d0 \ub530\ub77c empty b+tree\ub97c \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. B+tree element \uc77c\uad04 \uc0bd\uc785\uc758 \uacb0\uacfc\ub294 \uc544\ub798\uc758 \uc778\uc790\ub97c \ud1b5\ud574 \ubc1b\ub294\ub2e4. results: \uc77c\uad04 \uc0bd\uc785 \uacb0\uacfc\uac00 \uc8fc\uc5b4\uc9c4 key \ub610\ub294 (key, element) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. MEMCACHED_STORED: element\ub9cc \uc0bd\uc785 MEMCACHED_CRATED_STORED: b+tree item \uc0dd\uc131 \ud6c4\uc5d0, element \uc0bd\uc785 piped_rc: \uc77c\uad04 \uc800\uc7a5\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub2e4 MEMCACHED_ALL_SUCCESS: \ubaa8\ub4e0 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_SOME_SUCCESS: \uc77c\ubd80 element\uac00 \uc800\uc7a5\ub428. MEMCACHED_ALL_FAILURE: \uc804\uccb4 element\uac00 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc74c. B+tree element \uc77c\uad04 \uc0bd\uc785\uc758 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_piped_insert(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 500; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; memcached_return_t piped_rc; memcached_return_t results[MEMCACHED_COLL_MAX_PIPED_CMD_SIZE]; uint64_t bkeys[100]; unsigned char **eflags = (unsigned char **)malloc(sizeof(unsigned char *) * 100); size_t elfaglengths[100]; char **values = (char **)malloc(sizeof(char *) * 100); uint32_t elfag = 0; int i; // pipe \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c argument\ub97c \uc0dd\uc131\ud55c\ub2e4. for (i=0; i<100; i++) { bkeys[i] = i; eflags[i] = (unsigned char *)&eflag; eflaglengts[i] = sizeof(eflag); values[i] = (char *)malloc(sizeof(char)*15); valuelengths[i] = snprintf(values[i], 15, \"value%llu\", (unsigned long long)i); } // \uc785\ub825\ud560 \ub54c B+Tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub4a4 \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_piped_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 100, bkeys, eflags, eflaglengths, values, valuelengths, &attributes, results, &piped_rc); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_ALL_SUCCESS == piped_rc); for (i=0; i<100; i++) { assert(MEMCACHED_STORED == results[i] || MEMCACHED_CREATED_STORED == results[i]); } for (i=0; i<100; i++) { free((void*)values[i]); } free((void*)eflags); free((void*)values); }","title":"6-13. B+Tree Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-14-btree-element","text":"\uc11c\ub85c \ub2e4\ub978 key\ub85c \ubd84\uc0b0\ub418\uc5b4 \uc788\ub294 b+tree\ub4e4\uc758 element\ub4e4\uc744 \ud55c \ubc88\uc758 \uc694\uccad\uc73c\ub85c \uc870\ud68c\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc774\ub2e4. \uc774 \uae30\ub2a5\uc740 \ube44\ub3d9\uae30(asynchronous) \ubc29\uc2dd\uc73c\ub85c \uc218\ud589\ud558\uba70, (1) \ub2e4\uc218 b+tree\ub4e4\uc758 element \uc870\ud68c \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \ub2e8\uacc4\uc640 (2) \uc870\ud68c \uacb0\uacfc\ub97c \ubc1b\uc544\ub0b4\ub294 \ub2e8\uacc4\ub85c \uad6c\ubd84\ub41c\ub2e4. \uccab\uc9f8 \ub2e8\uacc4\ub85c, \ub2e4\uc218 b+tree\ub4e4\uc5d0 \ub300\ud55c element \uc870\ud68c \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. B+tree element \uc870\ud68c \uc870\uac74\ub294 query \uad6c\uc870\uccb4\ub97c \uc774\uc6a9\ud558\uc5ec \uba85\uc2dc\ud55c\ub2e4. memcached_return_t memcached_bop_mget(memcached_st *ptr, const char * const *keys, const size_t *keys_length, size_t number_of_keys, memcached_coll_query_st *query) keys, keys_length: \ub2e4\uc218 bt+tree item\ub4e4\uc758 key array number_of_keys: key \uac1c\uc218 query: \uc870\ud68c \uc870\uac74\uc744 \uac00\uc9c4 query \uad6c\uc870\uccb4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS : \uac01 key\ub97c \ub2f4\ub2f9\ud558\ub294 \ubaa8\ub4e0 \uce90\uc2dc \uc11c\ubc84\uc5d0 \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c \uc694\uccad\uc744 \ubcf4\ub0c4. MEMCACHED_SOME_SUCCESS : \uac01 key\ub97c \ub2f4\ub2f9\ud558\ub294 \uce90\uc2dc \uc11c\ubc84\ub85c\uc758 \uc694\uccad\uc774 \uc77c\ubd80 \uc2e4\ud328\ud568. MEMCACHED_FAILURE : \uac01 key\ub97c \ub2f4\ub2f9\ud558\ub294 \ubaa8\ub4e0 \uce90\uc2dc \uc11c\ubc84\ub85c\uc758 \uc694\uccad\uc774 \ubaa8\ub450 \uc2e4\ud328\ud568. \ub458\uc9f8 \ub2e8\uacc4\ub85c, element \uc870\ud68c \uacb0\uacfc\ub97c iteration \ubc29\uc2dd\uc73c\ub85c \ud558\ub098\uc529 \uac00\uc838\uc624\uae30 \uc704\ud55c \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_coll_result_st *memcached_coll_fetch_result(memcached_st *ptr, memcached_coll_result_st *result, memcached_return_t *error) \uc870\ud68c \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. result != null MEMCACHED_SUCCESS: \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud568. MEMCACHED_TRIMMED: \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 \ud2b9\uc815 B+tree\uc758 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, \ud574\ub2f9 B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc874\uc7ac\ud560 \uc218 \uc788\uc74c. result == null MEMCACHED_NOT_FOUND: \uc8fc\uc5b4\uc9c4 key\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c. MEMCACHED_NOT_FOUND_ELEMENT: \uc870\ud68c \uc870\uac74\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c. MEMCACHED_OUT_OF_RANGE: \uc8fc\uc5b4\uc9c4 \uc870\ud68c \uc870\uac74\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, \ud574\ub2f9 B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc874\uc7ac\ud560 \uc218 \uc788\uc74c. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. B+tree element \uc77c\uad04 \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. static void arcus_btree_element_mget(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 50; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); memcached_return_t rc; // test data const char *keys[]= { \"btree:a_btree1\", \"btree:a_btree2\", \"btree:a_btree3\", \"btree:a_btree4\", \"btree:a_btree5\" }; size_t key_length[] = { 14, 14, 14, 14, 14 }; for (size_t i=0; i<3; i++) { for (size_t j=0; j<maxcount; j++) { char buffer[32]; size_t buffer_len= snprintf(buffer, 32, \"value%lu\", (unsigned long)j); rc= memcached_bop_insert(memc, keys[i], key_length[i], j, NULL, 1, buffer, buffer_len, &attributes); } } // query memcached_bop_query_st query_obj; memcached_bop_range_query_init(&query_obj, 0, 10000, NULL, 0, maxcount); rc= memcached_bop_mget(memc, keys, key_length, 5, &query_obj); // result memcached_coll_result_st result_obj; memcached_coll_result_st *result= memcached_coll_result_create(memc, &result_obj); while ((result= memcached_coll_fetch_result(memc, &result_obj, &rc))) { if (rc == MEMCACHED_SUCCESS or rc == MEMCACHED_TRIMMED ) { for (size_t i=0; i<memcached_coll_result_get_count(result); i++) { fprintf(stderr, \"[debug] %04lu : %s[%llu]=%s (rc=%s)\\n\", (unsigned long)i, memcached_coll_result_get_key(result), memcached_coll_result_get_bkey(result, i), memcached_coll_result_get_value(result, i), memcached_strerror(NULL, rc)); } } else { } memcached_coll_result_free(result); } }","title":"6-14. B+tree Element \uc77c\uad04 \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-15-btree-element-sort-merge","text":"\uc11c\ub85c \ub2e4\ub978 key\ub85c \ubd84\uc0b0\ub418\uc5b4 \uc788\ub294 b+Tree\ub4e4\uc758 element\ub97c sort-merge \ubc29\uc2dd\uc73c\ub85c \uc870\ud68c\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. \uc774\ub294 \uc11c\ub85c \ub2e4\ub978 b+tree\ub4e4\uc774\uc9c0\ub9cc, \ub17c\ub9ac\uc801\uc73c\ub85c \ud558\ub098\ub85c \ud569\uccd0\uc9c4 \uac70\ub300\ud55c b+tree\uc5d0 \ub300\ud574 element \uc870\ud68c \uc5f0\uc0b0\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \ud6a8\uacfc\ub97c \ub0b8\ub2e4. smget \ub3d9\uc791\uc740 \uc870\ud68c \ubc94\uc704\uc640 \uc5b4\ub5a4 b+tree\uc758 trim \uc601\uc5ed\uacfc \uacb9\uce68\uc5d0 \ub300\ud55c \ucc98\ub9ac\ub85c, \uc544\ub798 \ub450 \uac00\uc9c0 \ub3d9\uc791 \ubaa8\ub4dc\uac00 \uc788\ub2e4. 1) \uae30\uc874 Sort-Merge \uc870\ud68c (1.8.X \uc774\ud558 \ubc84\uc804\uc5d0\uc11c \ub3d9\uc791\ud558\ub358 \ubc29\uc2dd) - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uccab \ubc88\uc9f8 element\uac00 trim\ub41c b+tree\uac00 \ud558\ub098\ub77c\ub3c4 \uc874\uc7ac\ud558\uba74 OUT_OF_RANGE \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements \uc870\ud68c\ud55c \ud6c4\uc5d0 \uc751\uc6a9\uc5d0\uc11c sort-merge \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. - OUT_OF_RANGE\uac00 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c smget\uc744 \uc218\ud589\ud558\uba74\uc11c \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450 \ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\ub97c \ub9cc\ub098\uac8c \ub418\uba74, \uadf8 \uc9c0\uc810\uae4c\uc9c0 \uc870\ud68c\ud55c elements\ub97c \ucd5c\uc885 elements \uacb0\uacfc\ub85c \ud558\uace0 smget \uc218\ud589 \uc0c1\ud0dc\ub294 TRIMMED\ub85c \ud558\uc5ec \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim \uc601\uc5ed\uc758 elements\ub97c \uc870\ud68c\ud558\uc5ec smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. 2) \uc2e0\uaddc Sort-Merge \uc870\ud68c (1.9.0 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub41c \ubc29\uc2dd) - \uae30\uc874\uc758 OUT_OF_RANGE\uc5d0 \ud574\ub2f9\ud558\ub294 b+tree\ub97c missed keys\ub85c \ubd84\ub958\ud558\uace0 \ub098\uba38\uc9c0 b+tree\ub4e4\uc5d0 \ub300\ud574 smget\uc744 \uacc4\uc18d \uc218\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 missed keys\uc5d0 \ud55c\ud574\uc11c\ub9cc \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450 \ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\uac00 \uc874\uc7ac\ud558\ub354\ub77c\ub3c4, \uadf8 \uc9c0\uc810\uc5d0\uc11c smget\uc744 \uc911\uc9c0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uadf8\ub7ec\ud55c b+tree\ub97c trimmed keys\ub85c \ubd84\ub958\ud558\uace0 \uc6d0\ud558\ub294 \uac1c\uc218\uc758 elements\ub97c \ucc3e\uc744 \ub54c\uae4c\uc9c0 smget\uc744 \uacc4\uc18d \uc9c4\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 trimmed keys\uc5d0 \ud55c\ud558\uc5ec \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim\ub41c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - bkey\uc5d0 \ub300\ud55c unique \uc870\ud68c \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\ub294 duplicate \uc870\ud68c \uc678\uc5d0 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uace0 unique bkey\ub9cc\uc744 \uc870\ud68c\ud558\ub294 unique \uc870\ud68c\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - \uc870\ud68c \uc870\uac74\uc5d0 offset \uae30\ub2a5\uc744 \uc81c\uac70\ud55c\ub2e4. \uae30\uc874 smget \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4, offset \uac12\uc740 \ud56d\uc0c1 0\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\uace0\ud55c\ub2e4. \uc591\uc218\uc758 offset\uc744 \uc0ac\uc6a9\ud558\ub294 smget\uc5d0\uc11c missed keys\uac00 \uc874\uc7ac\ud558\uace0 missed keys\uc5d0 \ub300\ud55c DB \uc870\ud68c\uac00 offset\uc73c\ub85c skip\ub41c element\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0, \uc751\uc6a9\uc5d0\uc11c \uc815\ud655\ud55c offset \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud574\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\uc804\uc758 \uc870\ud68c \uacb0\uacfc\uc5d0 \uc774\uc5b4\uc11c \ucd94\uac00\ub85c \uc870\ud68c\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, \uc774\uc804\uc5d0 \uc870\ud68c\ub41c bkey \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c bkey range\ub97c \uc7ac\uc870\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Sort-Merge \uc870\ud68c\ub97c \uc218\ud589\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_return_t memcached_bop_smget(memcached_st *ptr, const char * const *keys, const size_t *keys_length, size_t num_of_keys, memcached_bop_query_st *query, memcached_bop_smget_result_st *result) keys, keys_length: \ub2e4\uc218 bt+tree item\ub4e4\uc758 key array number_of_keys: key \uac1c\uc218 query: \uc870\ud68c \uc870\uac74\uc744 \uac00\uc9c4 query \uad6c\uc870\uccb4 result: sort-merge \uc870\ud68c \uacb0\uacfc\ub294 \ub2f4\ub294 \uad6c\uc870\uccb4 Sort-Merge \uc870\ud68c \uc9c8\uc758\ub97c \ud45c\ud604\ud558\ub294 memcached_bop_query_st \uad6c\uc870\uccb4 \uc0dd\uc131 \ubc29\ubc95\uc740 \uae30\uc874 sort-merge \uc870\ud68c\uc640 \uc2e0\uaddc sort-merge \uc870\ud68c\uc5d0 \ub530\ub77c \ub2e4\ub974\ub2e4. \uae30\uc874 sort-merge \uc870\ud68c\uc5d0\uc11c memcached_bop_query_st \uad6c\uc870\uccb4 \uc0dd\uc131 \ubc29\ubc95\uc740 \uc55e\uc11c \uc124\uba85\ud55c B+Tree Query \uad6c\uc870\uccb4 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. \uc2e0\uaddc sort-merge \uc870\ud68c\uc5d0\uc11c\ub294 \uc544\ub798\uc758 sort-merge \uc9c8\uc758 \uc0dd\uc131\ud558\ub294 \uc804\uc6a9 API\ub97c \uc0ac\uc6a9\ud574 bkey range, element flag, count \uadf8\ub9ac\uace0 unique\ub97c \uba85\uc2dc\ud558\uc5ec query \uad6c\uc870\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \uc778\uc790\uc778 unique\uac00 false\uc774\uba74 \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\uba70, true\uc774\uba74 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uc5ec unique bkey\ub9cc\uc744 \uc870\ud68c\ud55c\ub2e4. memcached_return_t memcached_bop_smget_query_init(memcached_bop_query_st *ptr, const uint64_t bkey_from, const uint64_t bkey_to, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool unique); memcached_return_t memcached_bop_ext_smget_query_init(memcached_bop_query_st *ptr, const unsigned char *bkey_from, size_t bkey_from_length, const unsigned char *bkey_to, size_t bkey_to_length, memcached_coll_eflag_filter_st *eflag_filter, size_t count, bool unique); Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: \uc5ec\ub7ec B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc74c. MEMCACHED_DUPLICATED: \uc5ec\ub7ec B+tree\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098 \uc911\ubcf5\ub41c bkey\uac00 \uc874\uc7ac\ud568. MEMCACHED_TRIMMED (\uae30\uc874 sort-merge \uc870\ud68c\uc5d0 \ud55c\uc815) \uc815\uc0c1\uc801\uc73c\ub85c element\ub97c \uc870\ud68c\ud558\uc600\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 \ud2b9\uc815 B+tree\uc758 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, \ud574\ub2f9 B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. MEMCACHED_DUPLICATED_TRIMMED (\uae30\uc874 sort-merge \uc870\ud68c\uc5d0 \ud55c\uc815) MEMCACHED_DUPLICATED \uc0c1\ud0dc\uc640MEMCACHED_TRIMMED \uc0c1\ud0dc\uac00 \ubaa8\ub450 \uc874\uc7ac. not MEMCACHED_SUCCESS MEMCACHED_OUT_OF_RANGE (\uae30\uc874 sort-merge \uc870\ud68c\uc5d0 \ud55c\uc815) \uc8fc\uc5b4\uc9c4 \uc870\ud68c \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc73c\ub098, \uc870\ud68c \ubc94\uc704\uac00 overflow \uc815\ucc45\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\ub294 \uc601\uc5ed\uc5d0 \uac78\uccd0 \uc788\uc74c. \uc989, B+tree \ud06c\uae30 \uc81c\ud55c\uc73c\ub85c \uc778\ud574 \uc0ad\uc81c\ub418\uc5b4 \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 element\uac00 \uc5b4\ub518\uac00(DB)\uc5d0 \uc874\uc7ac\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \ub73b\ud568. MEMCACHED_TYPE_MISMATCH: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uac00 B+tree\uac00 \uc544\ub2d8. MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ud574\ub2f9 B+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984. MEMCACHED_ATTR_MISMATCH: smget\uc5d0 \ucc38\uc5ec\ud558\ub294 B+tree\ub4e4\uc758 attribute\uac00 \uc11c\ub85c \ub2e4\ub984. \ucc38\uace0\ub85c smget\uc5d0 \ucc38\uc5ec\ud558\ub294 B+tree\ub4e4\uc740 maxcount, maxbkeyrange, overflowaction\uc774 \ubaa8\ub450 \ub3d9\uc77c\ud574\uc57c \ud568. arcus-memcached 1.11.3 \uc774\ud6c4\ub85c attribute \ud1b5\uc77c \uc81c\uc57d\uc774 \uc0ac\ub77c\uc9d0. Sort-merge \uc870\ud68c \uacb0\uacfc\ub294 memcached_bop_smget_result_t \uad6c\uc870\uccb4\ub85c \ubc1b\uc544\uc628\ub2e4. Sort-merge \uc870\ud68c\ud558\uae30 \uc804\uc5d0 memcached_bop_smget_result_t \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud558\uc5ec \uc0ac\uc6a9\ud574\uc57c \ud558\uace0, memcached_bop_smget_result_t \uad6c\uc870\uccb4\uc5d0\uc11c \uc870\ud68c \uacb0\uacfc\ub97c \ubaa8\ub450 \uc5bb\uc740 \ud6c4\uc5d0\ub294 \ub2e4\uc2dc \ubc18\ud658\ud558\uc5ec\uc57c \ud55c\ub2e4. \uc774\ub97c \uc218\ud589\ud558\ub294 \ub450 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_bop_smget_result_st *memcached_bop_smget_result_create(const memcached_st *ptr, memcached_bop_smget_result_st *result) void memcached_bop_smget_result_free(memcached_bop_smget_result_st *result) \ud568\uc218 \uae30\ub2a5 memcached_bop_smget_result_create result \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. result\uc5d0 NULL\uc744 \ub123\uc73c\uba74 \uc0c8\ub85c allocate \ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. memcached_bop_smget_result_free result \uad6c\uc870\uccb4\ub97c \ucd08\uae30\ud654\ud558\uace0 allocate \ub41c \uacbd\uc6b0 free \ud55c\ub2e4. memcached_bop_smget_result_t \uad6c\uc870\uccb4\uc5d0\uc11c \uc870\ud68c \uacb0\uacfc\ub97c \uc5bb\uae30 \uc704\ud55c \ud568\uc218\ub4e4\uc740 \uc544\ub798\uc640 \uac19\ub2e4. size_t memcached_bop_smget_result_get_count(memcached_bop_smget_result_st *result) const char * memcached_bop_smget_result_get_key(memcached_bop_smget_result_st *result, size_t index) uint64_t memcached_bop_smget_result_get_bkey(memcached_bop_smget_result_st *result, size_t index) memcached_hexadecimal_st *memcached_bop_smget_result_get_bkey_ext(memcached_bop_smget_result_st *result, size_t index) memcached_hexadecimal_st *memcached_bop_smget_result_get_eflag(memcached_bop_smget_result_st *result, size_t index) const char * memcached_bop_smget_result_get_value(memcached_bop_smget_result_st *result, size_t index) size_t memcached_bop_smget_result_get_value_length(memcached_bop_smget_result_st *result, size_t index) size_t memcached_bop_smget_result_get_missed_key_count(memcached_bop_smget_result_st *result) const char * memcached_bop_smget_result_get_missed_key(memcached_bop_smget_result_st *result, size_t index) size_t memcached_bop_smget_result_get_missed_key_length(memcached_bop_smget_result_st *result, size_t index) memcached_return_t memcached_coll_smget_result_get_missed_cause(memcached_coll_smget_result_st *result, size_t index) size_t memcached_coll_smget_result_get_trimmed_key_count(memcached_coll_smget_result_st *result) const char * memcached_coll_smget_result_get_trimmed_key(memcached_coll_smget_result_st *result, size_t index) size_t memcached_coll_smget_result_get_trimmed_key_length(memcached_coll_smget_result_st *result, size_t index) uint64_t memcached_coll_smget_result_get_trimmed_bkey(memcached_coll_smget_result_st *result, size_t index) memcached_hexadecimal_st *memcached_coll_smget_result_get_trimmed_bkey_ext(memcached_coll_smget_result_st *result, size_t index) \ud568\uc218 \uae30\ub2a5 memcached_bop_smget_result_get_count \uc870\ud68c \uacb0\uacfc\uc758 element \uac1c\uc218 memcached_bop_smget_result_get_key Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 key memcached_bop_smget_result_get_bkey Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 unsigned int bkey memcached_bop_smget_result_get_bkey_ext Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 byte array bkey memcached_bop_smget_result_get_eflag Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 eflag memcached_bop_smget_result_get_value Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 value memcached_bop_smget_result_get_value_length Element array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 element\uc758 value \uae38\uc774 memcached_bop_smget_result_get_missed_key_count \uc870\ud68c \uacb0\uacfc\uc758 missed key \uac1c\uc218 memcached_bop_smget_result_get_missed_key Missed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key memcached_bop_smget_result_get_missed_key_length Missed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key \uae38\uc774 memcached_bop_smget_result_get_missed_cause \ud574\ub2f9 missed key\uac00 miss\ub41c \uc6d0\uc778 (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_key_count \uc870\ud68c \uacb0\uacfc\uc758 trimmed key \uac1c\uc218 (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_key_key Trimmed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_key_length Trimmed key array\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 key \uae38\uc774 (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_bkey \ud574\ub2f9 trimmed key\uc758 \ub9c8\uc9c0\ub9c9 unsigned int bkey (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) memcached_bop_smget_result_get_trimmed_bkey_ext \ud574\ub2f9 trimmed key\uc758 \ub9c8\uc9c0\ub9c9 byte array bkey (\uc2e0\uaddc sort-merge \uc870\ud68c \ud55c\uc815) B+tree element sort-merge \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_element_smget(memcached_st *memc) { memcached_return_t rc; const char *keys[100]; size_t key_length[100]; uint32_t bkeys[100]; srand(time(NULL)); // 100\uac1c\uc758 key\uc640 \ubb34\uc791\uc704\ub85c \uc0dd\uc131\ud55c bkey\ub97c \uc900\ube44\ud55c\ub2e4. for (int i=0; i<100; i++) { keys[i] = (char *)malloc(255); key_length[i] = (size_t) snprintf((char *)keys[i], 255, \"test:ext_ascending_order_id_%d\", i); // Integer -> Hexadecimal \ubcc0\ud658\uc744 Big-endian\uc5d0 \ub9de\ucd94\uae30\ub85c \ud558\uc790. bkeys[i] = htonl(rand()); } memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, 0, 600, 1000); // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. for (int i=0; i<100; i++) { uint32_t bkey = bkeys[i]; uint32_t eflag = 0; char value[64]; size_t value_length = snprintf(value, 64, \"value_id%d_bkey%u\", i, bkey); // \uc5ec\uae30\uc11c\ub294 bkey\uc640 eflag\ub97c uint32_t \ud615\ud0dc\uc758 \uc815\uc218(big-endian)\ub97c \uce90\uc2a4\ud305\ud558\uc5ec \ub118\uaca8 \uc8fc\uace0 \uc788\uc74c\uc744 \ucc38\uace0\ud558\uc790. rc = memcached_bop_ext_insert(memc, keys[i], key_length[i], (unsigned char *)&bkey, sizeof(uint32_t), (unsigned char *)&eflag, sizeof(eflag), value, value_length, &attributes); } memcached_bop_smget_result_st smget_result_object; memcached_bop_smget_result_st *smget_result = memcached_bop_smget_result_create(memc, &smget_result_object); uint32_t bkey_from = 0; uint32_t bkey_to = htonl(UINT32_MAX); // byte array bkey\uc5d0 \ub300\ud574 \uc911\ubcf5 bkey \ud5c8\uc6a9\ud55c \ubc94\uc704 \uac80\uc0c9 \ucffc\ub9ac\ub97c \uc0dd\uc131\ud55c\ub2e4. memcached_bop_query_st query; memcached_bop_ext_smget_query_init(memc, &query, (unsigned char *)&bkey_from, sizeof(uint32_t), (unsigned char *)&bkey_to, sizeof(uint32_t), NULL, 100, false); // smget\uc744 \uc218\ud589\ud55c\ub2e4. rc = memcached_bop_smget(memc, keys, key_length, 100, &query, smget_result); assert(MEMCACHED_END == memcached_get_last_response_code(memc)); aseert(100 == memcached_bop_smget_result_get_count(smget_result)); aseert(0 == memcached_bop_smget_result_get_missed_key_count(smget_result)); aseert(0 == memcached_bop_smget_result_get_trimmed_key_count(smget_result)); if (rc == MEMCACHED_SUCCESS) { uint32_t last_bkey = bkey_from; for (uint32_t i=0; i<memcached_bop_smget_result_get_count(smget_result); i++) { memcached_hexadecimal_st bkey = smget_result->sub_keys[i].bkey_ext; char bkey_buf[64]; memcached_hexadecimal_to_str(&bkey, bkey_buf, 64); char eflag_buf[64]; memcached_hexadecimal_to_str(&smget_result->eflags[i], eflag_buf, 64); char *rvalue = smget_result->values[i].string; fprintf(stderr, \"key[%s], bkey[%s], eflag[%s] = %s\\n\", smget_result->keys[i].string, bkey_buf, eflag_buf, rvalue); } } else { fprintf(stderr, \"memcached_bop_smget() failed, reason=%s\\n\", memcached_strerror(NULL, rc)); return; } memcached_bop_smget_result_free(smget_result); for (int i=0; i<100; i++) { free((void*)keys[i]); } }","title":"6-15. B+tree Element Sort-Merge \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-16-btree-element","text":"B+Tree element \uc21c\uc704\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. memcached_return_t memcached_bop_find_position(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_order_t order, size_t *position) memcached_return_t memcached_bop_ext_find_position(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_order_t order, size_t *position) key, key_length: B+Tree item\uc758 key bkey, bkey_length: \uc21c\uc704\ub97c \uc870\ud68c\ud560 element\uc758 bkey order : \uc21c\uc704 \uae30\uc900 MEMCACHED_COLL_ORDER_ASC: bkey \uac12\uc758 \uc624\ub984\ucc28\uc21c MEMCACHED_COLL_ORDER_DESC: bkey \uac12\uc758 \ub0b4\ub9bc\ucc28\uc21c position: element \uc21c\uc704\uac00 \ubc18\ud658\ub418\ub294 \uc778\uc790 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - MEMCACHED_SUCCESS - MEMCACHED_SUCCESS: \uc8fc\uc5b4\uc9c4 key\uc5d0\uc11c bkey\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element \uc21c\uc704\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568 - not MEMCACHED_SUCCESS - MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree item\uc774 \uc5c6\uc74c - MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element\uac00 \uc5c6\uc74c - MEMCACHED_TYPE_MISMATCH: \ud574\ub2f9 item\uc774 B+Tree\uac00 \uc544\ub2d8 - MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 - MEMCACHED_UNREADABLE: \ud574\ub2f9 key item\uc774 unreadable \uc0c1\ud0dc\uc784 - MEMCACHED_NOT_SUPPORTED: \ud604\uc7ac \uc21c\uc704 \uc870\ud68c \uc5f0\uc0b0\uc774 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc74c. B+Tree element \uc21c\uc704\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_find_position(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; memcached_return_t rc; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc785\ub825\ud55c\ub2e4. rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 0, NULL, 0, \"value0\", strlen(\"value0\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_CREATED_STORED == memcached_get_last_response_code(memc)); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, NULL, 0, \"value1\", strlen(\"value1\"), &attributes); assert(MEMCACHED_SUCCESS == rc); assert(MEMCACHED_STORED == memcached_get_last_response_code(memc)); // \uc21c\uc704\ub97c \uc870\ud68c\ud55c\ub2e4. int position = -1; rc = memcached_bop_find_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, MEMCACHED_COLL_ORDER_ASC, &position); assert(1 == position); rc = memcached_bop_find_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), 1, MEMCACHED_COLL_ORDER_DESC, &position); assert(0 == position); }","title":"6-16. B+Tree Element \uc21c\uc704 \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-17-btree-element","text":"B+Tree\uc5d0\uc11c \uc21c\uc704 \ubc94\uc704\ub85c element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. memcached_return_t memcached_bop_get_by_position(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_order_t order, size_t from_position, size_t to_position, memcached_coll_result_st *result); key, key_length: B+Tree item\uc758 key order : \uc21c\uc704 \uae30\uc900 MEMCACHED_COLL_ORDER_ASC: bkey \uac12\uc758 \uc624\ub984\ucc28\uc21c MEMCACHED_COLL_ORDER_DESC: bkey \uac12\uc758 \ub0b4\ub9bc\ucc28\uc21c from_position, to_position: \uc21c\uc704\uc758 \ubc94\uc704\ub85c \uc2dc\uc791 \uc21c\uc704\uc640 \ub05d \uc21c\uc704 result: \uc870\ud68c \uacb0\uacfc\ub97c \ub2f4\ub294 result \uad6c\uc870\uccb4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - MEMCACHED_SUCCESS - MEMCACHED_SUCCESS: \uc8fc\uc5b4\uc9c4 \uc21c\uc704 \uae30\uc900\uacfc \uc21c\uc704 \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub4e4\uc744 \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568 - not MEMCACHED_SUCCESS - MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree item\uc774 \uc5c6\uc74c - MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 \uc21c\uc704 \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element\uac00 \uc5c6\uc74c - MEMCACHED_TYPE_MISMATCH: \ud574\ub2f9 item\uc774 B+Tree\uac00 \uc544\ub2d8 - MEMCACHED_UNREADABLE: \ud574\ub2f9 key item\uc774 unreadable \uc0c1\ud0dc\uc784 - MEMCACHED_NOT_SUPPORTED: \ud604\uc7ac \uc21c\uc704 \uc870\ud68c \uc5f0\uc0b0\uc774 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc74c. B+Tree\uc5d0\uc11c \uc21c\uc704 \ubc94\uc704\ub85c element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_get_by_position(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; char buffer[16]; size_t buffer_len; memcached_return_t rc; memcached_coll_result_st *result; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // bkey \ubc94\uc704\uac00 0 ~ 999\uc778 1000\uac1c element\ub97c \uac00\uc9c4 b+tree \uc0dd\uc131. for (uint32_t bkey=0; bkey<maxcount; bkey++) { buffer_len= snprintf(buffer, 15, \"value%u\", bkey); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), bkey, NULL, 0, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc624\ub984\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_ASC, 99, 99, result); assert(MEMCACHED_SUCCESS == rc); assert(1 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", (99+i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); // \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_DESC, 99, 99, result); assert(MEMCACHED_SUCCESS == rc); assert(1 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", ((maxcount-1)-99-i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); // \uc624\ub984\ucc28\uc21c\uc73c\ub85c 101\ubc88\uc9f8\ubd80\ud130 200\ubc88\uc9f8\uae4c\uc9c0\uc758 element\ub4e4\uc744 \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_ASC, 100, 199, result); assert(MEMCACHED_SUCCESS == rc); assert(100 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", (100+i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); // \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c 101\ubc88\uc9f8\ubd80\ud130 200\ubc88\uc9f8\uae4c\uc9c0\uc758 element\ub4e4\uc744 \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); rc= memcached_bop_get_by_position(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), MEMCACHED_COLL_ORDER_DESC, 100, 199, result); assert(MEMCACHED_SUCCESS == rc); assert(100 == memcached_coll_result_get_count(result)); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { snprintf(buffer, 15, \"value%u\", ((maxcount-1)-100-i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); } memcached_coll_result_free(result); }","title":"6-17. B+Tree \uc21c\uc704 \uae30\ubc18\uc758 Element \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/6.-btree-API/#6-17-btree-element_1","text":"B+Tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ub300\ud55c \uc21c\uc704\ub97c \uc870\ud68c\ud558\uba74\uc11c \uadf8 bkey\uc758 element\ub97c \ud3ec\ud568\ud558\uc5ec \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01 N\uac1c\uc758 elements\ub97c \ud568\uaed8 \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uc804\uc790\ub294 8\ubc14\uc774\ud2b8 unsigned integer \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc774\uace0, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_bop_find_position_with_get(memcached_st *ptr, const char *key, size_t key_length, const uint64_t bkey, memcached_coll_order_t order, size_t count, memcached_coll_result_st *result); memcached_return_t memcached_bop_ext_find_position_with_get(memcached_st *ptr, const char *key, size_t key_length, const unsigned char *bkey, size_t bkey_length, memcached_coll_order_t order, size_t count, memcached_coll_result_st *result); key, key_length: B+Tree item\uc758 key bkey, bkey_length: \uc21c\uc704\ub97c \uc870\ud68c\ud560 element\uc758 bkey order : \uc21c\uc704 \uae30\uc900 MEMCACHED_COLL_ORDER_ASC: bkey \uac12\uc758 \uc624\ub984\ucc28\uc21c MEMCACHED_COLL_ORDER_DESC: bkey \uac12\uc758 \ub0b4\ub9bc\ucc28\uc21c count : \ucc3e\uc740 element\uc758 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01\uac01 \uc870\ud68c\ud560 element \uac1c\uc218 result: \uc870\ud68c\ud55c \uc21c\uc704\uc640 element\ub97c \ub2f4\ub294 result \uad6c\uc870\uccb4 Response code\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - MEMCACHED_SUCCESS - MEMCACHED_SUCCESS: \uc21c\uc704 \uc870\ud68c\uc640 element \uc870\ud68c\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc218\ud589\ud568. - not MEMCACHED_SUCCESS - MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree item\uc774 \uc5c6\uc74c - MEMCACHED_NOTFOUND_ELEMENT: \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 B+Tree element\uac00 \uc5c6\uc74c - MEMCACHED_TYPE_MISMATCH: \ud574\ub2f9 item\uc774 B+Tree\uac00 \uc544\ub2d8 - MEMCACHED_BKEY_MISMATCH: \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 - MEMCACHED_UNREADABLE: \ud574\ub2f9 key item\uc774 unreadable \uc0c1\ud0dc\uc784 - MEMCACHED_NOT_SUPPORTED: \ud604\uc7ac \uc21c\uc704 \uc870\ud68c \uc5f0\uc0b0\uc774 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc74c. \uc815\uc0c1 \uc218\ud589\ub418\uc5c8\uc744 \uacbd\uc6b0, result \uad6c\uc870\uccb4\ub294 \uc544\ub798\uc758 \uacb0\uacfc\ub97c \uac00\uc9c4\ub2e4. - \uc870\ud68c\ub41c element \uacb0\uacfc - bkey \uac12\uc758 order \uae30\uc900\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc21c\uc11c\ub300\ub85c element\ub4e4\uc774 \ubcf4\uad00\ub41c\ub2e4. - \uac01 element\uc758 bkey \uc21c\uc704 - memcached_coll_result_get_position(result, index) API\ub97c \ud1b5\ud574 \uc870\ud68c\ud55c\ub2e4. - btree \ub0b4\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc758 \uc21c\uc704 - memcached_coll_result_get_btree_position(result) API\ub97c \ud1b5\ud574 \uc870\ud68c\ud55c\ub2e4. - result\uc5d0 \ubcf4\uad00\ub41c element\ub4e4\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc758 element \uc704\uce58 - memcached_coll_result_get_result_position(result) API\ub97c \ud1b5\ud574 \uc870\ud68c\ud55c\ub2e4. B+Tree\uc5d0\uc11c \ud2b9\uc815 bkey\uc5d0 \ub300\ud55c \uc21c\uc704 \ubc0f element \uc870\ud68c\uc640 \ud568\uaed8 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c N\uac1c element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. void arcus_btree_find_position_with_get(memcached_st *memc) { uint32_t flags= 10; uint32_t exptime= 600; uint32_t maxcount= 1000; char buffer[16]; size_t buffer_len; memcached_return_t rc; memcached_coll_result_st *result; memcached_coll_create_attrs_st attributes; memcached_coll_create_attrs_init(&attributes, flags, exptime, maxcount); // bkey \ubc94\uc704\uac00 0 ~ 999\uc778 1000\uac1c element\ub97c \uac00\uc9c4 b+tree \uc0dd\uc131. for (uint32_t bkey=0; bkey<maxcount; bkey++) { buffer_len= snprintf(buffer, 15, \"value%u\", bkey); rc= memcached_bop_insert(memc, \"btree:a_btree\", strlen(\"btree:a_btree\"), bkey, NULL, 0, buffer, buffer_len, &attributes); assert(MEMCACHED_SUCCESS == rc); } // \uc624\ub984\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 bkey\uc758 \uc21c\uc704 \ubc0f element\uc640 \ud568\uaed8 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01 10\uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); bkdata_len= snprintf(bkdata, 15, \"%04u\", 99); rc= memcached_bop_ext_find_position_with_get(memc, test_literal_param(\"btree:a_btree\"), (unsigned char *)bkdata, bkdata_len, MEMCACHED_COLL_ORDER_ASC, 10, result); assert(rc == MEMCACHED_SUCCESS); assert(21 == memcached_coll_result_get_count(result)); assert(99 == memcached_coll_result_get_btree_position(result)); assert(10 == memcached_coll_result_get_result_position(result)); if (rc == MEMCACHED_SUCCESS) { size_t position = (99-10); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { assert(position == memcached_coll_result_get_position(result, i)); snprintf(buffer, 15, \"value%u\", ((99-10)+i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); position += 1; } } memcached_coll_result_free(result); // \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c 100\ubc88\uc9f8 bkey\uc758 \uc21c\uc704 \ubc0f element\uc640 \ud568\uaed8 \uc55e\ub4a4 \uc591\ubc29\ud5a5\uc73c\ub85c \uac01 10\uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. result = memcached_coll_result_create(memc, NULL); bkdata_len= snprintf(bkdata, 15, \"%04u\", ((maxcount-1)-99)); rc= memcached_bop_ext_find_position_with_get(memc, test_literal_param(\"btree:a_btree\"), (unsigned char *)bkdata, bkdata_len, MEMCACHED_COLL_ORDER_DESC, 10, result); assert(rc == MEMCACHED_SUCCESS); assert(21 == memcached_coll_result_get_count(result)); assert(99 == memcached_coll_result_get_btree_position(result)); assert(10 == memcached_coll_result_get_result_position(result)); if (rc == MEMCACHED_SUCCESS) { size_t position = (99-10); for (uint32_t i= 0; i < memcached_coll_result_get_count(result); i++) { assert(position == memcached_coll_result_get_position(result, i)); snprintf(buffer, 15, \"value%u\", ((maxcount-1)-(99-10)-i)); assert(0 == strcmp(buffer, memcached_coll_result_get_value(result, i))); position += 1; } } memcached_coll_result_free(result); }","title":"6-17. B+Tree \uc21c\uc704\uc640 Element \ub3d9\uc2dc \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/7.-attribute-API/","text":"Item attributes\ub294 \uac01 cache item\uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc758\ubbf8\ud55c\ub2e4. Item attributes\uc758 \uae30\ubcf8 \uc124\uba85\uc740 Arcus cache server\uc758 item attributes \ubd80\ubd84 \uc744 \ucc38\uace0\ud558\uae38 \ubc14\ub780\ub2e4. Item attributes\ub97c \ubcc0\uacbd\ud558\uac70\ub098 \uc870\ud68c\ud558\ub294 \ud568\uc218\ub4e4\uc744 \uc124\uba85\ud55c\ub2e4. 7-1. Attribute \ubcc0\uacbd \uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_set_attrs(memcached_st *ptr, const char *key, size_t key_length, const memcached_coll_attrs_st *attrs); Return codes\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Attribute \uc815\ubcf4\ub97c \uc131\uacf5\uc801\uc73c\ub85c \ubcc0\uacbd\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_ATTR_ERROR_BAD_VALUE: \uc798\ubabb\ub41c \uc124\uc815\uac12\uc744 \uc9c0\uc815\ud558\uc600\uc74c. \ubcc0\uacbd\ud560 attributes \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 memcached_coll_attrs_st \uad6c\uc870\uccb4\ub294 \uc544\ub798 API\ub97c \ud1b5\ud574 \ucd08\uae30\ud654\ud558\uace0 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_attrs_init(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_set_flags(memcached_coll_attrs_st *attrs, uint32_t flags); memcached_return_t memcached_coll_attrs_set_expiretime(memcached_coll_attrs_st *attrs, uint32_t expiretime); memcached_return_t memcached_coll_attrs_set_overflowaction(memcached_coll_attrs_st *attrs, memcached_coll_overflowaction_t overflowaction); memcached_return_t memcached_coll_attrs_set_maxcount(memcached_coll_attrs_st *attrs, uint32_t maxcount); memcached_return_t memcached_coll_attrs_set_maxbkeyrange(memcached_coll_attrs_st *attrs, uint32_t maxbkeyrange); memcached_return_t memcached_coll_attrs_set_maxbkeyrange_by_byte(memcached_coll_attrs_st *attrs, unsigned char *maxbkeyrange, size_t maxbkeyrange_size); memcached_return_t memcached_coll_attrs_set_readable(memcached_coll_attrs_st *attrs); memcached_coll_attrs_init : memcached_coll_sttrs_st \uad6c\ucd08\uccb4\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. memcached_coll_attrs_set_flags : \ubcc0\uacbd\ud560 Flag \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_expiretime : \ubcc0\uacbd\ud560 Expire time \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_overflowaction : \ubcc0\uacbd\ud560 Overflowaction\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_maxcount : \ubcc0\uacbd\ud560 maxcount \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_maxbkeyrange : \ubcc0\uacbd\ud560 maxbkeyrange\ub97c \uc124\uc815\ud55c\ub2e4. (B+tree\uc5d0\ub9cc \uc801\uc6a9 \uac00\ub2a5) memcached_coll_attrs_set_maxbkeyrange_by_byte : \ubcc0\uacbd\ud560 maxbkeyrange\ub97c \uc124\uc815\ud55c\ub2e4. (B+tree\uc5d0\ub9cc \uc801\uc6a9 \uac00\ub2a5) memcached_coll_attrs_set_readable : Attribute\ub97c Readable \uc0c1\ud0dc\ub85c \ubcc0\uacbd\ud558\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4. 7-2. Attribute \uc870\ud68c \uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_get_attrs(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_attrs_st *attrs); Response codes\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Attribute \uc815\ubcf4\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. \uc870\ud68c\ud55c attributes\uc5d0\uc11c \uc544\ub798\uc758 \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01 attribute\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. uint32_t memcached_coll_attrs_get_flags(memcached_coll_attrs_st *attrs); uint32_t memcached_coll_attrs_get_expiretime(memcached_coll_attrs_st *attrs); memcached_coll_overflowaction_t memcached_coll_attrs_get_overflowaction(memcached_coll_attrs_st *attrs); uint32_t memcached_coll_attrs_get_maxcount(memcached_coll_attrs_st *attrs); bool memcached_cool_attrs_is_readable(memcached_coll_attrs_st *attrs); uint32_t memcached_coll_attrs_get_maxbkeyrange(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_get_maxbkeyrange_by_byte(memcached_coll_attrs_st *attrs, unsigned char **maxbkeyrange, size_t maxbkeyrange_size); uint32_t memcached_coll_attrs_get_minbkey(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_get_minbkey_by_byte(memcached_coll_attrs_st *attrs, unsigned char **bkey, size_t *size); uint32_t memcached_coll_attrs_get_maxbkey(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_get_maxbkey_by_byte(memcached_coll_attrs_st *attrs, unsigned char **bkey, size_t *size); uint32_t memcached_coll_attrs_get_trimmed(memcached_coll_attrs_st *attrs); memcached_coll_attrs_get_flags : Flag \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_expiretime : Expire time \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_overflowaction : Overflowaction\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxcount : Maxcount \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_cool_attrs_is_readable : Attribute\uac00 readable \uc0c1\ud0dc\uc778\uc9c0 \uc544\ub2cc\uc9c0\ub97c \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxbkeyrange : Maxbkeyrange \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxbkeyrange_by_byte : Maxbkeyrange \uac12\uc744 \uc5bb\ub294\ub2e4. (byte \ud0c0\uc785) memcached_coll_attrs_get_minbkey : Min bkey \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_minbkey_by_byte : Min bkey \uac12\uc744 \uc5bb\ub294\ub2e4. (byte \ud0c0\uc785) memcached_coll_attrs_get_maxbkey : Max bkey \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxbkey_by_byte : Max bkey \uac12\uc744 \uc5bb\ub294\ub2e4. (byte \ud0c0\uc785) memcached_coll_attrs_get_trimmed : btree\uc758 trimmed \uc5ec\ubd80\ub97c \uc5bb\ub294\ub2e4.","title":"7. attribute API"},{"location":"arcus-c-client/1.10-(latest)/7.-attribute-API/#7-1-attribute","text":"\uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_set_attrs(memcached_st *ptr, const char *key, size_t key_length, const memcached_coll_attrs_st *attrs); Return codes\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Attribute \uc815\ubcf4\ub97c \uc131\uacf5\uc801\uc73c\ub85c \ubcc0\uacbd\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. MEMCACHED_ATTR_ERROR_BAD_VALUE: \uc798\ubabb\ub41c \uc124\uc815\uac12\uc744 \uc9c0\uc815\ud558\uc600\uc74c. \ubcc0\uacbd\ud560 attributes \uc815\ubcf4\ub97c \uac00\uc9c0\ub294 memcached_coll_attrs_st \uad6c\uc870\uccb4\ub294 \uc544\ub798 API\ub97c \ud1b5\ud574 \ucd08\uae30\ud654\ud558\uace0 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. memcached_return_t memcached_coll_attrs_init(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_set_flags(memcached_coll_attrs_st *attrs, uint32_t flags); memcached_return_t memcached_coll_attrs_set_expiretime(memcached_coll_attrs_st *attrs, uint32_t expiretime); memcached_return_t memcached_coll_attrs_set_overflowaction(memcached_coll_attrs_st *attrs, memcached_coll_overflowaction_t overflowaction); memcached_return_t memcached_coll_attrs_set_maxcount(memcached_coll_attrs_st *attrs, uint32_t maxcount); memcached_return_t memcached_coll_attrs_set_maxbkeyrange(memcached_coll_attrs_st *attrs, uint32_t maxbkeyrange); memcached_return_t memcached_coll_attrs_set_maxbkeyrange_by_byte(memcached_coll_attrs_st *attrs, unsigned char *maxbkeyrange, size_t maxbkeyrange_size); memcached_return_t memcached_coll_attrs_set_readable(memcached_coll_attrs_st *attrs); memcached_coll_attrs_init : memcached_coll_sttrs_st \uad6c\ucd08\uccb4\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. memcached_coll_attrs_set_flags : \ubcc0\uacbd\ud560 Flag \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_expiretime : \ubcc0\uacbd\ud560 Expire time \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_overflowaction : \ubcc0\uacbd\ud560 Overflowaction\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_maxcount : \ubcc0\uacbd\ud560 maxcount \uac12\uc744 \uc124\uc815\ud55c\ub2e4. memcached_coll_attrs_set_maxbkeyrange : \ubcc0\uacbd\ud560 maxbkeyrange\ub97c \uc124\uc815\ud55c\ub2e4. (B+tree\uc5d0\ub9cc \uc801\uc6a9 \uac00\ub2a5) memcached_coll_attrs_set_maxbkeyrange_by_byte : \ubcc0\uacbd\ud560 maxbkeyrange\ub97c \uc124\uc815\ud55c\ub2e4. (B+tree\uc5d0\ub9cc \uc801\uc6a9 \uac00\ub2a5) memcached_coll_attrs_set_readable : Attribute\ub97c Readable \uc0c1\ud0dc\ub85c \ubcc0\uacbd\ud558\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4.","title":"7-1. Attribute \ubcc0\uacbd"},{"location":"arcus-c-client/1.10-(latest)/7.-attribute-API/#7-2-attribute","text":"\uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. memcached_return_t memcached_get_attrs(memcached_st *ptr, const char *key, size_t key_length, memcached_coll_attrs_st *attrs); Response codes\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. MEMCACHED_SUCCESS MEMCACHED_END: Attribute \uc815\ubcf4\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ud568. not MEMCACHED_SUCCESS MEMCACHED_NOTFOUND: \uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c. \uc870\ud68c\ud55c attributes\uc5d0\uc11c \uc544\ub798\uc758 \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01 attribute\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. uint32_t memcached_coll_attrs_get_flags(memcached_coll_attrs_st *attrs); uint32_t memcached_coll_attrs_get_expiretime(memcached_coll_attrs_st *attrs); memcached_coll_overflowaction_t memcached_coll_attrs_get_overflowaction(memcached_coll_attrs_st *attrs); uint32_t memcached_coll_attrs_get_maxcount(memcached_coll_attrs_st *attrs); bool memcached_cool_attrs_is_readable(memcached_coll_attrs_st *attrs); uint32_t memcached_coll_attrs_get_maxbkeyrange(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_get_maxbkeyrange_by_byte(memcached_coll_attrs_st *attrs, unsigned char **maxbkeyrange, size_t maxbkeyrange_size); uint32_t memcached_coll_attrs_get_minbkey(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_get_minbkey_by_byte(memcached_coll_attrs_st *attrs, unsigned char **bkey, size_t *size); uint32_t memcached_coll_attrs_get_maxbkey(memcached_coll_attrs_st *attrs); memcached_return_t memcached_coll_attrs_get_maxbkey_by_byte(memcached_coll_attrs_st *attrs, unsigned char **bkey, size_t *size); uint32_t memcached_coll_attrs_get_trimmed(memcached_coll_attrs_st *attrs); memcached_coll_attrs_get_flags : Flag \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_expiretime : Expire time \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_overflowaction : Overflowaction\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxcount : Maxcount \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_cool_attrs_is_readable : Attribute\uac00 readable \uc0c1\ud0dc\uc778\uc9c0 \uc544\ub2cc\uc9c0\ub97c \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxbkeyrange : Maxbkeyrange \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxbkeyrange_by_byte : Maxbkeyrange \uac12\uc744 \uc5bb\ub294\ub2e4. (byte \ud0c0\uc785) memcached_coll_attrs_get_minbkey : Min bkey \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_minbkey_by_byte : Min bkey \uac12\uc744 \uc5bb\ub294\ub2e4. (byte \ud0c0\uc785) memcached_coll_attrs_get_maxbkey : Max bkey \uac12\uc744 \uc5bb\ub294\ub2e4. memcached_coll_attrs_get_maxbkey_by_byte : Max bkey \uac12\uc744 \uc5bb\ub294\ub2e4. (byte \ud0c0\uc785) memcached_coll_attrs_get_trimmed : btree\uc758 trimmed \uc5ec\ubd80\ub97c \uc5bb\ub294\ub2e4.","title":"7-2. Attribute \uc870\ud68c"},{"location":"arcus-c-client/1.10-(latest)/8.-other-API/","text":"Flush Arcus\ub294 cache server\uc5d0 \uc788\ub294 \ubaa8\ub4e0 items \ub610\ub294 \ud2b9\uc815 prefix\uc758 items\uc744 flush(or delete)\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc804\uc790\uc758 \ud568\uc218\ub294 \ubaa8\ub4e0 items\uc744 flush\ud558\uace0 \ud6c4\uc790\uc758 \ud568\uc218\ub294 \ud2b9\uc815 prefix\uc758 items\uc744 flush\ud55c\ub2e4. memcached_return_t memcached_flush(memcached_st *ptr, time_t expiration); memcached_return_t memcached_flush_by_prefix(memcached_st *ptr, const char *prefix, size_t prefix_length, time_t expiration); prefix, prefix_length: flush\ud560 prefix \uc815\ubcf4 expiration: delayed flush\ud560 \uc2dc\uc5d0 \uc9c0\uc5f0\ud560 \uc2dc\uac04(\ub2e8\uc704: \ucd08)\ub97c \ub098\ud0c0\ub0b8\ub2e4. \ud2b9\uc815 prefix\uc758 \ubaa8\ub4e0 items\uc744 \uc0ad\uc81c\ud558\ubbc0\ub85c \uadf8 \uc0ac\uc6a9\uc5d0 \uc8fc\uc758\ud558\uc5ec\uc57c \ud55c\ub2e4. \ud2b9\ud788, prefix\ub97c \uba85\uc2dc\ud558\uc9c0 \uc54a\ub294 flush \ud568\uc218\ub294 cache node\uc758 \ubaa8\ub4e0 items\uc744 \uc0ad\uc81c\ud558\ubbc0\ub85c \uacf5\uc6a9\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 cloud\uc5d0\uc120 \uac01\ubcc4\ud788 \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4.","title":"8. other API"},{"location":"arcus-c-client/1.10-(latest)/8.-other-API/#flush","text":"Arcus\ub294 cache server\uc5d0 \uc788\ub294 \ubaa8\ub4e0 items \ub610\ub294 \ud2b9\uc815 prefix\uc758 items\uc744 flush(or delete)\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc804\uc790\uc758 \ud568\uc218\ub294 \ubaa8\ub4e0 items\uc744 flush\ud558\uace0 \ud6c4\uc790\uc758 \ud568\uc218\ub294 \ud2b9\uc815 prefix\uc758 items\uc744 flush\ud55c\ub2e4. memcached_return_t memcached_flush(memcached_st *ptr, time_t expiration); memcached_return_t memcached_flush_by_prefix(memcached_st *ptr, const char *prefix, size_t prefix_length, time_t expiration); prefix, prefix_length: flush\ud560 prefix \uc815\ubcf4 expiration: delayed flush\ud560 \uc2dc\uc5d0 \uc9c0\uc5f0\ud560 \uc2dc\uac04(\ub2e8\uc704: \ucd08)\ub97c \ub098\ud0c0\ub0b8\ub2e4. \ud2b9\uc815 prefix\uc758 \ubaa8\ub4e0 items\uc744 \uc0ad\uc81c\ud558\ubbc0\ub85c \uadf8 \uc0ac\uc6a9\uc5d0 \uc8fc\uc758\ud558\uc5ec\uc57c \ud55c\ub2e4. \ud2b9\ud788, prefix\ub97c \uba85\uc2dc\ud558\uc9c0 \uc54a\ub294 flush \ud568\uc218\ub294 cache node\uc758 \ubaa8\ub4e0 items\uc744 \uc0ad\uc81c\ud558\ubbc0\ub85c \uacf5\uc6a9\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 cloud\uc5d0\uc120 \uac01\ubcc4\ud788 \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4.","title":"Flush"},{"location":"arcus-c-client/1.10-(latest)/9.-appendix/","text":"Appendix \ubb38\uc81c \ud574\uacb0 32-bit \ud658\uacbd\uc5d0\uc11c\ub294 ./configure \uc635\uc158\uc5d0 \ub2e4\uc74c\uc744 \ucd94\uac00\ud55c\ub2e4. --disable-64bit CFLAGS=\"-O2 -march=i686\" GCC3, GCC4\uac00 \ud568\uaed8 \uc124\uce58\ub41c \ud658\uacbd\uc5d0\uc11c\ub294 ./configure \uc635\uc158\uc5d0 \ub2e4\uc74c\uc744 \ucd94\uac00\ud55c\ub2e4. CC=gcc4 CXX=g++4 \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \uc0d8\ud50c($SRC/arcus/multi_process)\uc774 \"Cannot create proxy lock : No space left on device\" \uba54\uc2dc\uc9c0\uc640 \ud568\uaed8 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud55c\ub2e4. USERID\ub294 \uc0ac\uc6a9\uc790 \uacc4\uc815\uc73c\ub85c \ub300\uce58\ud55c\ub2e4. $ for i in `ipcs -s | awk '/USERID/ {print $2}'`; do (ipcrm -s $i); done \uc124\uce58 \ud655\uc778 : \uc0d8\ud50c \ud504\ub85c\uadf8\ub7a8\uc744 \uc815\uc801 \ub9c1\ud06c\ud558\uae30 (sample applications can be found in $SRC/arcus) $ g++ multi_threaded.cc /usr/lib64/libm.a /usr/local/lib/libmemcached.a /usr/local/lib/libmemcachedutil.a /usr/local/lib/libzookeeper_mt.a /usr/local/lib/libapr-1.a \\ -o multi_threaded -I. -I/usr/local/include -I/usr/local/include/c-client-src -pthread --static","title":"9. appendix"},{"location":"arcus-c-client/1.10-(latest)/9.-appendix/#appendix","text":"","title":"Appendix"},{"location":"arcus-c-client/1.10-(latest)/9.-appendix/#_1","text":"32-bit \ud658\uacbd\uc5d0\uc11c\ub294 ./configure \uc635\uc158\uc5d0 \ub2e4\uc74c\uc744 \ucd94\uac00\ud55c\ub2e4. --disable-64bit CFLAGS=\"-O2 -march=i686\" GCC3, GCC4\uac00 \ud568\uaed8 \uc124\uce58\ub41c \ud658\uacbd\uc5d0\uc11c\ub294 ./configure \uc635\uc158\uc5d0 \ub2e4\uc74c\uc744 \ucd94\uac00\ud55c\ub2e4. CC=gcc4 CXX=g++4 \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \uc0d8\ud50c($SRC/arcus/multi_process)\uc774 \"Cannot create proxy lock : No space left on device\" \uba54\uc2dc\uc9c0\uc640 \ud568\uaed8 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud55c\ub2e4. USERID\ub294 \uc0ac\uc6a9\uc790 \uacc4\uc815\uc73c\ub85c \ub300\uce58\ud55c\ub2e4. $ for i in `ipcs -s | awk '/USERID/ {print $2}'`; do (ipcrm -s $i); done","title":"\ubb38\uc81c \ud574\uacb0"},{"location":"arcus-c-client/1.10-(latest)/9.-appendix/#_2","text":"(sample applications can be found in $SRC/arcus) $ g++ multi_threaded.cc /usr/lib64/libm.a /usr/local/lib/libmemcached.a /usr/local/lib/libmemcachedutil.a /usr/local/lib/libzookeeper_mt.a /usr/local/lib/libapr-1.a \\ -o multi_threaded -I. -I/usr/local/include -I/usr/local/include/c-client-src -pthread --static","title":"\uc124\uce58 \ud655\uc778 : \uc0d8\ud50c \ud504\ub85c\uadf8\ub7a8\uc744 \uc815\uc801 \ub9c1\ud06c\ud558\uae30"},{"location":"arcus-java-client/1.-getting-started/","text":"\uc774 \ubb38\uc11c\ub294 Arcus\ub97c \ucc98\uc74c \uc811\ud558\ub294 \uc790\ubc14 \uac1c\ubc1c\uc790\ub97c \uc704\ud574 \uc791\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4. Apache Maven \uc758 \uac1c\ub150\uacfc \uae30\ubcf8 \uc0ac\uc6a9\ubc95\uc744 \uc54c\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uace0 \uc788\uc73c\uba70, \uc790\uc138\ud55c \uc124\uba85\uc744 \ud558\uae30 \ubcf4\ub2e4\ub294 Copy&Paste\ub97c \ud1b5\ud574 Arcus\ub97c \uc0ac\uc6a9\ud574\ubcfc \uc218 \uc788\ub294 \ub0b4\uc6a9\uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 1-1. Arcus Arcus\ub294 \uc624\ud508\uc18c\uc2a4 key-value \uce90\uc2dc \uc11c\ubc84\uc778 memcached\ub97c \uae30\ubc18\uc73c\ub85c \ubd80\ubd84\uc801\uc73c\ub85c fault-tolerant\ud55c \uba54\ubaa8\ub9ac \uae30\ubc18\uc758 \uce90\uc2dc \ud074\ub77c\uc6b0\ub4dc \uc785\ub2c8\ub2e4. * memcached : \uad6c\uae00, \ud398\uc774\uc2a4\ubd81 \ub4f1\uc5d0\uc11c \ub300\uaddc\ubaa8\ub85c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 \uba54\ubaa8\ub9ac \uce90\uc2dc \uc11c\ubc84\uc785\ub2c8\ub2e4. * \uce90\uc2dc : \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ub370\uc774\ud130\ub97c \ube44\uad50\uc801 \uace0\uc18d\uc758 \uc800\uc7a5\uc18c\uc5d0 \ub123\uc5b4\ub460\uc73c\ub85c\uc368, \ub290\ub9b0 \uc800\uc7a5\uc18c\ub85c\uc758 \uc694\uccad\uc744 \uc904\uc774\uace0 \ubcf4\ub2e4 \ube60\ub978 \uc751\ub2f5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\uac8c \ud558\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. * \uba54\ubaa8\ub9ac \uae30\ubc18 : Arcus\ub294 \ub370\uc774\ud130\ub97c \uba54\ubaa8\ub9ac\uc5d0\ub9cc \uc800\uc7a5\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubaa8\ub4e0 \ub370\uc774\ud130\ub294 \ud718\ubc1c\uc131\uc774\uba70 \uc5b8\uc81c\ub4e0\uc9c0 \uc0ad\uc81c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. * \ud074\ub77c\uc6b0\ub4dc : \uac01 \uc11c\ube44\uc2a4\ub294 \ud544\uc694\uc5d0 \ub530\ub77c \uc804\uc6a9 \uce90\uc2dc \ud074\ub7ec\uc2a4\ud130\ub97c \uad6c\uc131\ud560 \uc218 \uc788\uc73c\uba70 \ub3d9\uc801\uc73c\ub85c \uce90\uc2dc \uc11c\ubc84\ub97c \ucd94\uac00\ud558\uac70\ub098 \uc0ad\uc81c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ub2e8, \uc77c\ubd80 \ub370\uc774\ud130\ub294 \uc720\uc2e4\ub429\ub2c8\ub2e4) * fault-tolerant : Arcus\ub294 \uc77c\ubd80 \ub610\ub294 \uc804\uccb4 \uce90\uc2dc \uc11c\ubc84\uc758 \uc774\uc0c1 \uc0c1\ud0dc\ub97c \uac10\uc9c0\ud558\uc5ec \uc801\uc808\ud55c \uc870\uce58\ub97c \ucde8\ud569\ub2c8\ub2e4. \ub610\ud55c Arcus\ub294 key-value \ud615\ud0dc\uc758 \ub370\uc774\ud130\ubfd0\ub9cc \uc544\ub2c8\ub77c List, Set, Map, B+Tree \ub4f1\uc758 \uc790\ub8cc\uad6c\uc870\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. 1-2. \ubbf8\ub9ac \uc54c\uc544\ub450\uae30 \ud0a4(key) Arcus\uc758 key\ub294 prefix\uc640 subkey\ub85c \uad6c\uc131\ub418\uba70, prefix\uc640 subkey\ub294 \ucf5c\ub860(:)\uc73c\ub85c \uad6c\ubd84\ub429\ub2c8\ub2e4. (\uc608) users:user_12345 Arcus\ub294 prefix\ub97c \uae30\uc900\uc73c\ub85c \ubcc4\ub3c4\uc758 \ud1b5\uacc4\ub97c \uc218\uc9d1\ud569\ub2c8\ub2e4. prefix \uac1c\uc218\uc758 \uc81c\ud55c\uc740 \uc5c6\uc73c\ub098 \ud1b5\uacc4 \uc218\uc9d1\uc744 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 \ub108\ubb34 \ub9ce\uc9c0 \uc54a\ub294 \uc218\uc900(5~10\uac1c)\uc73c\ub85c \uc0dd\uc131\ud558\uc2dc\ub294 \uac83\uc744 \uad8c\ud569\ub2c8\ub2e4. \ud0a4\ub294 prefix, subkey\ub97c \ud3ec\ud568\ud558\uc5ec 250\uc790\ub97c \ub118\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubc18\ub4dc\uc2dc \uc751\uc6a9\uc5d0\uc11c \ud0a4 \uae38\uc774\ub97c \uc81c\ud55c\ud558\uc154\uc57c \ud569\ub2c8\ub2e4. \uac12(value) \ud558\ub098\uc758 \ud0a4\uc5d0 \ub300\ud55c \uac12\uc740 \ubc14\uc774\ud2b8 \uc2a4\ud2b8\ub9bc \ud615\ud0dc\ub85c \ucd5c\ub300 1MB \uae4c\uc9c0 \uc800\uc7a5\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\ubc14 \uac1d\uccb4\ub97c \uc800\uc7a5\ud558\ub294 \uacbd\uc6b0, \ud574\ub2f9 \uac1d\uccb4\ub294 \ubc18\ub4dc\uc2dc Serializable \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4. Arcus \uc811\uc18d \uc815\ubcf4 Arcus admin: ZooKeeper \uc11c\ubc84 \uc8fc\uc18c\ub85c\uc11c \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 IP\uc640 PORT \uc815\ubcf4\ub97c \uc870\ud68c\ud558\uace0 \ubcc0\uacbd\uc774 \uc788\uc744 \ub54c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. Arcus service code: \uc0ac\uc6a9\uc790 \ub610\ub294 \uc11c\ube44\uc2a4\uc5d0\uac8c \ud560\ub2f9\ub41c \uce90\uc2dc \uc11c\ubc84\ub4e4\uc744 \uad6c\ubd84\uc9d3\ub294 \ucf54\ub4dc\uac12\uc785\ub2c8\ub2e4. 1-3. Hello, Arcus! \uae30\ubcf8\uc801\uc778 key-value \uce90\uc2dc \uc694\uccad\uc744 \uc218\ud589\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ucee4\uc2a4 \uc11c\ubc84\uac00 \uad6c\uc131\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 \ube44\uc5b4 \uc788\ub294 \uc790\ubc14 \ud504\ub85c\uc81d\ud2b8\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. $ mvn archetype:generate -DgroupId=com.navercorp.arcus -DartifactId=arcus-quick-start -DinteractiveMode=false $ cd arcus-quick-start $ mvn eclipse:eclipse // \uc774\ud074\ub9bd\uc2a4 IDE\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc2e4\ud589\ud558\uc5ec \uc774\ud074\ub9bd\uc2a4 \ud504\ub85c\uc81d\ud2b8\ub97c \uc0dd\uc131\ud558\uc5ec \ud65c\uc6a9\ud569\ub2c8\ub2e4. pom.xml \ud504\ub85c\uc81d\ud2b8\uac00 \uc0dd\uc131\ub418\uba74 pom.xml\uc5d0\uc11c Arcus \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \ucc38\uc870\ud558\ub3c4\ub85d \ubcc0\uacbd\ud569\ub2c8\ub2e4. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.navercorp.arcus</groupId> <artifactId>arcus-quick-start</artifactId> <version>1.0-SNAPSHOT</version> <packaging>jar</packaging> <name>arcus-quick-start</name> <url>http://maven.apache.org</url> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- \ud3b8\uc758\uc0c1 JUnit \ubc84\uc804\uc744 4.x\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4. --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.4</version> <scope>test</scope> </dependency> <!-- Arcus \ud074\ub77c\uc774\uc5b8\ud2b8 \uc758\uc874\uc131\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. --> <dependency> <groupId>com.navercorp.arcus</groupId> <artifactId>arcus-java-client</artifactId> <version>1.8.0</version> </dependency> <!-- \ub85c\uac70 \uc758\uc874\uc131\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.16</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>1.6.1</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>1.6.1</version> </dependency> </dependencies> </project> HelloArcus.java \uc774\uc81c Arcus\uc640 \ud1b5\uc2e0\ud558\ub294 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud574\ubd05\uc2dc\ub2e4. \uc2dc\ub098\ub9ac\uc624\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. - HelloArcus.sayHello(): Arcus \uce90\uc2dc \uc11c\ubc84\uc5d0 \"Hello, Arcus!\" \uac12\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. - HelloArcus.listenHello(): Arcus \uce90\uc2dc \uc11c\ubc84\uc5d0 \uc800\uc7a5\ub41c \"Hello, Arcus!\" \uac12\uc744 \uc77d\uc5b4\uc635\ub2c8\ub2e4. // HelloArcusTest.java package com.navercorp.arcus; import junit.framework.Assert; import org.junit.Before; import org.junit.Test; public class HelloArcusTest { HelloArcus helloArcus = new HelloArcus(\"127.0.0.1:2181\", \"test\"); @Before public void sayHello() { helloArcus.sayHello(); } @Test public void listenHello() { Assert.assertEquals(\"Hello, Arcus!\", helloArcus.listenHello()); } } // HelloArcus.java package com.navercorp.arcus; import java.util.concurrent.Future; import java.util.concurrent.TimeUnit; import net.spy.memcached.ArcusClient; import net.spy.memcached.ConnectionFactoryBuilder; public class HelloArcus { private String arcusAdmin; private String serviceCode; private ArcusClient arcusClient; public HelloArcus(String arcusAdmin, String serviceCode) { this.arcusAdmin = arcusAdmin; this.serviceCode = serviceCode; // log4j logger\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc124\uc815\ud569\ub2c8\ub2e4. // \ucf54\ub4dc\uc5d0 \uc9c1\uc811 \ucd94\uac00\ud558\uc9c0 \uc54a\uace0 \uc544\ub798\uc758 JVM \ud658\uacbd\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud574\ub3c4 \ub429\ub2c8\ub2e4. // -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.Log4JLogger System.setProperty(\"net.spy.log.LoggerImpl\", \"net.spy.memcached.compat.log.Log4JLogger\"); // Arcus \ud074\ub77c\uc774\uc5b8\ud2b8 \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. // - arcusAdmin : Arcus \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 \uadf8\ub8f9\uc744 \uad00\ub9ac\ud558\ub294 admin \uc11c\ubc84(ZooKeeper)\uc758 \uc8fc\uc18c\uc785\ub2c8\ub2e4. // - serviceCode : \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud560\ub2f9\ub41c Arcus \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 \uc9d1\ud569\uc5d0 \ub300\ud55c \ucf54\ub4dc\uac12\uc785\ub2c8\ub2e4. // - connectionFactoryBuilder : \ud074\ub77c\uc774\uc5b8\ud2b8 \uc0dd\uc131 \uc635\uc158\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. // // \uc815\ub9ac\ud558\uba74 arcusAdmin\uacfc serviceCode\uc758 \uc870\ud569\uc744 \ud1b5\ud574 \uc720\uc77c\ud55c \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 \uc9d1\ud569\uc744 \uc5bb\uc5b4 \uc5f0\uacb0\ud560 \uc218 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. this.arcusClient = ArcusClient.createArcusClient(arcusAdmin, serviceCode, new ConnectionFactoryBuilder()); } public boolean sayHello() { Future<Boolean> future = null; boolean setSuccess = false; // Arcus\uc758 \"test:hello\" \ud0a4\uc5d0 \"Hello, Arcus!\"\ub77c\ub294 \uac12\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. // \uadf8\ub9ac\uace0 Arcus\uc758 \uac70\uc758 \ubaa8\ub4e0 API\ub294 Future\ub97c \ub9ac\ud134\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c // \ube44\ub3d9\uae30 \ucc98\ub9ac\uc5d0 \ud2b9\ud654\ub41c \uc11c\ubc84\uac00 \uc544\ub2c8\ub77c\uba74 \ubc18\ub4dc\uc2dc \uba85\uc2dc\uc801\uc73c\ub85c future.get()\uc744 \uc218\ud589\ud558\uc5ec // \ubc18\ud658\ub418\ub294 \uc751\ub2f5\uc744 \uae30\ub2e4\ub824\uc57c \ud569\ub2c8\ub2e4. future = this.arcusClient.set(\"test:hello\", 600, \"Hello, Arcus!\"); try { setSuccess = future.get(700L, TimeUnit.MILLISECONDS); } catch (Exception e) { if (future != null) future.cancel(true); e.printStackTrace(); } return setSuccess; } public String listenHello() { Future<Object> future = null; String result = \"Not OK.\"; // Arcus\uc758 \"test:hello\" \ud0a4\uc758 \uac12\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4. // Arcus\uc5d0\uc11c\ub294 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uba85\ub839\uc5d0 \uba85\uc2dc\uc801\uc73c\ub85c timeout \uac12\uc744 \uc9c0\uc815\ud558\ub3c4\ub85d \uac00\uc774\ub4dc \ud558\uace0 \uc788\uc73c\uba70 // \uc0ac\uc6a9\uc790\ub294 set\uc744 \uc81c\uc678\ud55c \ubaa8\ub4e0 \uc694\uccad\uc5d0 async\ub85c \uc2dc\uc791\ud558\ub294 API\ub97c \uc0ac\uc6a9\ud558\uc154\uc57c \ud569\ub2c8\ub2e4. future = this.arcusClient.asyncGet(\"test:hello\"); try { result = (String)future.get(700L, TimeUnit.MILLISECONDS); } catch (Exception e) { if (future != null) future.cancel(true); e.printStackTrace(); } return result; } } src/test/resources/log4j.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!DOCTYPE log4j:configuration PUBLIC \"\" \"log4j.dtd\"> <log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'> <appender name=\"console\" class=\"org.apache.log4j.ConsoleAppender\"> <layout class=\"org.apache.log4j.PatternLayout\"> <param name=\"ConversionPattern\" value=\"%d{yyyy-MM-dd HH:mm:ss}[%-5p] (%F:%L) %m%n\" /> </layout> </appender> <!-- collection piped exist --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionPipedExistOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- set attributes --> <logger name=\"net.spy.memcached.protocol.ascii.SetAttrOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection insert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionStoreOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection get --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionGetOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection upsert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpsertOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection update --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection count --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionCountOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- define root --> <root> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </root> </log4j:configuration> \ud14c\uc2a4\ud2b8 \uc704 \uc608\uc81c\ub294 127.0.0.1:2181 \uc5d0 ZooKeeper \uac00 \uc791\ub3d9\ud558\uace0 \uc788\uace0 memcached \uc11c\ubc84\uac00 \uad6c\ub3d9\ud558\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \uc544\uc9c1 \uc900\ube44\uac00 \uc548 \ub418\uc5b4 \uc788\ub2e4\uba74, \ub2e4\uc74c \ud398\uc774\uc9c0 Running Test Cases \ub97c \ub530\ub77c \uc900\ube44\ud569\ub2c8\ub2e4. https://github.com/naver/arcus-java-client/blob/master/README.md \ud14c\uc2a4\ud2b8\uac00 \ud1b5\uacfc\ud558\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4. $ mvn test ... ------------------------------------------------------- T E S T S ------------------------------------------------------- ... Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.885s [INFO] Finished at: Mon Dec 17 14:13:22 KST 2012 [INFO] Final Memory: 4M/81M [INFO] ------------------------------------------------------------------------","title":"1. getting started"},{"location":"arcus-java-client/1.-getting-started/#1-1-arcus","text":"Arcus\ub294 \uc624\ud508\uc18c\uc2a4 key-value \uce90\uc2dc \uc11c\ubc84\uc778 memcached\ub97c \uae30\ubc18\uc73c\ub85c \ubd80\ubd84\uc801\uc73c\ub85c fault-tolerant\ud55c \uba54\ubaa8\ub9ac \uae30\ubc18\uc758 \uce90\uc2dc \ud074\ub77c\uc6b0\ub4dc \uc785\ub2c8\ub2e4. * memcached : \uad6c\uae00, \ud398\uc774\uc2a4\ubd81 \ub4f1\uc5d0\uc11c \ub300\uaddc\ubaa8\ub85c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 \uba54\ubaa8\ub9ac \uce90\uc2dc \uc11c\ubc84\uc785\ub2c8\ub2e4. * \uce90\uc2dc : \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ub370\uc774\ud130\ub97c \ube44\uad50\uc801 \uace0\uc18d\uc758 \uc800\uc7a5\uc18c\uc5d0 \ub123\uc5b4\ub460\uc73c\ub85c\uc368, \ub290\ub9b0 \uc800\uc7a5\uc18c\ub85c\uc758 \uc694\uccad\uc744 \uc904\uc774\uace0 \ubcf4\ub2e4 \ube60\ub978 \uc751\ub2f5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\uac8c \ud558\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. * \uba54\ubaa8\ub9ac \uae30\ubc18 : Arcus\ub294 \ub370\uc774\ud130\ub97c \uba54\ubaa8\ub9ac\uc5d0\ub9cc \uc800\uc7a5\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubaa8\ub4e0 \ub370\uc774\ud130\ub294 \ud718\ubc1c\uc131\uc774\uba70 \uc5b8\uc81c\ub4e0\uc9c0 \uc0ad\uc81c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. * \ud074\ub77c\uc6b0\ub4dc : \uac01 \uc11c\ube44\uc2a4\ub294 \ud544\uc694\uc5d0 \ub530\ub77c \uc804\uc6a9 \uce90\uc2dc \ud074\ub7ec\uc2a4\ud130\ub97c \uad6c\uc131\ud560 \uc218 \uc788\uc73c\uba70 \ub3d9\uc801\uc73c\ub85c \uce90\uc2dc \uc11c\ubc84\ub97c \ucd94\uac00\ud558\uac70\ub098 \uc0ad\uc81c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ub2e8, \uc77c\ubd80 \ub370\uc774\ud130\ub294 \uc720\uc2e4\ub429\ub2c8\ub2e4) * fault-tolerant : Arcus\ub294 \uc77c\ubd80 \ub610\ub294 \uc804\uccb4 \uce90\uc2dc \uc11c\ubc84\uc758 \uc774\uc0c1 \uc0c1\ud0dc\ub97c \uac10\uc9c0\ud558\uc5ec \uc801\uc808\ud55c \uc870\uce58\ub97c \ucde8\ud569\ub2c8\ub2e4. \ub610\ud55c Arcus\ub294 key-value \ud615\ud0dc\uc758 \ub370\uc774\ud130\ubfd0\ub9cc \uc544\ub2c8\ub77c List, Set, Map, B+Tree \ub4f1\uc758 \uc790\ub8cc\uad6c\uc870\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"1-1. Arcus"},{"location":"arcus-java-client/1.-getting-started/#1-2","text":"\ud0a4(key) Arcus\uc758 key\ub294 prefix\uc640 subkey\ub85c \uad6c\uc131\ub418\uba70, prefix\uc640 subkey\ub294 \ucf5c\ub860(:)\uc73c\ub85c \uad6c\ubd84\ub429\ub2c8\ub2e4. (\uc608) users:user_12345 Arcus\ub294 prefix\ub97c \uae30\uc900\uc73c\ub85c \ubcc4\ub3c4\uc758 \ud1b5\uacc4\ub97c \uc218\uc9d1\ud569\ub2c8\ub2e4. prefix \uac1c\uc218\uc758 \uc81c\ud55c\uc740 \uc5c6\uc73c\ub098 \ud1b5\uacc4 \uc218\uc9d1\uc744 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 \ub108\ubb34 \ub9ce\uc9c0 \uc54a\ub294 \uc218\uc900(5~10\uac1c)\uc73c\ub85c \uc0dd\uc131\ud558\uc2dc\ub294 \uac83\uc744 \uad8c\ud569\ub2c8\ub2e4. \ud0a4\ub294 prefix, subkey\ub97c \ud3ec\ud568\ud558\uc5ec 250\uc790\ub97c \ub118\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubc18\ub4dc\uc2dc \uc751\uc6a9\uc5d0\uc11c \ud0a4 \uae38\uc774\ub97c \uc81c\ud55c\ud558\uc154\uc57c \ud569\ub2c8\ub2e4. \uac12(value) \ud558\ub098\uc758 \ud0a4\uc5d0 \ub300\ud55c \uac12\uc740 \ubc14\uc774\ud2b8 \uc2a4\ud2b8\ub9bc \ud615\ud0dc\ub85c \ucd5c\ub300 1MB \uae4c\uc9c0 \uc800\uc7a5\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\ubc14 \uac1d\uccb4\ub97c \uc800\uc7a5\ud558\ub294 \uacbd\uc6b0, \ud574\ub2f9 \uac1d\uccb4\ub294 \ubc18\ub4dc\uc2dc Serializable \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4. Arcus \uc811\uc18d \uc815\ubcf4 Arcus admin: ZooKeeper \uc11c\ubc84 \uc8fc\uc18c\ub85c\uc11c \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 IP\uc640 PORT \uc815\ubcf4\ub97c \uc870\ud68c\ud558\uace0 \ubcc0\uacbd\uc774 \uc788\uc744 \ub54c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. Arcus service code: \uc0ac\uc6a9\uc790 \ub610\ub294 \uc11c\ube44\uc2a4\uc5d0\uac8c \ud560\ub2f9\ub41c \uce90\uc2dc \uc11c\ubc84\ub4e4\uc744 \uad6c\ubd84\uc9d3\ub294 \ucf54\ub4dc\uac12\uc785\ub2c8\ub2e4.","title":"1-2. \ubbf8\ub9ac \uc54c\uc544\ub450\uae30"},{"location":"arcus-java-client/1.-getting-started/#1-3-hello-arcus","text":"\uae30\ubcf8\uc801\uc778 key-value \uce90\uc2dc \uc694\uccad\uc744 \uc218\ud589\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ucee4\uc2a4 \uc11c\ubc84\uac00 \uad6c\uc131\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 \ube44\uc5b4 \uc788\ub294 \uc790\ubc14 \ud504\ub85c\uc81d\ud2b8\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. $ mvn archetype:generate -DgroupId=com.navercorp.arcus -DartifactId=arcus-quick-start -DinteractiveMode=false $ cd arcus-quick-start $ mvn eclipse:eclipse // \uc774\ud074\ub9bd\uc2a4 IDE\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc2e4\ud589\ud558\uc5ec \uc774\ud074\ub9bd\uc2a4 \ud504\ub85c\uc81d\ud2b8\ub97c \uc0dd\uc131\ud558\uc5ec \ud65c\uc6a9\ud569\ub2c8\ub2e4.","title":"1-3. Hello, Arcus!"},{"location":"arcus-java-client/1.-getting-started/#pomxml","text":"\ud504\ub85c\uc81d\ud2b8\uac00 \uc0dd\uc131\ub418\uba74 pom.xml\uc5d0\uc11c Arcus \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \ucc38\uc870\ud558\ub3c4\ub85d \ubcc0\uacbd\ud569\ub2c8\ub2e4. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.navercorp.arcus</groupId> <artifactId>arcus-quick-start</artifactId> <version>1.0-SNAPSHOT</version> <packaging>jar</packaging> <name>arcus-quick-start</name> <url>http://maven.apache.org</url> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- \ud3b8\uc758\uc0c1 JUnit \ubc84\uc804\uc744 4.x\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4. --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.4</version> <scope>test</scope> </dependency> <!-- Arcus \ud074\ub77c\uc774\uc5b8\ud2b8 \uc758\uc874\uc131\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. --> <dependency> <groupId>com.navercorp.arcus</groupId> <artifactId>arcus-java-client</artifactId> <version>1.8.0</version> </dependency> <!-- \ub85c\uac70 \uc758\uc874\uc131\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.16</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>1.6.1</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>1.6.1</version> </dependency> </dependencies> </project>","title":"pom.xml"},{"location":"arcus-java-client/1.-getting-started/#helloarcusjava","text":"\uc774\uc81c Arcus\uc640 \ud1b5\uc2e0\ud558\ub294 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud574\ubd05\uc2dc\ub2e4. \uc2dc\ub098\ub9ac\uc624\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. - HelloArcus.sayHello(): Arcus \uce90\uc2dc \uc11c\ubc84\uc5d0 \"Hello, Arcus!\" \uac12\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. - HelloArcus.listenHello(): Arcus \uce90\uc2dc \uc11c\ubc84\uc5d0 \uc800\uc7a5\ub41c \"Hello, Arcus!\" \uac12\uc744 \uc77d\uc5b4\uc635\ub2c8\ub2e4. // HelloArcusTest.java package com.navercorp.arcus; import junit.framework.Assert; import org.junit.Before; import org.junit.Test; public class HelloArcusTest { HelloArcus helloArcus = new HelloArcus(\"127.0.0.1:2181\", \"test\"); @Before public void sayHello() { helloArcus.sayHello(); } @Test public void listenHello() { Assert.assertEquals(\"Hello, Arcus!\", helloArcus.listenHello()); } } // HelloArcus.java package com.navercorp.arcus; import java.util.concurrent.Future; import java.util.concurrent.TimeUnit; import net.spy.memcached.ArcusClient; import net.spy.memcached.ConnectionFactoryBuilder; public class HelloArcus { private String arcusAdmin; private String serviceCode; private ArcusClient arcusClient; public HelloArcus(String arcusAdmin, String serviceCode) { this.arcusAdmin = arcusAdmin; this.serviceCode = serviceCode; // log4j logger\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc124\uc815\ud569\ub2c8\ub2e4. // \ucf54\ub4dc\uc5d0 \uc9c1\uc811 \ucd94\uac00\ud558\uc9c0 \uc54a\uace0 \uc544\ub798\uc758 JVM \ud658\uacbd\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud574\ub3c4 \ub429\ub2c8\ub2e4. // -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.Log4JLogger System.setProperty(\"net.spy.log.LoggerImpl\", \"net.spy.memcached.compat.log.Log4JLogger\"); // Arcus \ud074\ub77c\uc774\uc5b8\ud2b8 \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. // - arcusAdmin : Arcus \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 \uadf8\ub8f9\uc744 \uad00\ub9ac\ud558\ub294 admin \uc11c\ubc84(ZooKeeper)\uc758 \uc8fc\uc18c\uc785\ub2c8\ub2e4. // - serviceCode : \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud560\ub2f9\ub41c Arcus \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 \uc9d1\ud569\uc5d0 \ub300\ud55c \ucf54\ub4dc\uac12\uc785\ub2c8\ub2e4. // - connectionFactoryBuilder : \ud074\ub77c\uc774\uc5b8\ud2b8 \uc0dd\uc131 \uc635\uc158\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. // // \uc815\ub9ac\ud558\uba74 arcusAdmin\uacfc serviceCode\uc758 \uc870\ud569\uc744 \ud1b5\ud574 \uc720\uc77c\ud55c \uce90\uc2dc \uc11c\ubc84\ub4e4\uc758 \uc9d1\ud569\uc744 \uc5bb\uc5b4 \uc5f0\uacb0\ud560 \uc218 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. this.arcusClient = ArcusClient.createArcusClient(arcusAdmin, serviceCode, new ConnectionFactoryBuilder()); } public boolean sayHello() { Future<Boolean> future = null; boolean setSuccess = false; // Arcus\uc758 \"test:hello\" \ud0a4\uc5d0 \"Hello, Arcus!\"\ub77c\ub294 \uac12\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. // \uadf8\ub9ac\uace0 Arcus\uc758 \uac70\uc758 \ubaa8\ub4e0 API\ub294 Future\ub97c \ub9ac\ud134\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c // \ube44\ub3d9\uae30 \ucc98\ub9ac\uc5d0 \ud2b9\ud654\ub41c \uc11c\ubc84\uac00 \uc544\ub2c8\ub77c\uba74 \ubc18\ub4dc\uc2dc \uba85\uc2dc\uc801\uc73c\ub85c future.get()\uc744 \uc218\ud589\ud558\uc5ec // \ubc18\ud658\ub418\ub294 \uc751\ub2f5\uc744 \uae30\ub2e4\ub824\uc57c \ud569\ub2c8\ub2e4. future = this.arcusClient.set(\"test:hello\", 600, \"Hello, Arcus!\"); try { setSuccess = future.get(700L, TimeUnit.MILLISECONDS); } catch (Exception e) { if (future != null) future.cancel(true); e.printStackTrace(); } return setSuccess; } public String listenHello() { Future<Object> future = null; String result = \"Not OK.\"; // Arcus\uc758 \"test:hello\" \ud0a4\uc758 \uac12\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4. // Arcus\uc5d0\uc11c\ub294 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uba85\ub839\uc5d0 \uba85\uc2dc\uc801\uc73c\ub85c timeout \uac12\uc744 \uc9c0\uc815\ud558\ub3c4\ub85d \uac00\uc774\ub4dc \ud558\uace0 \uc788\uc73c\uba70 // \uc0ac\uc6a9\uc790\ub294 set\uc744 \uc81c\uc678\ud55c \ubaa8\ub4e0 \uc694\uccad\uc5d0 async\ub85c \uc2dc\uc791\ud558\ub294 API\ub97c \uc0ac\uc6a9\ud558\uc154\uc57c \ud569\ub2c8\ub2e4. future = this.arcusClient.asyncGet(\"test:hello\"); try { result = (String)future.get(700L, TimeUnit.MILLISECONDS); } catch (Exception e) { if (future != null) future.cancel(true); e.printStackTrace(); } return result; } }","title":"HelloArcus.java"},{"location":"arcus-java-client/1.-getting-started/#srctestresourceslog4jxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!DOCTYPE log4j:configuration PUBLIC \"\" \"log4j.dtd\"> <log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'> <appender name=\"console\" class=\"org.apache.log4j.ConsoleAppender\"> <layout class=\"org.apache.log4j.PatternLayout\"> <param name=\"ConversionPattern\" value=\"%d{yyyy-MM-dd HH:mm:ss}[%-5p] (%F:%L) %m%n\" /> </layout> </appender> <!-- collection piped exist --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionPipedExistOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- set attributes --> <logger name=\"net.spy.memcached.protocol.ascii.SetAttrOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection insert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionStoreOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection get --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionGetOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection upsert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpsertOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection update --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection count --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionCountOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- define root --> <root> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </root> </log4j:configuration>","title":"src/test/resources/log4j.xml"},{"location":"arcus-java-client/1.-getting-started/#_1","text":"\uc704 \uc608\uc81c\ub294 127.0.0.1:2181 \uc5d0 ZooKeeper \uac00 \uc791\ub3d9\ud558\uace0 \uc788\uace0 memcached \uc11c\ubc84\uac00 \uad6c\ub3d9\ud558\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \uc544\uc9c1 \uc900\ube44\uac00 \uc548 \ub418\uc5b4 \uc788\ub2e4\uba74, \ub2e4\uc74c \ud398\uc774\uc9c0 Running Test Cases \ub97c \ub530\ub77c \uc900\ube44\ud569\ub2c8\ub2e4. https://github.com/naver/arcus-java-client/blob/master/README.md \ud14c\uc2a4\ud2b8\uac00 \ud1b5\uacfc\ud558\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4. $ mvn test ... ------------------------------------------------------- T E S T S ------------------------------------------------------- ... Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.885s [INFO] Finished at: Mon Dec 17 14:13:22 KST 2012 [INFO] Final Memory: 4M/81M [INFO] ------------------------------------------------------------------------","title":"\ud14c\uc2a4\ud2b8"},{"location":"arcus-java-client/10.-log-message/","text":"Java client\uc5d0\uc11c \ub0a8\uae30\ub294 \ub85c\uadf8\ub4e4\uacfc \uadf8\uac83\ub4e4\uc774 \uc758\ubbf8\ud558\ub294 \ubc14\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \ub85c\uadf8\ub294 \uc11c\ube44\uc2a4\uc5d0\uc11c \uc124\uc815\ud55c \uc704\uce58\uc5d0 \ub0a8\uac8c \ub41c\ub2e4. \ub85c\uadf8 \ub808\ubca8 \ubcc0\uacbd\uacfc logger \uc124\uc815\uc740 arcus client \uc124\uc815 \uc744 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. 10-1. Arcus client\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \ucd08\uae30\ud654 \ub418\uc5c8\uc744 \ub54c Arcus client\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \ucd08\uae30\ud654 \ub418\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ub85c\uadf8\ub97c \ub0a8\uae34\ub2e4. INFO net.spy.memcached.CacheManager: CacheManager started. ([mailto:dev@dev.arcuscloud.nhncorp.com:17288 dev@dev.arcuscloud.nhncorp.com:17288]) WARN net.spy.memcached.CacheMonitor: Cache list has been changed : From=null, To=[127.0.0.1:11211-hostname, xxx.xxx.xxx.xxx:xxxx-hostname] : [serviceCode=dev] INFO net.spy.memcached.MemcachedConnection: new memcached node added {QA sa=/127.0.0.1:11211, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue INFO net.spy.memcached.MemcachedConnection: new memcached node added {QA sa=/127.0.0.1:11211, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue INFO net.spy.memcached.MemcachedConnection: Connection state changed for sun.nio.ch.SelectionKeyImpl@388ee016 INFO net.spy.memcached.MemcachedConnection: Connection state changed for sun.nio.ch.SelectionKeyImpl@2e5bbd6 2011-09-21 10:44:54.055 WARN net.spy.memcached.CacheManager: All arcus connections are established. 10-2. Arcus admin address\uac00 \uc798\ubabb \ub418\uc5c8\uc744 \ub54c Arcus admin address\ub97c \uc798\ubabb \uc9c0\uc815\ud588\uac70\ub098 server\uac00 \uc751\ub2f5\uc774 \uc5c6\uc744 \ub54c \uc544\ub798\uc640 \uac19\uc740 \ub85c\uadf8\ub97c \ub0a8\uae34\ub2e4. FATAL net.spy.memcached.CacheManager: Unexpected exception. contact to arcus administrator INFO net.spy.memcached.CacheManager: Close ZooKeeper client. 10-2. Arcus admin\uacfc \uc5f0\uacb0\uc774 \ub2e8\uc808 \ub418\uc5c8\uc744 \ub54c Arcus admin\uacfc\uc758 \ub124\ud2b8\uc6cd \ubb38\uc81c\ub85c \uc5f0\uacb0\uc774 \ub2e8\uc808\ub418\uba74 \uc544\ub798 \ub85c\uadf8\ub97c \ub0a8\uae30\uace0 Arcus admin\uc73c\ub85c \uc811\uc18d\uc744 \uc7ac\uc2dc\ub3c4\ud55c\ub2e4. WARN net.spy.memcached.CacheMonitor: Disconnected from the Arcus admin. Trying to reconnect : [serviceCode=dev] 10-3. Arcus admin \uc138\uc158\uc774 \ub9cc\ub8cc\ub418\uc5c8\uc744 \ub54c \uc138\uc158\uc774 \ub9cc\ub8cc\ub418\ub294 \uacbd\uc6b0\ub294 admin\uacfc\uc758 \uc5f0\uacb0\ubb38\uc81c\ub85c heart beat\uc774 \uc81c\ub300\ub85c \ub418\uc9c0 \uc54a\uc544 \ub9cc\ub8cc\ub41c \uacbd\uc6b0\uc774\ub2e4. WARN net.spy.memcached.CacheMonitor: Session expired. Trying to reconnect to the Arcus admin : [serviceCode=dev] \uc138\uc158\uc774 \ub9cc\ub8cc\ub418\uba74 Arcus client\ub294 reconnect\ub97c \uc2dc\ub3c4\ud55c\ub2e4. INFO net.spy.memcached.CacheMonitor: Shutting down the CacheMonitor : [serviceCode=dev] WARN net.spy.memcached.CacheManager: Unexpected disconnection from Arcus admin. Trying to reconnect to Arcus admin. INFO net.spy.memcached.CacheManager: Close ZooKeeper client. Reconnect\uc5d0 \uc131\uacf5\ud558\uba74 \uc544\ub798\uc640 \uac19\uc740 \ub85c\uadf8\uac00 \ub0a8\ub294\ub2e4. WARN net.spy.memcached.CacheMonitor: Reconnected to the Arcus admin : [serviceCode=dev] ERROR net.spy.memcached.CacheMonitor: Cache list has been changed : From=null, To=[10.0.0.1:11211-arcus01.companyname.com, 10.0.0.2:11211-arcus02.companyname.com] : [serviceCode=dev] 10-4. Object serialization \ubb38\uc81c \uc800\uc7a5\ud558\ub294 \uac12\uc774 serializable\ud558\uc9c0 \uc54a\uac70\ub098 null\uc77c \uacbd\uc6b0 \uc544\ub798\uc640 \uac19\uc740 \uc624\ub958 \uba54\uc2dc\uc9c0\ub97c \ub0a8\uae34\ub2e4. Null\uc744 \uc800\uc7a5\ud558\ub824 \ud558\ub294 \uacbd\uc6b0 Can\u2019t serialize null \uc800\uc7a5\ud558\ub824\ub294 \uac12\uc774 serializable\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0 java.lang.IllegalArgumentException: Non-serializable object, cause=\uc6d0\uc778 \uc774 \ub54c \uc6d0\uc778 \uc5d0 serialize \uc2e4\ud328 \uc6d0\uc778\uc774 \ub418\ub294 \ud074\ub798\uc2a4\uc774\ub984\uc774 \ubcf4\uc5ec\uc9c4\ub2e4. 10-5. out of memory storing object Expire time\uc744 -1\ub85c \uc9c0\uc815\ud558\uc5ec \uc544\uc774\ud15c\uc744 \uc800\uc7a5\ud560 \ub54c \u201cout of memory storing object\u201d\uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc774\uc720\ub294 Arcus\uc11c\ubc84\ub97c \uc2e4\ud589\ud560 \ub54c \ubc31\ubd84\uc728\ub85c \uc9c0\uc815\ud55c sticky item \uc800\uc7a5 \uc601\uc5ed\uc774 \uac00\ub4dd \ucc3c\uae30 \ub54c\ubb38\uc774\ub2e4. Sticky item\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ube44\uc728\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c\uc5d0\ub3c4 \ub3d9\uc77c\ud55c \uc624\ub958\uba54\uc2dc\uc9c0\uac00 \ub098\ud0c0\ub09c\ub2e4. [ERROR](StoreOperationImpl :? ) Error: SERVER_ERROR out of memory storing object [INFO ](MemcachedConnection :? ) Reconnection due to exception handling a memcached operation on {QA sa=/ 127.0.0.1:11211, #Rops=2, #Wops=0, #iq=0, topRop=net.spy.memcached.protocol.ascii.StoreOperationImpl@250d593e, topWop=null, toWrite=0, interested=1}. This may be due to an authentication failure. OperationException: SERVER: SERVER_ERROR out of memory storing object at net.spy.memcached.protocol.BaseOperationImpl.handleError(BaseOperationImpl.java:127) at net.spy.memcached.protocol.ascii.OperationImpl.readFromBuffer(OperationImpl.java:131) at net.spy.memcached.MemcachedConnection.handleReads(MemcachedConnection.java:457) at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:389) at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:182) at net.spy.memcached.MemcachedClient.run(MemcachedClient.java:1630) 10-6. Operation Timeout timeout\uc2dc\uac04 \ub0b4\uc5d0 \uc0ac\uc6a9\uc790\uac00 \uc694\uccad\ud55c \uacb0\uacfc \uac12\uc744 \ubc18\ud658\ud574 \uc904 \uc218 \uc5c6\uc73c\uba74 \uc544\ub798 \ub85c\uadf8\ub97c \ub0a8\uae30\uace0 TimeoutException\uc744 \ub358\uc9c4\ub2e4. net.spy.memcached.internal.CheckedOperationTimeoutException: Timed out waiting for operation. > 300 - failing node: /127.0.0.1:11211 [WRITING] [#iq=13 #Wops=7 #Rops=10 #CT=13] \ub85c\uadf8\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uba54\uc138\uc9c0 \uc124\uba85 Timed out waiting for operation. > 300 MILLISECONDS Timeout \uac12\uc774 300ms\ub85c \uc9c0\uc815\ub418\uc5b4\uc788\uace0 \uc694\uccad\uc758 \uacb0\uacfc\ub97c \ubc1b\uae30\uae4c\uc9c0300ms\uc774\uc0c1 \uac78\ub824\uc11c timeout\ub418\uc5c8\ub2e4. Failing node: /127.0.0.1:11211 \ud574\ub2f9 \uc694\uccad\uc740 127.0.0.1:11211 \uc5d0\uc11c \uc218\ud589\ud55c\ub2e4. [WRITING] \ud574\ub2f9 \uc694\uccad\uc740 socket write\ub97c \uc704\ud574 \ub300\uae30 \uc911\uc774\ub2e4. [READING] \ud574\ub2f9 \uc694\uccad\uc740 \uc11c\ubc84\ub85c \uc804\ub2ec\ub418\uc5c8\uace0 \uacb0\uacfc\uac00 \ub3cc\uc544\uc624\uae30\ub97c \uae30\ub2e4\ub9ac\uac70\ub098, \uacb0\uacfc \uac12\uc744 \uc77d\uc5b4 \ub4e4\uc774\ub294 \uc911\uc774\ub2e4. #iq \ud574\ub2f9 Arcus node Input queue\uc5d0\uc11c \ub300\uae30\uc911\uc778 \uc694\uccad \uc218 #Wops Writing \uc0c1\ud0dc\uc5d0 \uc788\ub294 \uc694\uccad \uc218 #Rops Reading \uc0c1\ud0dc\uc5d0 \uc788\ub294 \uc694\uccad \uc218 #CT Continuous timeout, \ud574\ub2f9 arcus node\uc5d0\uc11c \uc5f0\uc18d\uc801\uc73c\ub85c \ubc1c\uc0dd\ud55c timeout \ud69f\uc218, \uc774 \uac12\uc774 connection factory builder\ub85c \uc9c0\uc815\ub418\ub294 timeout threshold\uac12\uc744 \ub118\uc5b4\uc11c\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ud574\ub2f9 \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc744 \ub04a\uace0 \ub2e4\uc2dc \uc5f0\uacb0\ud55c\ub2e4. \uc989, \ud574\uc11d\ud574 \ubcf4\uc790\uba74 Arcus node 127.0.0.1:11211\uc5d0 \ub300\ud574 \uc694\uccad\uc744 \ubcf4\ub0c8\ub294\ub370 300ms\uc774\ub0b4\uc5d0 \uacb0\uacfc\uac12\uc744 \ub3cc\ub824\uc904 \uc218 \uc5c6\uc5b4 \uc2e4\ud328\ud588\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uba54\uc2dc\uc9c0\ub85c \uc6d0\uc778 \ub610\ud55c \ub9e4\uc6b0 \ub2e4\uc591\ud558\ub2e4. \uc6d0\uc778\uc744 \ub098\uc5f4\ud574 \ubcf4\uc790\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. JVM Full GC time\uac12\uc774 operation timeout\uac12 \ubcf4\ub2e4 \ud074 \ub54c. WAS\uc758 full GC \uc2dc\uac04\uc744 \uce21\uc815\ud558\uc5ec timeout \uac12\uc744 \uadf8\ubcf4\ub2e4 \ud06c\uac8c \uc124\uc815\ud55c\ub2e4. Operation timeout\uc73c\ub85c \ub9e4\uc6b0 \uc791\uc740 \uac12\uc774 \uc124\uc815\ub418\uc9c0 \uc54a\uc558\ub294\uc9c0 \uc0b4\ud3b4\ubcf8\ub2e4. (\ub300\ubd80\ubd84\uc758 \uc6d0\uc778\uc774 \uc774\uac83\uc774\ub2e4.) Client\uc640 Arcus server\uac04\uc758 \ub124\ud2b8\uc6cc\ud06c \ubb38\uc81c \uc11c\ube44\uc2a4\uc640 Arcus server\uac04\uc758 \ub124\ud2b8\uc6cc\ud06c (switch, AS, DS\ub4f1)\uc5d0 \ubb38\uc81c\ub294 \uc5c6\uc5c8\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4. \uc11c\ube44\uc2a4\uc640 \uc5f0\uacb0\ub418\ub294 \uc678\ubd80 \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc5d0\ub3c4 \ubb38\uc81c\uac00 \uc788\uc5c8\ub294\uc9c0 \uc0b4\ud3b4\ubcf8\ub2e4. \ub9cc\uc57d \uc678\ubd80\uc640 \uc5f0\uacb0\ub418\ub294 \uc11c\ubc84\uac00 \uc5c6\ub2e4\uba74 Arcus admin\uc11c\ubc84\uc640 \uc5f0\uacb0\uc5d0 \ubb38\uc81c\ub294 \uc5c6\uc5c8\ub294\uc9c0 \ub85c\uadf8\ub97c \uc0b4\ud3b4\ubcf8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \uad00\ub828 \ubb38\uc81c\uac00 \uc788\uc5c8\ub354\ub77c\ub3c4 Arcus timeout\ub9cc \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Arcus timeout\uc774 1\ucd08\uc774\uace0, DB\uc640\uc758 timeout\uc774 2\ucd08\ub77c\uace0 \ud560 \ub54c. network\ub2e8\uc808\uc774 1.5\ucd08\uac04 \uc788\uc5c8\ub2e4 \ud558\uba74 Arcus timeout\uba54\uc2dc\uc9c0\ub9cc \ub0a8\uac8c \ub420 \uac83\uc774\ub2e4. \ub124\ud2b8\uc6cc\ud06c \ub2e8\uc808\uc774 3\ucd08\uac04 \ubc1c\uc0dd\ud588\ub2e4\uace0 \ud558\uba74 Arcus |- timeout\uc774 \uba3c\uc800 \ubc1c\uc0dd\ud558\uace0 \ub4a4\ub530\ub77c\uc11c DB timeout\uc774 \ubc1c\uc0dd\ud558\ub294 \uac83\ucc98\ub7fc \ubcf4\uc77c \uac83\uc774\ub2e4. \ub300\ubd80\ubd84 \uc774\uc640 \uac19\uc740 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uba74 WAS\uc758 thread\uac00 \uc99d\uac00\ud558\ub294 \ud604\uc0c1\uc744 \ubcf4\uc778\ub2e4. Request process thread\uac00 timeout\ub0b4\uc5d0 \uc751\ub2f5\uc744 \uc8fc\uc9c0 \ubabb\ud558\uac8c \ub418\uba74 \ucd94\uac00\ub85c \ub4e4\uc5b4\uc624\ub294 \uc694\uccad\uc744 \ubc1b\uae30 \uc704\ud55c thread\uac00 \ucd94\uac00\ub85c \uc0dd\uc131\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. Arcus server Arcus \uc11c\ubc84\uc758 \ud558\ub4dc\uc6e8\uc5b4 \ubc0fhubble \ubaa8\ub2c8\ud130 \uacb0\uacfc\ub97c \uc0b4\ud3b4\ubcf4\uace0 \uc6d0\uc778\uc744 \ucc3e\ub294\ub2e4. Timeout\uc774 \ubc1c\uc0dd\ud55c Arcus host\uac00 \ud55c \uac1c\uc778\uc9c0 \uc5ec\ub7ec \uac1c\uc778\uc9c0 \uc0b4\ud3b4\ubcf8\ub2e4. \ud55c\uacc4 Client \ud55c \uac1c\ub85c \ucc98\ub9ac\ud558\ub294\ub370 \ud55c\uacc4\uc774\ub2e4. pool\uc0ac\uc6a9\uc744 \uace0\ub824\ud574\ubcf8\ub2e4.","title":"10. log message"},{"location":"arcus-java-client/10.-log-message/#10-1-arcus-client","text":"Arcus client\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \ucd08\uae30\ud654 \ub418\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ub85c\uadf8\ub97c \ub0a8\uae34\ub2e4. INFO net.spy.memcached.CacheManager: CacheManager started. ([mailto:dev@dev.arcuscloud.nhncorp.com:17288 dev@dev.arcuscloud.nhncorp.com:17288]) WARN net.spy.memcached.CacheMonitor: Cache list has been changed : From=null, To=[127.0.0.1:11211-hostname, xxx.xxx.xxx.xxx:xxxx-hostname] : [serviceCode=dev] INFO net.spy.memcached.MemcachedConnection: new memcached node added {QA sa=/127.0.0.1:11211, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue INFO net.spy.memcached.MemcachedConnection: new memcached node added {QA sa=/127.0.0.1:11211, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue INFO net.spy.memcached.MemcachedConnection: Connection state changed for sun.nio.ch.SelectionKeyImpl@388ee016 INFO net.spy.memcached.MemcachedConnection: Connection state changed for sun.nio.ch.SelectionKeyImpl@2e5bbd6 2011-09-21 10:44:54.055 WARN net.spy.memcached.CacheManager: All arcus connections are established.","title":"10-1. Arcus client\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \ucd08\uae30\ud654 \ub418\uc5c8\uc744 \ub54c"},{"location":"arcus-java-client/10.-log-message/#10-2-arcus-admin-address","text":"Arcus admin address\ub97c \uc798\ubabb \uc9c0\uc815\ud588\uac70\ub098 server\uac00 \uc751\ub2f5\uc774 \uc5c6\uc744 \ub54c \uc544\ub798\uc640 \uac19\uc740 \ub85c\uadf8\ub97c \ub0a8\uae34\ub2e4. FATAL net.spy.memcached.CacheManager: Unexpected exception. contact to arcus administrator INFO net.spy.memcached.CacheManager: Close ZooKeeper client.","title":"10-2. Arcus admin address\uac00 \uc798\ubabb \ub418\uc5c8\uc744 \ub54c"},{"location":"arcus-java-client/10.-log-message/#10-2-arcus-admin","text":"Arcus admin\uacfc\uc758 \ub124\ud2b8\uc6cd \ubb38\uc81c\ub85c \uc5f0\uacb0\uc774 \ub2e8\uc808\ub418\uba74 \uc544\ub798 \ub85c\uadf8\ub97c \ub0a8\uae30\uace0 Arcus admin\uc73c\ub85c \uc811\uc18d\uc744 \uc7ac\uc2dc\ub3c4\ud55c\ub2e4. WARN net.spy.memcached.CacheMonitor: Disconnected from the Arcus admin. Trying to reconnect : [serviceCode=dev]","title":"10-2. Arcus admin\uacfc \uc5f0\uacb0\uc774 \ub2e8\uc808 \ub418\uc5c8\uc744 \ub54c"},{"location":"arcus-java-client/10.-log-message/#10-3-arcus-admin","text":"\uc138\uc158\uc774 \ub9cc\ub8cc\ub418\ub294 \uacbd\uc6b0\ub294 admin\uacfc\uc758 \uc5f0\uacb0\ubb38\uc81c\ub85c heart beat\uc774 \uc81c\ub300\ub85c \ub418\uc9c0 \uc54a\uc544 \ub9cc\ub8cc\ub41c \uacbd\uc6b0\uc774\ub2e4. WARN net.spy.memcached.CacheMonitor: Session expired. Trying to reconnect to the Arcus admin : [serviceCode=dev] \uc138\uc158\uc774 \ub9cc\ub8cc\ub418\uba74 Arcus client\ub294 reconnect\ub97c \uc2dc\ub3c4\ud55c\ub2e4. INFO net.spy.memcached.CacheMonitor: Shutting down the CacheMonitor : [serviceCode=dev] WARN net.spy.memcached.CacheManager: Unexpected disconnection from Arcus admin. Trying to reconnect to Arcus admin. INFO net.spy.memcached.CacheManager: Close ZooKeeper client. Reconnect\uc5d0 \uc131\uacf5\ud558\uba74 \uc544\ub798\uc640 \uac19\uc740 \ub85c\uadf8\uac00 \ub0a8\ub294\ub2e4. WARN net.spy.memcached.CacheMonitor: Reconnected to the Arcus admin : [serviceCode=dev] ERROR net.spy.memcached.CacheMonitor: Cache list has been changed : From=null, To=[10.0.0.1:11211-arcus01.companyname.com, 10.0.0.2:11211-arcus02.companyname.com] : [serviceCode=dev]","title":"10-3. Arcus admin \uc138\uc158\uc774 \ub9cc\ub8cc\ub418\uc5c8\uc744 \ub54c"},{"location":"arcus-java-client/10.-log-message/#10-4-object-serialization","text":"\uc800\uc7a5\ud558\ub294 \uac12\uc774 serializable\ud558\uc9c0 \uc54a\uac70\ub098 null\uc77c \uacbd\uc6b0 \uc544\ub798\uc640 \uac19\uc740 \uc624\ub958 \uba54\uc2dc\uc9c0\ub97c \ub0a8\uae34\ub2e4. Null\uc744 \uc800\uc7a5\ud558\ub824 \ud558\ub294 \uacbd\uc6b0 Can\u2019t serialize null \uc800\uc7a5\ud558\ub824\ub294 \uac12\uc774 serializable\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0 java.lang.IllegalArgumentException: Non-serializable object, cause=\uc6d0\uc778 \uc774 \ub54c \uc6d0\uc778 \uc5d0 serialize \uc2e4\ud328 \uc6d0\uc778\uc774 \ub418\ub294 \ud074\ub798\uc2a4\uc774\ub984\uc774 \ubcf4\uc5ec\uc9c4\ub2e4.","title":"10-4. Object serialization \ubb38\uc81c"},{"location":"arcus-java-client/10.-log-message/#10-5-out-of-memory-storing-object","text":"Expire time\uc744 -1\ub85c \uc9c0\uc815\ud558\uc5ec \uc544\uc774\ud15c\uc744 \uc800\uc7a5\ud560 \ub54c \u201cout of memory storing object\u201d\uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc774\uc720\ub294 Arcus\uc11c\ubc84\ub97c \uc2e4\ud589\ud560 \ub54c \ubc31\ubd84\uc728\ub85c \uc9c0\uc815\ud55c sticky item \uc800\uc7a5 \uc601\uc5ed\uc774 \uac00\ub4dd \ucc3c\uae30 \ub54c\ubb38\uc774\ub2e4. Sticky item\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ube44\uc728\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c\uc5d0\ub3c4 \ub3d9\uc77c\ud55c \uc624\ub958\uba54\uc2dc\uc9c0\uac00 \ub098\ud0c0\ub09c\ub2e4. [ERROR](StoreOperationImpl :? ) Error: SERVER_ERROR out of memory storing object [INFO ](MemcachedConnection :? ) Reconnection due to exception handling a memcached operation on {QA sa=/ 127.0.0.1:11211, #Rops=2, #Wops=0, #iq=0, topRop=net.spy.memcached.protocol.ascii.StoreOperationImpl@250d593e, topWop=null, toWrite=0, interested=1}. This may be due to an authentication failure. OperationException: SERVER: SERVER_ERROR out of memory storing object at net.spy.memcached.protocol.BaseOperationImpl.handleError(BaseOperationImpl.java:127) at net.spy.memcached.protocol.ascii.OperationImpl.readFromBuffer(OperationImpl.java:131) at net.spy.memcached.MemcachedConnection.handleReads(MemcachedConnection.java:457) at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:389) at net.spy.memcached.MemcachedConnection.handleIO(MemcachedConnection.java:182) at net.spy.memcached.MemcachedClient.run(MemcachedClient.java:1630)","title":"10-5. out of memory storing object"},{"location":"arcus-java-client/10.-log-message/#10-6-operation-timeout","text":"timeout\uc2dc\uac04 \ub0b4\uc5d0 \uc0ac\uc6a9\uc790\uac00 \uc694\uccad\ud55c \uacb0\uacfc \uac12\uc744 \ubc18\ud658\ud574 \uc904 \uc218 \uc5c6\uc73c\uba74 \uc544\ub798 \ub85c\uadf8\ub97c \ub0a8\uae30\uace0 TimeoutException\uc744 \ub358\uc9c4\ub2e4. net.spy.memcached.internal.CheckedOperationTimeoutException: Timed out waiting for operation. > 300 - failing node: /127.0.0.1:11211 [WRITING] [#iq=13 #Wops=7 #Rops=10 #CT=13] \ub85c\uadf8\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uba54\uc138\uc9c0 \uc124\uba85 Timed out waiting for operation. > 300 MILLISECONDS Timeout \uac12\uc774 300ms\ub85c \uc9c0\uc815\ub418\uc5b4\uc788\uace0 \uc694\uccad\uc758 \uacb0\uacfc\ub97c \ubc1b\uae30\uae4c\uc9c0300ms\uc774\uc0c1 \uac78\ub824\uc11c timeout\ub418\uc5c8\ub2e4. Failing node: /127.0.0.1:11211 \ud574\ub2f9 \uc694\uccad\uc740 127.0.0.1:11211 \uc5d0\uc11c \uc218\ud589\ud55c\ub2e4. [WRITING] \ud574\ub2f9 \uc694\uccad\uc740 socket write\ub97c \uc704\ud574 \ub300\uae30 \uc911\uc774\ub2e4. [READING] \ud574\ub2f9 \uc694\uccad\uc740 \uc11c\ubc84\ub85c \uc804\ub2ec\ub418\uc5c8\uace0 \uacb0\uacfc\uac00 \ub3cc\uc544\uc624\uae30\ub97c \uae30\ub2e4\ub9ac\uac70\ub098, \uacb0\uacfc \uac12\uc744 \uc77d\uc5b4 \ub4e4\uc774\ub294 \uc911\uc774\ub2e4. #iq \ud574\ub2f9 Arcus node Input queue\uc5d0\uc11c \ub300\uae30\uc911\uc778 \uc694\uccad \uc218 #Wops Writing \uc0c1\ud0dc\uc5d0 \uc788\ub294 \uc694\uccad \uc218 #Rops Reading \uc0c1\ud0dc\uc5d0 \uc788\ub294 \uc694\uccad \uc218 #CT Continuous timeout, \ud574\ub2f9 arcus node\uc5d0\uc11c \uc5f0\uc18d\uc801\uc73c\ub85c \ubc1c\uc0dd\ud55c timeout \ud69f\uc218, \uc774 \uac12\uc774 connection factory builder\ub85c \uc9c0\uc815\ub418\ub294 timeout threshold\uac12\uc744 \ub118\uc5b4\uc11c\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ud574\ub2f9 \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc744 \ub04a\uace0 \ub2e4\uc2dc \uc5f0\uacb0\ud55c\ub2e4. \uc989, \ud574\uc11d\ud574 \ubcf4\uc790\uba74 Arcus node 127.0.0.1:11211\uc5d0 \ub300\ud574 \uc694\uccad\uc744 \ubcf4\ub0c8\ub294\ub370 300ms\uc774\ub0b4\uc5d0 \uacb0\uacfc\uac12\uc744 \ub3cc\ub824\uc904 \uc218 \uc5c6\uc5b4 \uc2e4\ud328\ud588\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uba54\uc2dc\uc9c0\ub85c \uc6d0\uc778 \ub610\ud55c \ub9e4\uc6b0 \ub2e4\uc591\ud558\ub2e4. \uc6d0\uc778\uc744 \ub098\uc5f4\ud574 \ubcf4\uc790\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. JVM Full GC time\uac12\uc774 operation timeout\uac12 \ubcf4\ub2e4 \ud074 \ub54c. WAS\uc758 full GC \uc2dc\uac04\uc744 \uce21\uc815\ud558\uc5ec timeout \uac12\uc744 \uadf8\ubcf4\ub2e4 \ud06c\uac8c \uc124\uc815\ud55c\ub2e4. Operation timeout\uc73c\ub85c \ub9e4\uc6b0 \uc791\uc740 \uac12\uc774 \uc124\uc815\ub418\uc9c0 \uc54a\uc558\ub294\uc9c0 \uc0b4\ud3b4\ubcf8\ub2e4. (\ub300\ubd80\ubd84\uc758 \uc6d0\uc778\uc774 \uc774\uac83\uc774\ub2e4.) Client\uc640 Arcus server\uac04\uc758 \ub124\ud2b8\uc6cc\ud06c \ubb38\uc81c \uc11c\ube44\uc2a4\uc640 Arcus server\uac04\uc758 \ub124\ud2b8\uc6cc\ud06c (switch, AS, DS\ub4f1)\uc5d0 \ubb38\uc81c\ub294 \uc5c6\uc5c8\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4. \uc11c\ube44\uc2a4\uc640 \uc5f0\uacb0\ub418\ub294 \uc678\ubd80 \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc5d0\ub3c4 \ubb38\uc81c\uac00 \uc788\uc5c8\ub294\uc9c0 \uc0b4\ud3b4\ubcf8\ub2e4. \ub9cc\uc57d \uc678\ubd80\uc640 \uc5f0\uacb0\ub418\ub294 \uc11c\ubc84\uac00 \uc5c6\ub2e4\uba74 Arcus admin\uc11c\ubc84\uc640 \uc5f0\uacb0\uc5d0 \ubb38\uc81c\ub294 \uc5c6\uc5c8\ub294\uc9c0 \ub85c\uadf8\ub97c \uc0b4\ud3b4\ubcf8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \uad00\ub828 \ubb38\uc81c\uac00 \uc788\uc5c8\ub354\ub77c\ub3c4 Arcus timeout\ub9cc \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Arcus timeout\uc774 1\ucd08\uc774\uace0, DB\uc640\uc758 timeout\uc774 2\ucd08\ub77c\uace0 \ud560 \ub54c. network\ub2e8\uc808\uc774 1.5\ucd08\uac04 \uc788\uc5c8\ub2e4 \ud558\uba74 Arcus timeout\uba54\uc2dc\uc9c0\ub9cc \ub0a8\uac8c \ub420 \uac83\uc774\ub2e4. \ub124\ud2b8\uc6cc\ud06c \ub2e8\uc808\uc774 3\ucd08\uac04 \ubc1c\uc0dd\ud588\ub2e4\uace0 \ud558\uba74 Arcus |- timeout\uc774 \uba3c\uc800 \ubc1c\uc0dd\ud558\uace0 \ub4a4\ub530\ub77c\uc11c DB timeout\uc774 \ubc1c\uc0dd\ud558\ub294 \uac83\ucc98\ub7fc \ubcf4\uc77c \uac83\uc774\ub2e4. \ub300\ubd80\ubd84 \uc774\uc640 \uac19\uc740 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uba74 WAS\uc758 thread\uac00 \uc99d\uac00\ud558\ub294 \ud604\uc0c1\uc744 \ubcf4\uc778\ub2e4. Request process thread\uac00 timeout\ub0b4\uc5d0 \uc751\ub2f5\uc744 \uc8fc\uc9c0 \ubabb\ud558\uac8c \ub418\uba74 \ucd94\uac00\ub85c \ub4e4\uc5b4\uc624\ub294 \uc694\uccad\uc744 \ubc1b\uae30 \uc704\ud55c thread\uac00 \ucd94\uac00\ub85c \uc0dd\uc131\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. Arcus server Arcus \uc11c\ubc84\uc758 \ud558\ub4dc\uc6e8\uc5b4 \ubc0fhubble \ubaa8\ub2c8\ud130 \uacb0\uacfc\ub97c \uc0b4\ud3b4\ubcf4\uace0 \uc6d0\uc778\uc744 \ucc3e\ub294\ub2e4. Timeout\uc774 \ubc1c\uc0dd\ud55c Arcus host\uac00 \ud55c \uac1c\uc778\uc9c0 \uc5ec\ub7ec \uac1c\uc778\uc9c0 \uc0b4\ud3b4\ubcf8\ub2e4. \ud55c\uacc4 Client \ud55c \uac1c\ub85c \ucc98\ub9ac\ud558\ub294\ub370 \ud55c\uacc4\uc774\ub2e4. pool\uc0ac\uc6a9\uc744 \uace0\ub824\ud574\ubcf8\ub2e4.","title":"10-6. Operation Timeout"},{"location":"arcus-java-client/11.-client-notes/","text":"Java Client \uc0ac\uc6a9\uc2dc \uc8fc\uc758\uc0ac\ud56d Counter \uc0ac\uc6a9 Arcus\uc5d0\uc11c counter\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \ucd5c\ucd08\uc5d0 set \ub610\ub294 add command\ub97c \uc774\uc6a9\ud558\uc5ec counter key\ub97c \ub4f1\ub85d\ud574\uc57c \ud55c\ub2e4. \uc77c\ub2e8 \ub2e4\uc74c\uacfc \uac19\uc774 \uc800\uc7a5\ud574 \ubcf4\uc790. client.set(\"nhn_counter\", 10000, 100); // \uc0ac\uc2e4\uc740 \uc808\ub300 \uc774\ub807\uac8c \uc0ac\uc6a9\ud558\uba74 \uc548\ub41c\ub2e4! \ubd84\uba85\ud788 \uc798 \uc800\uc7a5\ub418\uc5c8\ub2e4\ub294 \uacb0\uacfc\ub97c \ubc1b\uc744 \uac83\uc774\ub2e4. \uc774\ubc88\uc5d0\ub294 incr counter\ub97c \uc774\uc6a9\ud574\uc11c \uac12\uc744 \uc99d\uac00\uc2dc\ucf1c \ubcf4\uc790. Future<Long> f = client.asyncIncr(\"nhn_counter\", 1); Object o = f.get(1000, TimeUnit.MILLISECONDS); \uadf8\ub7f0\ub370, \uc774\ubc88\uc5d0\ub294 \u201ccannot increment or decrement non-numeric value\u201d \ub77c\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ubc1b\uc744 \uac83\uc774\ub2e4. Cache \uc11c\ubc84\uc5d0\uc11c \uc9c1\uc811 counter \uc815\ubcf4\ub97c \uc870\ud68c\ud574 \ubcf4\uba74 \u201cd\u201d\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\uc744 \uac83\uc774\ub2e4. \uc65c \uc774\ub7f0 \uc77c\uc774 \ubc8c\uc5b4\uc84c\uc744\uae4c? \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 2\uac00\uc9c0\ub2e4. Cache server\uc5d0 \uc800\uc7a5\ud560 \ub54c data type\uc744 \ubcf4\ub0b4\uc9c0 \uc54a\uc558\uc73c\ub2c8, \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \ub54c byte \uac12\uc744 \uadf8\ub300\ub85c \uc800\uc7a5\ud560 \uac83\uc774\ub2e4. \ucc38\uace0\ub85c 100\uc758 \ube44\ud2b8 \uac12\uc740 \u201c01100100\u201d\uc774\ub2c8\uae4c ASCII code \uac12\uc73c\ub85c\ub294 \u201cd\u201d\ub2e4. \uadf8\ub7ec\uba74 counter\uc5d0\uc11c\ub294 \uc774 \uac12\uc744 int\uac12\uc73c\ub85c \ubcc0\uacbd\ud558\uba74 \ub418\uc9c0 \uc54a\uc744\uae4c \uc0dd\uac01\ud558\uaca0\uc9c0\ub9cc \uc5ec\uae30\uc5d0\ub294 \ub610 \ub2e4\ub978 \uc774\uc720\uac00 \uc788\ub2e4. Cache server\ub294 multi-platform\uc744 \uc9c0\uc6d0\ud574\uc57c \ud558\ubbc0\ub85c byte-ordering(endianness)\uc5d0 \uc0c1\uad00\uc5c6\uc774 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uc880 \ub354 \uc790\uc138\ud558\uac8c \ub9d0\ud558\uba74 cache server\uc758 counter\ub294 Integer \uac12\ub9cc \ubc1b\uc744 \uc218 \uc788\uac8c \ub418\uc5b4 \uc788\ub294\ub370, platform\uc5d0 \uc0c1\uad00\uc5c6\uc774 \ub3d9\uc791\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc740 \uc624\uc9c1 String\uc73c\ub85c \uac12\uc744 \uc785\ub825\ud560 \uc218\ubc16\uc5d0 \uc5c6\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d cache server\uac00 primitive\uac12\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uc989 byte-ordering\uc774 \uc11c\ub85c \ub2e4\ub978 client\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 counter\uac00 \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uc55e\uc11c \uc5b8\uae09\ud588\ub4ef\uc774 \u201cd\u201d\uac12\uc744 integer\uac12\uc73c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc5c6\uc5c8\ub358 \uac83\uc774\ub2e4. Arcus\ub294 counter \ub85c \uc0ac\uc6a9\ud560 \ub370\uc774\ud130\uc758 \ucd5c\ucd08 \uac12\uc740 \ubc18\ub4dc\uc2dc String\uc73c\ub85c \uc9c0\uc815\ud558\ub3c4\ub85d \uac15\uc81c\ud558\uace0 \uc788\ub2e4. \ub530\ub77c\uc11c, \ubc18\ub4dc\uc2dc \ucd5c\ucd08 \uac12\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 String \uac12\uc73c\ub85c \uc124\uc815\ud574\uc57c \ud55c\ub2e4. client.set(\"nhn_counter\", 10000, \"100\"); // \ubc18\ub4dc\uc2dc \uc774\ub807\uac8c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4! \ucc38\uace0\ub85c, \uc815\ub9d0 \uc6b4\uc774 \uc88b\uc740 \uac1c\ubc1c\uc790\ub294 integer \uac12\uc73c\ub85c \ub4f1\ub85d\ud574\ub3c4 \uc5d0\ub7ec\uac00 \ub098\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 52\ub85c \ucd08\uae30\uac12\uc744 \uc800\uc7a5\ud55c\ub2e4\uace0 \ud558\uba74, \uc774\ubc88\uc5d0\ub294 counter\ub97c \uc0ac\uc6a9\ud574\ub3c4 \uc5d0\ub7ec\uac00 \ub098\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 52\uc758 ASCII code\uac12\uc774 4\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub9ac\uace0, arcus client\uc5d0\uc11c incr/decr command\uc758 \uc785\ub825 \uac12\uc744 primitive \ub610\ub294 numeric wrapper \uac12\uc73c\ub85c \ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \ub418\uc5b4 \uc788\uc73c\ub098, \ub0b4\ubd80\uc801\uc73c\ub85c\ub294 String\uc73c\ub85c \ubcc0\ud658 \ud6c4 cache server\ub85c \uc804\ub2ec\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4. Operation Queue Block Timeout \uc124\uc815 setOpQueueMaxBlockTime(long t) \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec queue\uc5d0 operation\uc744 \ub4f1\ub85d\ud560 \ub54c timeout\uc744 \uc124\uc815\ud55c \uacbd\uc6b0, \ubaa8\ub4e0 operation\uc740 IllegalStateException\uc744 \ub2e4\uc74c \ucf54\ub4dc\uc640 \uac19\uc774 catch\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. Future<Boolean> future = null; try { future = client.set(key, 60 * 60 * 24, value); } catch (IllegalStateException ise) { // operation queue\uac00 full \uc0c1\ud0dc\uc5ec\uc11c timeout \ub0b4\uc5d0 Operation\uc744 \ub4f1\ub85d\ud558\uc9c0 \ubabb\ud55c \uacbd\uc6b0 System.out.println(\"illegal state exception\"); } if (future != null) { try { boolean result = future.get(1000, TimeUnit.MILLISECONDS); } catch (TimeoutException e) { f.cancel(true); System.out.println(\"timeout exception\"); } catch (ExecutionException e) { f.cancel(true); System.out.println(\"execution exception\"); } catch (InterruptedException e) { f.cancel(true); System.out.println(\"interrupted exception\"); } } Operation queue block timeout \uc635\uc158\uc744 \uc124\uc815\ud558\uc9c0 \uc54a\uc73c\uba74, \uc791\uc5c5 \uc694\uccad\uc744 \ud558\ub294 client \ud568\uc218\ub4e4\uc740 \ubaa8\ub450 blocking\uc744 \ub2f9\ud560 \uc218\uac00 \uc788\ub2e4. \ubb3c\ub860, \uc2e4\uc81c\ub85c future.get \uc218\ud589\uc2dc \uc815\uc0c1 \ucc98\ub9ac\uac00 \ub418\ub4e0 exception\uc774 \ub098\uc11c \ucde8\uc18c\uac00 \ub418\ub4e0 operation queue\uc5d0 \ub4f1\ub85d\ub41c \uc791\uc5c5\uc740 \uc9c0\uc18d\uc801\uc73c\ub85c \ube60\uc838\ub098\uac00 operation queue\uc5d0 \uc791\uc5c5\uc744 \ub4f1\ub85d\ud560 \uacf5\uac04\uc740 \ub290\ub9ac\uc9c0\ub9cc \uc0dd\uae38 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098, request \uc694\uccad \uc18d\ub3c4\uac00 operation queue\uc5d0 \ub4f1\ub85d\ub41c \uc791\uc5c5\uc758 \ucc98\ub9ac \uc18d\ub3c4\ubcf4\ub2e4 \ub9e4\uc6b0 \ube60\ub974\ub2e4\uba74, \ud574\ub2f9 request\ub97c \uc694\uccad\ud558\ub294 \uac83\ubcf4\ub2e4 \ucc28\ub77c\ub9ac \ubc14\ub85c \uc2e4\ud328\ub85c \ucc98\ub9ac\ud558\uace0, back-end \ub370\uc774\ud130 \uc800\uc7a5\uc18c\ub85c \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \uac83\uc774 \ub354 \uc88b\uc740 \uc120\ud0dd\uc774 \ub420 \uc218 \uc788\ub2e4. Expiretime \uc124\uc815 Expiretime\uc740 \ucd08 \ub2e8\uc704\ub85c \uc9c0\uc815\ub41c \uc2dc\uac04\ub9cc\ud07c \ubbf8\ub798\uc758 \uc2dc\uac04\uc778 Unix Time\uc73c\ub85c \ubcc0\uacbd\ub418\uc5b4 \uc800\uc7a5\ub41c\ub2e4. \uadf8\ub7ec\ub098, '''expire time\uc774 30\uc77c\uc744 \ucd08\uacfc\ud558\uba74 1970\ub144 \uae30\uc900\uc758 Unix time\uc73c\ub85c \ubcc0\uacbd\ub41c\ub2e4.''' \uc608\ub97c \ub4e4\uc5b4, expiretime\uc744 1000 * 60 * 60\uacfc \uac19\uc740 \uc2dd\uc73c\ub85c \ub4f1\ub85d\uc744 \ud558\uac8c \ub418\uba74 \ub300\ub7b5 40\uc77c \uc815\ub3c4\uac00 \ub418\ub294\ub370, \uc774\ub294 1970\ub144 \uae30\uc900\uc758 unix time\uc73c\ub85c \uc778\uc2dd\ub418\uc5b4 \uc544\uc8fc \uc61b\ub0a0 \uc2dc\uac04\uc774 \ub418\uc5b4 \ubc84\ub9ac\uace0 \uc989\uac01 expire\ud558\uac8c \ub41c\ub2e4. '''\ub530\ub77c\uc11c client\uc5d0\uc11c\ub294 \ubd84\uba85\ud788 \uc800\uc7a5\ud588\ub2e4\uace0 \uc0dd\uac01\ud558\uc5ec retrieval command(get, gets)\ub97c \uc218\ud589\ud588\uc744 \uacbd\uc6b0\uc5d0 cache data\uac00 \uc804\ud600 \ub098\uc624\uc9c0 \uc54a\ub294 \ud604\uc0c1\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uac83\uc774\ub2e4.''' Operation timeout \uc124\uc815 ArcusClient\uc758 \ubaa8\ub4e0 \ube44\ub3d9\uae30\ubc29\uc2dd\uc758 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud560 \ub54c timeout\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c timeout \uac12\uc744 \ubc18\ub4dc\uc2dc \uc9c0\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4. Future<Boolean> setResult = client.set(\"sample:testKey\", 10, \"testValue\"); boolean result = setResult.get(300L, TimeUnit.MILLISECONDS); \uc704 \uc608\uc81c\ub294 Arcus cache server\uc5d0 \u201ctestValue\u201d\ub97c \uc800\uc7a5\ud560 \ub54c timeout\uac12\uc744 300ms\ub85c \uc9c0\uc815\ud55c \ucf54\ub4dc\uc774\ub2e4. \uccab\uc9f8, \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \uc2dc\uc810\uc5d0\uc11c full GC(garbage collection)\uac00 \ubc1c\uc0dd\ud588\uace0, full GC time\uc774 500ms\uc600\ub2e4\uba74 \uc774 \uc694\uccad\uc740 timeout\uc774 \ub418\uac8c \ub41c\ub2e4. \ub530\ub77c\uc11c, timeout\uac12\uc740 JVM full GC time\uc744 \uace0\ub824\ud558\uc5ec \uc124\uc815\ud574\uc57c \ud55c\ub2e4. \ub300\ubd80\ubd84 \uba87\uc2ed \uac1c\uc758 timeout\uc774 \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub294 full GC time\uc774 \uae38\uc5b4\uc11c \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\uc774\ub2e4. \ub458\uc9f8, burst traffic, small packet buffer size \ub4f1\uc758 \uc774\uc720\ub85c cache client\uc640 cache server \uc0ac\uc774\uc5d0 packet retransmission\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Linux \ud658\uacbd\uc5d0\uc11c \ucd5c\uc18c retransmission timeout\uc740 200ms\uc774\uba70, \uadf8 \ub2e4\uc74c\uc758 retransmission timeout\uc740 400ms, 800ms, ... \ud615\ud0dc\ub85c \ub450 \ubc30\uc529 \uae38\uc5b4\uc9c0\uac8c \ub41c\ub2e4. Packet retransmission\uc740 \uc81c\ubc95 \ud754\ud558\uac8c \ubc1c\uc0dd\ud558\uace0 \uc788\uc73c\ubbc0\ub85c, \uc774\ub7ec\ud55c packet retransmission\uc5d0 \ub300\ud574 \uacac\ub51c \uc218 \uc788\uc744 \uc815\ub3c4\ub85c timeout\uc744 \uc124\uc815\ud558\uae38 \uad8c\uc7a5\ud55c\ub2e4. \ub530\ub77c\uc11c, 300ms, 700ms \uc815\ub3c4\uac00 \uad8c\uc7a5\ub418\ub294 timeout \uac12\uc774\ub2e4.","title":"11. client notes"},{"location":"arcus-java-client/11.-client-notes/#java-client","text":"","title":"Java Client \uc0ac\uc6a9\uc2dc \uc8fc\uc758\uc0ac\ud56d"},{"location":"arcus-java-client/11.-client-notes/#counter","text":"Arcus\uc5d0\uc11c counter\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \ucd5c\ucd08\uc5d0 set \ub610\ub294 add command\ub97c \uc774\uc6a9\ud558\uc5ec counter key\ub97c \ub4f1\ub85d\ud574\uc57c \ud55c\ub2e4. \uc77c\ub2e8 \ub2e4\uc74c\uacfc \uac19\uc774 \uc800\uc7a5\ud574 \ubcf4\uc790. client.set(\"nhn_counter\", 10000, 100); // \uc0ac\uc2e4\uc740 \uc808\ub300 \uc774\ub807\uac8c \uc0ac\uc6a9\ud558\uba74 \uc548\ub41c\ub2e4! \ubd84\uba85\ud788 \uc798 \uc800\uc7a5\ub418\uc5c8\ub2e4\ub294 \uacb0\uacfc\ub97c \ubc1b\uc744 \uac83\uc774\ub2e4. \uc774\ubc88\uc5d0\ub294 incr counter\ub97c \uc774\uc6a9\ud574\uc11c \uac12\uc744 \uc99d\uac00\uc2dc\ucf1c \ubcf4\uc790. Future<Long> f = client.asyncIncr(\"nhn_counter\", 1); Object o = f.get(1000, TimeUnit.MILLISECONDS); \uadf8\ub7f0\ub370, \uc774\ubc88\uc5d0\ub294 \u201ccannot increment or decrement non-numeric value\u201d \ub77c\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ubc1b\uc744 \uac83\uc774\ub2e4. Cache \uc11c\ubc84\uc5d0\uc11c \uc9c1\uc811 counter \uc815\ubcf4\ub97c \uc870\ud68c\ud574 \ubcf4\uba74 \u201cd\u201d\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\uc744 \uac83\uc774\ub2e4. \uc65c \uc774\ub7f0 \uc77c\uc774 \ubc8c\uc5b4\uc84c\uc744\uae4c? \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 2\uac00\uc9c0\ub2e4. Cache server\uc5d0 \uc800\uc7a5\ud560 \ub54c data type\uc744 \ubcf4\ub0b4\uc9c0 \uc54a\uc558\uc73c\ub2c8, \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \ub54c byte \uac12\uc744 \uadf8\ub300\ub85c \uc800\uc7a5\ud560 \uac83\uc774\ub2e4. \ucc38\uace0\ub85c 100\uc758 \ube44\ud2b8 \uac12\uc740 \u201c01100100\u201d\uc774\ub2c8\uae4c ASCII code \uac12\uc73c\ub85c\ub294 \u201cd\u201d\ub2e4. \uadf8\ub7ec\uba74 counter\uc5d0\uc11c\ub294 \uc774 \uac12\uc744 int\uac12\uc73c\ub85c \ubcc0\uacbd\ud558\uba74 \ub418\uc9c0 \uc54a\uc744\uae4c \uc0dd\uac01\ud558\uaca0\uc9c0\ub9cc \uc5ec\uae30\uc5d0\ub294 \ub610 \ub2e4\ub978 \uc774\uc720\uac00 \uc788\ub2e4. Cache server\ub294 multi-platform\uc744 \uc9c0\uc6d0\ud574\uc57c \ud558\ubbc0\ub85c byte-ordering(endianness)\uc5d0 \uc0c1\uad00\uc5c6\uc774 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uc880 \ub354 \uc790\uc138\ud558\uac8c \ub9d0\ud558\uba74 cache server\uc758 counter\ub294 Integer \uac12\ub9cc \ubc1b\uc744 \uc218 \uc788\uac8c \ub418\uc5b4 \uc788\ub294\ub370, platform\uc5d0 \uc0c1\uad00\uc5c6\uc774 \ub3d9\uc791\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc740 \uc624\uc9c1 String\uc73c\ub85c \uac12\uc744 \uc785\ub825\ud560 \uc218\ubc16\uc5d0 \uc5c6\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d cache server\uac00 primitive\uac12\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uc989 byte-ordering\uc774 \uc11c\ub85c \ub2e4\ub978 client\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 counter\uac00 \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uc55e\uc11c \uc5b8\uae09\ud588\ub4ef\uc774 \u201cd\u201d\uac12\uc744 integer\uac12\uc73c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc5c6\uc5c8\ub358 \uac83\uc774\ub2e4. Arcus\ub294 counter \ub85c \uc0ac\uc6a9\ud560 \ub370\uc774\ud130\uc758 \ucd5c\ucd08 \uac12\uc740 \ubc18\ub4dc\uc2dc String\uc73c\ub85c \uc9c0\uc815\ud558\ub3c4\ub85d \uac15\uc81c\ud558\uace0 \uc788\ub2e4. \ub530\ub77c\uc11c, \ubc18\ub4dc\uc2dc \ucd5c\ucd08 \uac12\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 String \uac12\uc73c\ub85c \uc124\uc815\ud574\uc57c \ud55c\ub2e4. client.set(\"nhn_counter\", 10000, \"100\"); // \ubc18\ub4dc\uc2dc \uc774\ub807\uac8c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4! \ucc38\uace0\ub85c, \uc815\ub9d0 \uc6b4\uc774 \uc88b\uc740 \uac1c\ubc1c\uc790\ub294 integer \uac12\uc73c\ub85c \ub4f1\ub85d\ud574\ub3c4 \uc5d0\ub7ec\uac00 \ub098\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 52\ub85c \ucd08\uae30\uac12\uc744 \uc800\uc7a5\ud55c\ub2e4\uace0 \ud558\uba74, \uc774\ubc88\uc5d0\ub294 counter\ub97c \uc0ac\uc6a9\ud574\ub3c4 \uc5d0\ub7ec\uac00 \ub098\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 52\uc758 ASCII code\uac12\uc774 4\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub9ac\uace0, arcus client\uc5d0\uc11c incr/decr command\uc758 \uc785\ub825 \uac12\uc744 primitive \ub610\ub294 numeric wrapper \uac12\uc73c\ub85c \ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \ub418\uc5b4 \uc788\uc73c\ub098, \ub0b4\ubd80\uc801\uc73c\ub85c\ub294 String\uc73c\ub85c \ubcc0\ud658 \ud6c4 cache server\ub85c \uc804\ub2ec\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4.","title":"Counter \uc0ac\uc6a9"},{"location":"arcus-java-client/11.-client-notes/#operation-queue-block-timeout","text":"setOpQueueMaxBlockTime(long t) \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec queue\uc5d0 operation\uc744 \ub4f1\ub85d\ud560 \ub54c timeout\uc744 \uc124\uc815\ud55c \uacbd\uc6b0, \ubaa8\ub4e0 operation\uc740 IllegalStateException\uc744 \ub2e4\uc74c \ucf54\ub4dc\uc640 \uac19\uc774 catch\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. Future<Boolean> future = null; try { future = client.set(key, 60 * 60 * 24, value); } catch (IllegalStateException ise) { // operation queue\uac00 full \uc0c1\ud0dc\uc5ec\uc11c timeout \ub0b4\uc5d0 Operation\uc744 \ub4f1\ub85d\ud558\uc9c0 \ubabb\ud55c \uacbd\uc6b0 System.out.println(\"illegal state exception\"); } if (future != null) { try { boolean result = future.get(1000, TimeUnit.MILLISECONDS); } catch (TimeoutException e) { f.cancel(true); System.out.println(\"timeout exception\"); } catch (ExecutionException e) { f.cancel(true); System.out.println(\"execution exception\"); } catch (InterruptedException e) { f.cancel(true); System.out.println(\"interrupted exception\"); } } Operation queue block timeout \uc635\uc158\uc744 \uc124\uc815\ud558\uc9c0 \uc54a\uc73c\uba74, \uc791\uc5c5 \uc694\uccad\uc744 \ud558\ub294 client \ud568\uc218\ub4e4\uc740 \ubaa8\ub450 blocking\uc744 \ub2f9\ud560 \uc218\uac00 \uc788\ub2e4. \ubb3c\ub860, \uc2e4\uc81c\ub85c future.get \uc218\ud589\uc2dc \uc815\uc0c1 \ucc98\ub9ac\uac00 \ub418\ub4e0 exception\uc774 \ub098\uc11c \ucde8\uc18c\uac00 \ub418\ub4e0 operation queue\uc5d0 \ub4f1\ub85d\ub41c \uc791\uc5c5\uc740 \uc9c0\uc18d\uc801\uc73c\ub85c \ube60\uc838\ub098\uac00 operation queue\uc5d0 \uc791\uc5c5\uc744 \ub4f1\ub85d\ud560 \uacf5\uac04\uc740 \ub290\ub9ac\uc9c0\ub9cc \uc0dd\uae38 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098, request \uc694\uccad \uc18d\ub3c4\uac00 operation queue\uc5d0 \ub4f1\ub85d\ub41c \uc791\uc5c5\uc758 \ucc98\ub9ac \uc18d\ub3c4\ubcf4\ub2e4 \ub9e4\uc6b0 \ube60\ub974\ub2e4\uba74, \ud574\ub2f9 request\ub97c \uc694\uccad\ud558\ub294 \uac83\ubcf4\ub2e4 \ucc28\ub77c\ub9ac \ubc14\ub85c \uc2e4\ud328\ub85c \ucc98\ub9ac\ud558\uace0, back-end \ub370\uc774\ud130 \uc800\uc7a5\uc18c\ub85c \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \uac83\uc774 \ub354 \uc88b\uc740 \uc120\ud0dd\uc774 \ub420 \uc218 \uc788\ub2e4.","title":"Operation Queue Block Timeout \uc124\uc815"},{"location":"arcus-java-client/11.-client-notes/#expiretime","text":"Expiretime\uc740 \ucd08 \ub2e8\uc704\ub85c \uc9c0\uc815\ub41c \uc2dc\uac04\ub9cc\ud07c \ubbf8\ub798\uc758 \uc2dc\uac04\uc778 Unix Time\uc73c\ub85c \ubcc0\uacbd\ub418\uc5b4 \uc800\uc7a5\ub41c\ub2e4. \uadf8\ub7ec\ub098, '''expire time\uc774 30\uc77c\uc744 \ucd08\uacfc\ud558\uba74 1970\ub144 \uae30\uc900\uc758 Unix time\uc73c\ub85c \ubcc0\uacbd\ub41c\ub2e4.''' \uc608\ub97c \ub4e4\uc5b4, expiretime\uc744 1000 * 60 * 60\uacfc \uac19\uc740 \uc2dd\uc73c\ub85c \ub4f1\ub85d\uc744 \ud558\uac8c \ub418\uba74 \ub300\ub7b5 40\uc77c \uc815\ub3c4\uac00 \ub418\ub294\ub370, \uc774\ub294 1970\ub144 \uae30\uc900\uc758 unix time\uc73c\ub85c \uc778\uc2dd\ub418\uc5b4 \uc544\uc8fc \uc61b\ub0a0 \uc2dc\uac04\uc774 \ub418\uc5b4 \ubc84\ub9ac\uace0 \uc989\uac01 expire\ud558\uac8c \ub41c\ub2e4. '''\ub530\ub77c\uc11c client\uc5d0\uc11c\ub294 \ubd84\uba85\ud788 \uc800\uc7a5\ud588\ub2e4\uace0 \uc0dd\uac01\ud558\uc5ec retrieval command(get, gets)\ub97c \uc218\ud589\ud588\uc744 \uacbd\uc6b0\uc5d0 cache data\uac00 \uc804\ud600 \ub098\uc624\uc9c0 \uc54a\ub294 \ud604\uc0c1\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uac83\uc774\ub2e4.'''","title":"Expiretime \uc124\uc815"},{"location":"arcus-java-client/11.-client-notes/#operation-timeout","text":"ArcusClient\uc758 \ubaa8\ub4e0 \ube44\ub3d9\uae30\ubc29\uc2dd\uc758 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud560 \ub54c timeout\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c timeout \uac12\uc744 \ubc18\ub4dc\uc2dc \uc9c0\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4. Future<Boolean> setResult = client.set(\"sample:testKey\", 10, \"testValue\"); boolean result = setResult.get(300L, TimeUnit.MILLISECONDS); \uc704 \uc608\uc81c\ub294 Arcus cache server\uc5d0 \u201ctestValue\u201d\ub97c \uc800\uc7a5\ud560 \ub54c timeout\uac12\uc744 300ms\ub85c \uc9c0\uc815\ud55c \ucf54\ub4dc\uc774\ub2e4. \uccab\uc9f8, \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \uc2dc\uc810\uc5d0\uc11c full GC(garbage collection)\uac00 \ubc1c\uc0dd\ud588\uace0, full GC time\uc774 500ms\uc600\ub2e4\uba74 \uc774 \uc694\uccad\uc740 timeout\uc774 \ub418\uac8c \ub41c\ub2e4. \ub530\ub77c\uc11c, timeout\uac12\uc740 JVM full GC time\uc744 \uace0\ub824\ud558\uc5ec \uc124\uc815\ud574\uc57c \ud55c\ub2e4. \ub300\ubd80\ubd84 \uba87\uc2ed \uac1c\uc758 timeout\uc774 \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub294 full GC time\uc774 \uae38\uc5b4\uc11c \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\uc774\ub2e4. \ub458\uc9f8, burst traffic, small packet buffer size \ub4f1\uc758 \uc774\uc720\ub85c cache client\uc640 cache server \uc0ac\uc774\uc5d0 packet retransmission\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Linux \ud658\uacbd\uc5d0\uc11c \ucd5c\uc18c retransmission timeout\uc740 200ms\uc774\uba70, \uadf8 \ub2e4\uc74c\uc758 retransmission timeout\uc740 400ms, 800ms, ... \ud615\ud0dc\ub85c \ub450 \ubc30\uc529 \uae38\uc5b4\uc9c0\uac8c \ub41c\ub2e4. Packet retransmission\uc740 \uc81c\ubc95 \ud754\ud558\uac8c \ubc1c\uc0dd\ud558\uace0 \uc788\uc73c\ubbc0\ub85c, \uc774\ub7ec\ud55c packet retransmission\uc5d0 \ub300\ud574 \uacac\ub51c \uc218 \uc788\uc744 \uc815\ub3c4\ub85c timeout\uc744 \uc124\uc815\ud558\uae38 \uad8c\uc7a5\ud55c\ub2e4. \ub530\ub77c\uc11c, 300ms, 700ms \uc815\ub3c4\uac00 \uad8c\uc7a5\ub418\ub294 timeout \uac12\uc774\ub2e4.","title":"Operation timeout \uc124\uc815"},{"location":"arcus-java-client/2.-arcus-java-client/","text":"2-1. Arcus Client \uae30\ubcf8 \uc0ac\uc6a9\ubc95 \uc608\uc81c\ub97c \ud1b5\ud574 Arcus java client \uae30\ubcf8 \uc0ac\uc6a9\ubc95\uc744 \uc54c\uc544\ubcf8\ub2e4. \uc544\ub798 \uc608\uc81c\ub294 Arcus cache\uc5d0 key\uac00 \u201csample:testKey\u201d\uc774\uace0 value\uac00 \u201ctestValue\u201d\uc778 cache item\uc744 \uc800\uc7a5\ud55c\ub2e4. package com.navercorp.arcus.example; import java.util.concurrent.ExecutionException; import java.util.concurrent.Future; import java.util.concurrent.TimeUnit; import java.util.concurrent.TimeoutException; import net.spy.memcached.ArcusClient; import net.spy.memcached.ConnectionFactoryBuilder; public class HelloArcus { private static final String ARCUS_ADMIN = \"10.0.0.1:2181,10.0.0.2:2181,10.0.0.3:2181\"; private static final String SERVICE_CODE = \"test\"; private final ArcusClient arcusClient; public static void main(String[] args) { HelloArcus hello = new HelloArcus(); System.out.printf(\"hello.setTest() result=%b\", hello.setTest()); hello.closeArcusConnection(); } public HelloArcus() { arcusClient = ArcusClient.createArcusClient(ARCUS_ADMIN, SERVICE_CODE, new ConnectionFactoryBuilder()); // (1) } public boolean setTest() { Future<Boolean> future = null; try { future = arcusClient.set(\"sample:testKey\", 10, \"testValue\"); // (2) } catch (IllegalStateException e) { // client operation queue \ubb38\uc81c\ub85c \uc694\uccad\uc774 \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc558\uc744 \ub54c \uc608\uc678\ucc98\ub9ac. } if (future == null) return false; try { return future.get(500L, TimeUnit.MILLISECONDS); // (3) } catch (TimeoutException te) { // (4) future.cancel(true); } catch (ExecutionException re) { // (5) future.cancel(true); } catch (InterruptedException ie) { // (6) future.cancel(true); } return false; } public void closeArcusConnection() { arcusClient.shutdown(); // (7) } } (1) ArcusClient \ud074\ub798\uc2a4\uc758 \uac1d\uccb4(client \uac1d\uccb4)\ub97c \uc0dd\uc131\ud55c\ub2e4. Client \uac1d\uccb4\ub294 \ub9e4 \uc694\uccad\ub9c8\ub2e4 \uc0dd\uc131\ud558\uc9c0 \uc54a\uace0 \ubbf8\ub9ac \ud558\ub098\ub97c \ub9cc\ub4e4\uc5b4 \uc7ac\ud65c\uc6a9\ud558\ub3c4\ub85d \ud55c\ub2e4. Arcus\uc5d0 \uc811\uc18d\ud560 \ub54c, \uac01\uc885 \uc124\uc815\uc744 \ubcc0\uacbd\ud558\uae30 \uc704\ud574\uc11c ConnectionFactoryBuilder\ub97c \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc798\ubabb\ub41c SERVICE_CODE\ub97c \uc9c0\uc815\ud588\ub2e4\uba74 NotExistsServiceCodeException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. SERVICE_CODE\ub294 \uc62c\ubc14\ub974\uc9c0\ub9cc \uc811\uc18d \uac00\ub2a5\ud55c cache \uc11c\ubc84(\ub610\ub294 \ub178\ub4dc)\uac00 \uc5c6\ub2e4\uba74, \ubaa8\ub4e0 \uc694\uccad\uc740 Exception\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. Cache \uc11c\ubc84\uac00 \uad6c\ub3d9\ub418\uc5b4 \uc811\uc18d\uc774 \uac00\ub2a5\ud574\uc9c0\uba74, \uc790\ub3d9\uc73c\ub85c \ud574\ub2f9 cache \uc11c\ubc84\ub85c \uc5f0\uacb0\ud558\uc5ec \uc815\uc0c1 \uc11c\ube44\uc2a4\ud558\uac8c \ub41c\ub2e4. (2) Client \uac1d\uccb4\uc758 set \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c Boolean \uac12\uc744 \uac16\ub294 Future \ud074\ub798\uc2a4\uc758 \uac1d\uccb4(future \uac1d\uccb4)\ub85c \ubc1b\ub294\ub2e4. \uc800\uc7a5\ud560 \uac12\uc73c\ub85c \"\"(\uae38\uc774\uac00 0\uc778 \ubb38\uc790\uc5f4)\uc744 \ub123\uc73c\uba74, \"\"\uc774 \uadf8\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. (\ud574\ub2f9 key\uac00 \uc0ad\uc81c\ub418\uc9c0 \uc54a\ub294\ub2e4.) \uc800\uc7a5\ud560 \uac12\uc73c\ub85c null\uc744 \uc9c0\uc815\ud560 \uc218 \uc5c6\ub2e4. (key \uc0ad\uc81c \uc758\ub3c4\uc774\uba74, delete \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.) \uc800\uc7a5\ud560 \uac12\uc740 serializable\ud574\uc57c \ud55c\ub2e4. (\uc0ac\uc6a9\uc790 \uc815\uc758 \ud074\ub798\uc2a4\uc758 \uacbd\uc6b0 Serializable \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud574\uc57c \ud55c\ub2e4.) (3) Future \uac1d\uccb4\uc758 \uac12\uc744 \ubc1b\uc544\uc11c result\uc5d0 \ub2f4\ub294\ub2e4. (\ub9cc\uc57d set \uc791\uc5c5\uc774 \uc2e4\ud328\ud558\uc600\uc744 \uacbd\uc6b0\uc5d0\ub294 false\uac00 \ubc18\ud658\ub41c\ub2e4.) Cache \uc11c\ubc84\uc5d0 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub2e4\uc2dc \ub9d0\ud574 cache miss\uc774\ub77c\uba74, null\uc774 \ubc18\ud658\ub41c\ub2e4. \uae38\uc774\uac00 0\uc778 \ubb38\uc790\uc5f4(\u201c\u201d)\uc740 cache miss\uac00 \uc544\ub2c8\uace0 \u201c\u201d\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \uac83\uc774\ub2e4. (4) \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, timeout \uc2dc\uac04\uc744 500ms\ub85c \uc9c0\uc815\ud588\ub294\ub370 GC time\uc774 600ms\uac78\ub838\ub2e4\uba74 Arcus cache \uc11c\ubc84\uc640 \ud1b5\uc2e0\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 100ms\ub97c \ucd08\uacfc\ud588\uae30 \ub54c\ubb38\uc5d0 TimeoutException\uc774 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4. TimeoutException\uc774 \uc5f0\uc18d\ud574\uc11c n(\ub514\ud3f4\ud2b8\ub294 10)\ud68c \uc774\uc0c1 \ubc1c\uc0dd\ud558\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc744 \ub04a\uace0 \uc7ac\uc811\uc18d\ud55c\ub2e4. \uc5ec\uae30\uc5d0\uc11c n\ubc88\uc758 \uac12\uc740 ConnectionFactoryBuilder\ub97c \uc0dd\uc131\ud560 \ub54c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \ub610\ud55c, \ubaa8\ub4e0 Exception\uc774 \ubc1c\uc0dd\ud55c \uc0c1\ud669\uc5d0\uc11c\ub294 future.cancel(true)\ub97c \ubc18\ub4dc\uc2dc \ud638\ucd9c\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. (5) ArcusClient\uc758 operation queue\uc5d0 \ub300\uae30\ud558\uace0 \uc788\ub358 \uc791\uc5c5\uc774 \ucde8\uc18c\ub418\uc5c8\uc744 \ub54c, ExecutionException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. ExecutionException\uc740 \uc11c\ubc84 \ub610\ub294 \ub124\ud2b8\uc6cc\ud06c \uc7a5\uc560 \uc2dc \ubc1c\uc0dd\ud55c\ub2e4. (6) \ub2e4\ub978 \uc4f0\ub808\ub4dc\uc5d0\uc11c \ud574\ub2f9 \uc4f0\ub808\ub4dc\uc758 \uc791\uc5c5\uc744 Interrupt\ud588\uc744 \ub54c InterruptedException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. (\ubc1c\uc0dd\ud560 \uc5ec\uc9c0\uac00 \uac70\uc758 \uc5c6\ub2e4.) (7) \ud504\ub85c\uc138\uc2a4\ub97c \uc885\ub8cc\ud558\uae30 \uc804\uc5d0 \ub354 \uc774\uc0c1 ArcusClient\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \ubc18\ub4dc\uc2dc shutdown \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uc5ec \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc744 \ub04a\uc5b4\uc57c \ud55c\ub2e4. Tomcat\uacfc \uac19\uc740 WAS\uc5d0\uc11c\ub294 Tomcat\uc774 shutdown\uc774 \ub420 \ub54c shutdown \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub418\uac8c \ud558\uba74 \ub41c\ub2e4. Spring container\uc5d0\uc11c \uad00\ub9ac\ub418\ub294 \uacbd\uc6b0 bean \uc124\uc815\uc758 destroy-method\uc5d0\uc11c shutdown \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub418\ub3c4\ub85d \uc124\uc815\ud574\uc57c \ud55c\ub2e4. 2-2. Arcus Client \uc0dd\uc131, \uc18c\uba78, \uad00\ub9ac Arcus Client \uc0dd\uc131 \ud558\ub098\uc758 Arcus Client \uac1d\uccb4\ub294 Arcus cache cloud\uc5d0 \uc788\ub294 \ubaa8\ub4e0 cache server(or cache node)\uc640 \uc5f0\uacb0\uc744 \ud558\ub098\uc529 \uc0dd\uc131\ud558\uba70, \uc694\uccad\ub418\ub294 \uac01 cache item\uc758 key\uc5d0 \ub300\ud574 \uadf8 key\uac00 mapping\ub418\ub294 cache server\uc640\uc758 \uc5f0\uacb0\uc744 \uc774\uc6a9\ud558\uc5ec request\ub97c \ubcf4\ub0b4\uace0 response\ub97c \ubc1b\ub294\ub2e4. Arcus Client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \ub2e8\uc77c Arcus Client \uc0dd\uc131 Arcus Client Pool \uc0dd\uc131 \uba3c\uc800, \ub2e8\uc77c Arcus Client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uba54\uc18c\ub4dc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ArcusClient.createArcusClient(String arcusAdminAddress, String serviceCode, ConnectionFactoryBuilder cfb) arcusAdminAddress: \uc811\uadfc\ud560 cache cloud\ub97c \uad00\ub9ac\ud558\ub294 Arcus zookeeper ensemble \uc8fc\uc18c IP:port \ub9ac\uc2a4\ud2b8\uc778 \"ip1:port,ip2:port,ip3:port\" \ud615\ud0dc\ub85c \uc9c0\uc815\ud558\uac70\ub098 \"FQDN:port\" \ud615\ud0dc\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. (zookeeper IP list\uc5d0 \ub300\ud55c domain name\uc744 DNS\uc5d0 \ub4f1\ub85d\ud55c \uacbd\uc6b0) serviceCode: \uc811\uc18d\ud560 cache cloud\uc758 \uc2dd\ubcc4\uc790 cfb: Arcus client\uc758 \ub3d9\uc791 \uc124\uc815\uc744 \uc704\ud55c ConnectionFactoryBuilder \uac1d\uccb4 ARCUS_ADMIN \uc11c\ubc84\uc5d0\uc11c \uad00\ub9ac\ub418\ub294 SERVICE_CODE\uc5d0 \ud574\ub2f9\ud558\ub294 cache cloud\ub85c \uc5f0\uacb0\ud558\ub294 \ud558\ub098\uc758 ArcusClient \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); ArcusClient client = ArcusClient.createArcusClient(ARCUS_ADMIN, SERVICE_CODE, cfb); \ud558\ub098\uc758 Arcus Client\ub9cc\uc73c\ub85c\ub294 \uc751\uc6a9\uc758 requests\ub97c \ucc98\ub9ac\ud558\ub294 \uc6a9\ub7c9 \uc989, throughput\uc5d0 \ud55c\uacc4\uac00 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ud558\ub098\uc758 \uc5f0\uacb0\uc744 \ud1b5\ud574 \ud558\ub098\uc758 request\uac00 \ucc98\ub9ac\ub418\ub294 \uc2dc\uac04\uc774 1ms\ub77c \uac00\uc815\ud558\uba74, \uadf8 \uc5f0\uacb0\uc744 \ud1b5\ud574 \ucd5c\ub300 1000 requests/second \ubc16\uc5d0 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub2e4. \ub530\ub77c\uc11c, \ub9ce\uc740 \uc694\uccad \ucc98\ub9ac\ub7c9\uc774 \ud544\uc694\ud55c \uc751\uc6a9\uc778 \uacbd\uc6b0\ub294 \ub2e4\uc218\uc758 Arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc5ec\uc57c \ud55c\ub2e4. \uc774\ub97c \uc704\ud574 Arcus client pool \uac1d\uccb4\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc73c\uba70, \uc544\ub798\uc758 \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 \uc0dd\uc131\ud55c\ub2e4. ArcusClient.createArcusClientPool(String arcusAdminAddress, String serviceCode, ConnectionFactoryBuilder cfb, int poolSize); \uba54\uc18c\ub4dc\uc758 \uc778\uc790\ub85c \ub2e8\uc77c Arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud560 \uc2dc\uc758 \uc778\uc790\ub4e4 \uc678\uc5d0 pool\uc5d0 \ub4e4\uc5b4\uac08 arcus client \uac1d\uccb4 \uc218\ub97c \uc9c0\uc815\ud558\ub294 poolSize \uc778\uc790\uac00 \uc788\ub2e4. pool size\uac00 \ub108\ubb34 \uc791\uc73c\uba74 \uc751\uc6a9 \uc694\uccad\ub4e4\uc744 \uc81c\uc2dc\uac04\uc5d0 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub294 \ubb38\uc81c\uac00 \uc0dd\uae30\uace0, \ub108\ubb34 \ud06c\uba74 arcus cache server\ub85c \ubd88\ud544\uc694\ud558\uac8c \ub9ce\uc740 \uc5f0\uacb0\uc744 \ub9fa\uac8c \ud55c\ub2e4. \uc801\uc808\ud55c pool size\ub294 \"\uc751\uc6a9 \uc11c\ubc84\uc758 peak arcus request \uc694\uccad\ub7c9\"\uc744 \"\ud558\ub098\uc758 arcus client\uc758 \ucc98\ub9ac\ub7c9\"\uc73c\ub85c \ub098\ub204\uba74 \uc5bb\uc744 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c, \ud558\ub098\uc758 arcus client\uac00 \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ucc98\ub9ac\ub7c9\uc740 \uc751\uc6a9 \uc11c\ubc84\uac00 \uc694\uccad\ud558\ub294 arcus request \uc720\ud615\uacfc \uc751\uc6a9 \uc11c\ubc84\uc640 cache server \uac04\uc758 \ub124\ud2b8\uc6cd \uc0c1\ud0dc \ub4f1\uc5d0 \uc601\ud5a5\ubc1b\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c, \uc2e4\uc81c \ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud574 \ud655\uc778\ud574 \ubcf4\uace0 pool size\ub97c \uacb0\uc815\ud558\uae38 \uad8c\ud55c\ub2e4. \ud2b9\uc815 SERVICE_CODE\uc5d0 \ud574\ub2f9\ud558\ub294 cache cloud\ub85c \uc5f0\uacb0\ub418\ub294 Arcus client 4 \uac1c\ub97c \uac00\uc9c0\ub294 pool\uc744 \uc0dd\uc131\ud558\ub294 \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. int poolSize = 4; ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); ArcusClientPool pool = ArcusClient.createArcusClientPool(ARCUS_ADMIN, SERVICE_CODE, cfb, poolSize); Arcus client \uac1d\uccb4\ub97c \uc815\uc0c1\uc801\uc73c\ub85c \uc0dd\uc131\ud558\uba74, \uc544\ub798\uc758 \ub85c\uadf8\uc640 \uac19\uc774 cache cloud\uc640 \uc815\uc0c1 \uc5f0\uacb0\ub428\uc744 \ubcfc \uc218 \uc788\ub2e4. WARN net.spy.memcached.CacheManager: All arcus connections are established. Arcus cache cloud\ub85c \uc815\uc0c1 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc73c\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \ub85c\uadf8\uac00 \ubcf4\uc778\ub2e4. \uc608\ub97c \ub4e4\uc5b4 5\ub300\uc758 Cache server\uc5d0 \uc811\uc18d\uc744 \ud574\uc57c \ud558\ub294\ub370 \uc774\ub4e4 \uc911 \uc77c\ubd80 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uc9c0 \ubabb\ud588\ub2e4\uba74 \uc544\ub798 \ub85c\uadf8\uac00 \ub0a8\uac8c \ub41c\ub2e4. \uc811\uc18d \uc2e4\ud328\ud55c cache server\uc5d0 \ub300\ud574\uc11c\ub294 Arcus client\uac00 1\ucd08\uc5d0 \ud55c \ubc88\uc529 \uc790\ub3d9\uc73c\ub85c \uc7ac\uc5f0\uacb0\uc744 \uc2dc\ub3c4\ud55c\ub2e4. WARN net.spy.memcached.CacheManager: Some arcus connections are not established. Arcus Client \uc18c\uba78 ArcusClient \ub610\ub294 ArcusClientPool\ub97c \uc0ac\uc6a9\ud558\uace0 \ub09c \ub2e4\uc74c\uc5d0\ub294 \ubc18\ub4dc\uc2dc shutdown() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uc5ec client\uc640 admin, cache server\uac04\uc758 \uc5f0\uacb0\uc744 \ud574\uc81c\uc2dc\ucf1c\uc8fc\uc5b4\uc57c \ud55c\ub2e4. client.shutdown(); pool.shutdown(); Arcus Client \uc0dd\uba85\uc8fc\uae30 \uad00\ub9ac Arcus\uc5d0 \ub300\ud55c \ub9e4 \uc694\uccad\ub9c8\ub2e4 arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uace0 \uc18c\uba78\uc2dc\ud0a4\ub294 \uac83\uc740 \uc801\uc808\ud558\uc9c0 \ubabb\ud558\ub2e4. \uc751\uc6a9 \uc11c\ubc84\uc758 \uad6c\ub3d9 \uc2dc\uc5d0 arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uace0, \uc885\ub8cc \uc2dc\uc5d0 arcus client \uac1d\uccb4\ub97c \uc18c\uba78\ud558\uba74 \ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uc751\uc6a9\uc5d0\uc11c\ub294 ArcusClient wrapper\ub97c \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud560 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4. \uc774\ub807\uac8c \ud558\uba74 ArcusClient\uc758 \uc0dd\uba85\uc8fc\uae30\ub97c \uad00\ub9ac\ud558\uae30 \uc218\uc6d4\ud574\uc9c4\ub2e4. Service code\ubcc4 ArcusClient instance\ub97c \uac00\uc9c0\ub294 factory\ub97c singleton\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub450\uace0 WAS\uac00 \ucd08\uae30\ud654 \ub420 \ub54c Arcus server \uc640 \uc5f0\uacb0\uc744 \ub9fa\ub3c4\ub85d \ud558\uc790. WAS\uac00 shutdown\ub420 \ub54c ArcusClient\ub3c4 \ud568\uaed8 shutdown\ub418\ub3c4\ub85d \uc124\uc815\ud558\uba74 \uac00\uc7a5 \uc774\uc0c1\uc801\uc774\ub2e4. Cache Server List \uad00\ub9ac Arcus\ub294 cache server list\ub97c \uc790\ub3d9\uc73c\ub85c \uad00\ub9ac\ud55c\ub2e4. Cache server\ub4e4 \uc911\uc5d0 \uc77c\ubd80 \uc11c\ubc84\uac00 \uc0ac\uc6a9 \ubd88\uac00\ub2a5\ud55c \uc0c1\ud0dc\uac00 \ub418\uba74 Arcus admin\uc774 \uc790\ub3d9\uc73c\ub85c \uc0c1\ud669\uc744 \uc778\uc9c0\ud558\uace0 \ud574\ub2f9 \uc11c\ubc84\ub97c cache server list\uc5d0\uc11c \uc81c\uac70\ud558\uba70, \ubcc0\uacbd\ub41c cache server list\uac00 \uc788\uc74c\uc744 \uac01 arcus client\uc5d0 \uc54c\ub9bc\uc73c\ub85c\uc368 \uac01 arcus client\uac00 \ucd5c\uc2e0\uc758 cache server list\ub97c \uc720\uc9c0\ud558\uac8c \ud55c\ub2e4. \ubc18\ub300\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c cache server\uac00 \ucd94\uac00\ub418\uc5c8\uc744 \ub54c\uc5d0\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c, Arcus admin\uc758 \ub3c4\uc6c0\uc73c\ub85c Arcus client\ub294 \ucd5c\uc2e0\uc758 cache server list\ub97c \uc720\uc9c0\ud558\uace0, cache key\uc640 cache server\uc640\uc758 mapping\uc744 \uac31\uc2e0\ud558\uac8c \ud55c\ub2e4. \ub530\ub77c\uc11c, Arcus client\ub97c \uc0ac\uc6a9\ud560 \ub54c cache server \ub300\uc218\uc758 \ubcc0\ud654\uc5d0 \ub300\ud55c \ubc29\uc5b4 \ub85c\uc9c1\uc740 \uc2e0\uacbd \uc4f0\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. 2-3. Arcus Client \uc124\uc815 Key-Value\uc5d0\uc11c \ub370\uc774\ud130 \uc555\ucd95 \uc124\uc815 Arcus client\ub294 key-value item\uc758 \ub370\uc774\ud130 \uc555\ucd95 \ubc0f \ud574\uc81c \uae30\ub2a5\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uc989, \uc77c\uc815 \ud06c\uae30 \uc774\uc0c1\uc758 \ub370\uc774\ud130\uc774\uba74 \uadf8 \ub370\uc774\ud130\ub97c \uc555\ucd95\ud558\uc5ec cache server\uc5d0 \ubcf4\ub0b4\uc5b4 \uc800\uc7a5\ud558\uace0, cache server\ub85c \ubd80\ud130 \uac00\uc838\uc628 \ub370\uc774\ud130\uac00 \uc555\ucd95 \ub370\uc774\ud130\uc774\uba74, \ud574\uc81c\ud558\uc5ec \uc751\uc6a9\uc5d0 \uc804\ub2ec\ud55c\ub2e4. Arcus client\ub294 \uc800\uc815\ud560 \uac12\uc758 \ud06c\uae30\uac00 16KB \uc774\uc0c1\uc77c \uacbd\uc6b0\uc5d0 \uc555\ucd95\ud558\uc5ec cache server\uc5d0 \uc800\uc7a5\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4. \uc774\ub7ec\ud55c \ub370\uc774\ud130 \uc555\ucd95 \uc784\uacc4\uac12\uc740 ConnectionFactoryBuilder\uc758 setTranscoder\uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. \ub2e4\uc74c\uc740 4KB \uc774\uc0c1\uc758 \ub370\uc774\ud130\ub294 \ubaa8\ub450 \uc555\ucd95\ud558\ub3c4\ub85d \uc124\uc815\ud558\ub294 \uc608\uc81c\uc774\ub2e4. ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); SerializingTranscoder trans = new SerializingTranscoder(); trans.setCharset(\u201cUTF-8\u201d); trans.setCompressionThreshold(4096); cfb.setTranscoder(trans); ArcusClient client = ArcusClient.createArcusClient(SERVICE_CODE, cfb); Logger \uc124\uc815 Arcus client \uc0ac\uc6a9 \uc2dc\uc5d0 ArcusClient \uc790\uccb4 logger(DefaultLogger), log4j, slf4j, JDK logger \ub4f1 4\uac00\uc9c0 \uc885\ub958\uc758 Logger\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc0ac\uc6a9\ud560 logger\ub97c \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74 ArcusClient\ub294 DefaultLogger\ub97c \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\uba70, DefaultLogger\ub294 INFO level \uc774\uc0c1\uc758 \ub85c\uadf8\ub97c stderr (System.err) \ub85c \ucd9c\ub825\ud55c\ub2e4. (\ubcc0\uacbd \ubd88\uac00) log4j\ub97c \uc0ac\uc6a9\ud558\uc5ec ArcusClient \ub85c\uadf8\ub97c \uad00\ub9ac\ud558\ub824\uba74, \uc544\ub798 \uc635\uc158\uc744 WAS\ub098 \uc790\ubc14 \ud504\ub85c\uc138\uc2a4 \uc635\uc158\uc5d0 \ucd94\uac00\ud558\uc5ec JVM \uad6c\ub3d9\uc2dc System property\ub97c \uc9c0\uc815\ud55c\ub2e4. (log4j \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud074\ub798\uc2a4 \ud328\uc2a4\uc5d0 \uc788\uc5b4\uc57c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4.) -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.Log4JLogger \ub610\ub294, \uc18c\uc2a4 \ucf54\ub4dc\uc5d0\uc11c ArcusClient / ArcusClientPool\uc744 \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \uc9c1\uc811 System property\ub97c \uc124\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. (programmatic configuration) System.setProperty(\u201cnet.spy.log.LoggerImpl\u201d, \u201cnet.spy.memcached.compat.log.Log4JLogger\u201d); ... ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); ArcusClient client = ArcusClient.createArcusClient(SERVICE_CODE, cfb); Arcus Java client\uc5d0\uc11c\ub294 Log\ub97c \uae30\ub85d\ud560 \ub54c Class\uc758 \uc774\ub984( clazz.getName() )\uc744 \uae30\uc900\uc73c\ub85c Logger\ub97c \uad6c\ubd84\ud558\uc5ec \uc0ac\uc6a9\ud558\uba70, class\uc758 \uc774\ub984\uacfc \uc815\ud655\ud788 \uc77c\uce58\ud558\ub294 \ub85c\uac70\uac00 \uc5c6\ub2e4\uba74 logger tree \uc0c1\uc758 \uc0c1\uc704 logger \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub294 root logger \uc758 level\uc744 WARN \uc73c\ub85c \uc124\uc815\ud558\uc5ec WARN level \uc774\uc0c1\uc758 \ub85c\uadf8\ub294 \ud56d\uc0c1 \uae30\ub85d\ud558\uace0, net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl class\uc758 \ub85c\uadf8\ub9cc DEBUG level \uc774\uc0c1\uc758 \ub85c\uadf8\ub97c \uae30\ub85d\ud558\ub3c4\ub85d \ud55c \uc608\uc81c\uc774\ub2e4. <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <root> <level value=\"WARN\" /> <appender-ref ref=\"console\" /> </root> Application\uc744 \ub514\ubc84\uae45\ud574\uc57c \ud560 \ub54c Arcus client\uc5d0\uc11c Arcus server\ub85c \uc804\uc1a1\ud558\ub294 ascii protocol \ubb38\uc790\uc5f4\uc774 \uad81\uae08\ud560 \ub54c\uac00 \uc788\ub2e4. Arcus Java Client\uc5d0\uc11c Arcus server\ub85c \uc804\uc1a1\ud558\ub294 protocol\uc744 \ub85c\uadf8\ub85c \uc0b4\ud3b4\ubcf4\ub824\uba74 \uc544\ub798\uc640 \uac19\uc774 logger\ub97c \uc124\uc815\ud558\uba74 \ub41c\ub2e4. \uc608\uc81c\uc5d0 \ub098\uc5f4\ub41c logger\ub97c \ubaa8\ub450 \uc124\uc815\ud558\uba74 \uc694\uccad(get, set \ub4f1..)\ubcc4\ub85c \ubaa8\ub4e0 \ub85c\uadf8\uac00 \ub0a8\uac8c \ub418\ub2c8 \ud544\uc694\ud55c \uc694\uccad\uc5d0 \ud574\ub2f9\ud558\ub294 logger\ub9cc \uc124\uc815\ud558\uba74 \ud3b8\ub9ac\ud558\ub2e4. Ascii Protocol\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 Arcus \uc11c\ubc84 \uba85\ub839 \ud504\ub85c\ud1a0\ucf5c \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. <!-- collection update --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection piped exist --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionPipedExistOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- set attributes --> <logger name=\"net.spy.memcached.protocol.ascii.SetAttrOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection insert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionStoreOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection get --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionGetOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection upsert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpsertOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection update --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection count --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionCountOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> \uae30\ud0c0 log4j\uc758 \uc790\uc138\ud55c \uc124\uc815 \ubc29\ubc95\uc740 log4j \uc124\uc815 \ubc29\ubc95 \uc744 \ud655\uc778\ud558\uae30 \ubc14\ub780\ub2e4. SLF4JLogger \uc0ac\uc6a9\uc2dc \uc720\uc758 \uc0ac\ud56d slf4j\uc640 \ud638\ud658\ub418\ub294 log4j \uc774\uc678\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac(logback, log4j2, ...)\ub97c \uc4f8 \uacbd\uc6b0, net.spy.memcached.compat.log.SLF4JLogger \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud560 \uac83\uc774\ub2e4. \uc774 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \ud544\uc218\uc801\uc73c\ub85c \ud574\uc57c \ud558\ub294 \uc791\uc5c5\uc774 \uc788\ub2e4. (SLF4JLogger\uc640 log4j\ub97c \uc870\ud569\ud574\uc11c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ud558\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4.) ArcusClient\ub294 \uae30\ubcf8\uc801\uc73c\ub85c Zookeeper\uc5d0 \uc758\ud574\uc11c slf4j\uc758 \uad6c\ud604 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 slf4j-log4j12\ub97c \uae30\ubcf8 dependency\ub85c \uac00\uc9c4\ub2e4. \ub530\ub77c\uc11c log4j \uc774\uc678\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c SLF4JLogger\uc640 \uc870\ud569\ud574\uc11c \uc0ac\uc6a9\ud558\ub824\uba74 ArcusClient dependency\uc758 exclusion\uc5d0 slf4j-log4j12\ub97c \ucd94\uac00\ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 ArcusClient \uc0ac\uc6a9\uc790\uac00 SLF4JLogger\uc640 logback\uc744 \uc870\ud569\ud574\uc11c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 dependency \uc124\uc815\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ud574\uc57c \ud55c\ub2e4. <dependency> <groupId>com.navercorp.arcus</groupId> <artifactId>arcus-java-client</artifactId> <version>${arcus-java-client.version}</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>${logback.version}</version> </dependency> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-core</artifactId> <version>${logback.version}</version> </dependency> 2\uac1c \uc774\uc0c1\uc758 slf4j\uc758 \uad6c\ud604 \ub77c\uc774\ube0c\ub7ec\ub9ac(logback-classic, slf4j-log4j12, ...)\ub4e4\uc774 \uac19\uc740 classpath\uc5d0 \uc874\uc7ac\ud560 \uacbd\uc6b0, SLF4J\uc5d0\uc11c multiple binding error \uac00 \ubc1c\uc0dd\ud558\ubbc0\ub85c \ubc18\ub4dc\uc2dc exclusion \ud0a4\uc6cc\ub4dc\ub97c \uc774\uc6a9\ud574 slf4j \uad6c\ud604 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud558\ub098\ub9cc \uc874\uc7ac\ud558\ub3c4\ub85d \ud558\uc5ec\uc57c \ud55c\ub2e4. SLF4J: Class path contains multiple SLF4J bindings. SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. Transparent Front Cache \uc0ac\uc6a9 Arcus\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc6d0\uaca9 Cache \uc2dc\uc2a4\ud15c\uc774\ubbc0\ub85c \uc694\uccad\uc5d0 \ub300\ud55c \uc751\ub2f5\uc744 \ubc1b\uc744 \ub54c\ub9c8\ub2e4 \ub370\uc774\ud130\ub97c \uac1d\uccb4\ud654\ud574\uc57c \ud558\ub294 \ub2e8\uc810\uc774 \uc788\ub2e4. \uc774\ub294 \uacb0\uad6d JVM\uc758 Garbage Collector\uc5d0 \ubd80\ub2f4\uc73c\ub85c \uc791\uc6a9\ud560 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \ub9cc\uc57d \uc2e4\uc81c \ub370\uc774\ud130\uac00 \uac70\uc758 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uace0, \ubcc0\uacbd\uc774 \uc788\ub354\ub77c\ub3c4 \uc544\uc8fc \uc9e7\uc740 \uc2dc\uac04 \ub0b4\uc5d0\ub294 \uc774\uc804 \ub370\uc774\ud130\ub97c \ubcf4\uc5ec\uc918\ub3c4 \uc0c1\uad00\uc5c6\ub294 \uacbd\uc6b0\ub77c\uba74 Front Cache\ub97c \uc0ac\uc6a9\ud560 \uac83\uc744 \uace0\ub824\ud574 \ubcfc \ub9cc \ud558\ub2e4. Front cache\ub97c \uc774\uc6a9\ud558\ub824\uba74 Remote Cache\uc5d0\uc11c Hit\uac00 \ub418\uc5c8\uc744 \uacbd\uc6b0 \ubcc4\ub3c4\ub85c Front Cache \uc800\uc7a5\uc18c\uc5d0 \uae30\ub85d\uc744 \ud574 \uc8fc\uc5b4\uc57c \ud558\ub294\ub370, \ucf54\ub4dc\uac00 \uc0c1\ub2f9\ud788 \uc9c0\uc800\ubd84\ud574 \uc9c0\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ub97c \uac00\uc838\uc62c \ub54c\ub3c4 \uc544\ub798 \uadf8\ub9bc\uc5d0 \ub098\uc628 \uac83\ucc98\ub7fc \uc81c\uc77c \uba3c\uc800 Front Cache\ub97c \ud655\uc778\ud558\uace0 \ub2e4\uc74c\uc5d0 Remote Cache\ub97c \ud655\uc778\ud55c\ub2e4\uba74 \uc774 \ub610\ud55c \ud504\ub85c\uadf8\ub7a8\uc774 \ubcf5\uc7a1\ud574\uc838 \ubc84\ub9b0\ub2e4. \ub530\ub77c\uc11c Transparent\ud558\uac8c \uc989, \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc54c\uc544\uc11c Front Cache\ub97c \ud65c\uc131\ud654\ud558\uc5ec JVM\uc5d0\uc11c \uc77c\uc815 \uc2dc\uac04 Item\uc744 \ubcf4\uad00\ud574 \uc904 \uc218 \uc788\ub2e4\uba74 \ud3b8\ub9ac\ud558\uba74\uc11c\ub3c4 \ubcf4\ub2e4 \ube60\ub978 \uc751\uc6a9\uc744 \uac1c\ubc1c\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. Arcus\uc5d0\ub294 Ehcache\ub77c\ub294 Local cache \ud50c\ub7ec\uadf8\uc778\uc774 \ucd94\uac00\ub418\uc5b4 \ubcf5\uc7a1\ud55c \ud504\ub85c\uadf8\ub7a8 \uc791\uc5c5 \uc5c6\uc774 \ubc14\ub85c Front cache\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4. \uc0ac\uc6a9\uc790\ub294 \uac04\ub2e8\ud55c \uc635\uc158\ub9cc \uc124\uc815\ud558\uba74 2\ubc88\uacfc 3\ubc88 \uc791\uc5c5\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub0b4\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud55c\ub2e4. \ub2e4\uc74c\uc740 Front cache\ub97c \uc0ac\uc6a9\uc744 \uc704\ud55c \uba54\uc18c\ub4dc\ub85c ConnectionFactoryBuilder \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud560 \ub54c \uc801\uc6a9\ud55c\ub2e4. setMaxFrontCacheElements(int to) (Required) \uc5ec\uae30\uc5d0 \uc801\uc6a9\ub418\ub294 \uac12\uc740 Front Cache\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ucd5c\ub300 Item\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \uae30\ubcf8\uac12\uc740 0\uc778\ub370, 0\uc774\uba74 Front Cache\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \ub73b\uc774\ub2e4. \ub530\ub77c\uc11c Front Cache\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc18\ub4dc\uc2dc \uc591\uc758 \uc815\uc218\uac12\uc744 \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4. \ub9cc\uc57d \ucd5c\ub300 Item \uc218\ub97c \ucd08\uacfc\ud558\uba74 LRU \uc54c\uace0\ub9ac\uc998\uc744 \ud1b5\ud574 \uac00\uc7a5 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 Item\uc744 \uc81c\uac70\ud558\uace0 \uc0c8\ub85c\uc6b4 Item\uc744 \ub4f1\ub85d\ud558\uac8c \ub41c\ub2e4. setFrontCacheExpireTime(int to) (Optional, default 5) Front Cache item\uc758 expire time\uc774\ub2e4. Front cache\ub294 item\ubcc4 expire time\uc744 \uc124\uc815\ud558\uc9c0 \uc54a\uace0, \ub4f1\ub85d\ub41c \ubaa8\ub4e0 item\uc5d0 \ub3d9\uc77c\ud55c expire time\uc774 \uc801\uc6a9\ub41c\ub2e4. \uae30\ubcf8\uac12\uc740 5\uc774\uba70 \ub2e8\uc704\ub294 second\uc774\ub2e4. \uc124\uc815\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uae30\ubcf8\uac12\uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ub4f1\ub85d\ub41c \uc9c0 5\ucd08\uac00 \uc9c0\ub098\uba74 \uc790\ub3d9\uc73c\ub85c \uc0ac\ub77c\uc9c0\uac8c \ub41c\ub2e4. setFrontCacheCopyOnRead(boolean copyOnRead) (Optional, default false) Front Cache \uc5d0\uc11c Copy Cache \uae30\ub2a5\uc758 copy on read \uc635\uc158\uc744 \ud65c\uc131\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uc124\uc815\uc774\uba70, \uae30\ubcf8\uac12\uc740 false \uc774\ub2e4. setFrontCacheCopyOnWrite(boolean copyOnWrite) (Optional, default false) Front Cache \uc5d0\uc11c Copy Cache \uae30\ub2a5\uc758 copy on write \uc635\uc158\uc744 \ud65c\uc131\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uc124\uc815\uc774\uba70, \uae30\ubcf8\uac12\uc740 false \uc774\ub2e4. EhCache \uc758 Copy Cache \uae30\ub2a5\uc5d0 \ub300\ud574\uc11c\ub294 \ub2e4\uc74c \ubb38\uc11c \ub97c \ucc38\uc870 \ubc14\ub78c. Front cache \uc0ac\uc6a9 \uc0c1\uc758 \uc8fc\uc758 \uc0ac\ud56d\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. Transparent Front Cache\ub294 \ud604\uc7ac Key-Value get/set\uc5d0 \ub300\ud574\uc11c\ub9cc \uc801\uc6a9 \uac00\ub2a5\ud558\ub2e4. Front cache\ub294 remote Arcus\uc640 sync\ub97c \ub9de\ucd94\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc8fc\ub85c read-only data\ub97c caching\ud558\ub294\ub370 \uc801\ud569\ud558\ub2e4. \uadf8\ub9ac\uace0 front caching expire time\ub3c4 remote cache entry update\uc8fc\uae30\uc5d0 \ub530\ub77c sync\uac00 \ub9de\uc9c0 \uc54a\ub294 \uae30\uac04\uc744 \uc798 \ud30c\uc545\ud558\uc5ec \uc124\uc815\ud574\uc57c \ud55c\ub2e4. Front Cache \ub370\uc774\ud130\ub294 flush \uba85\ub839\uc5b4\ub97c \ud1b5\ud574\uc11c flush \ub418\uc9c0 \uc54a\ub294\ub2e4 \uc544\ub798\ub294 Front cache\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. setMaxFrontCacheElements\ub9cc 0\ubcf4\ub2e4 \ud070 \uac12\uc73c\ub85c \uc124\uc815\ud558\uba74 Front Cache\uac00 \ud65c\uc131\ud654\ub41c\ub2e4. (setFrontCacheExpireTime \ub3c4 \uc0ac\uc6a9 \uc6a9\ub3c4\uc5d0 \ub9de\ub3c4\ub85d \uba85\uc2dc\uc801\uc778 \uac12\uc744 \uc124\uc815\ud574 \uc8fc\ub294 \uac83\uc744 \ucd94\ucc9c\ud568) ConnectionFactoryBuilder factory = new ConnectionFactoryBuilder(); /* Required to use transparent front cache */ factory.setMaxFrontCacheElements(10000); /* Optional settings */ factory.setFrontCacheExpireTime(5); factory.setFrontCacheCopyOnRead(true); factory.setFrontCacheCopyOnRead(true); ArcusClient client = new ArcusClient(SERVICE_CODE, factory); \uc751\uc6a9\uc5d0\uc11c Arcus\uc5d0 \ub300\ud574 front cache\ub97c \uc0ac\uc6a9\ud574\uc57c \ubd80\ubd84\uacfc \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \ubd80\ubd84\uc73c\ub85c \uad6c\ubd84\ub41c\ub2e4\uba74, \uac01 \uc6a9\ub3c4\uc5d0 \ub9de\ub294 Arcus client \uac1d\uccb4\ub97c \ubcc4\ub3c4\ub85c \uc0dd\uc131\ud558\uc5ec \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud55c\ub2e4. ConnectionFactoryBuilder \ud074\ub798\uc2a4\uc758 \uc8fc\uc694 \uba54\uc18c\ub4dc setFailureMode(FailureMode fm) FailureMode\ub97c \ubcc0\uacbd\ud55c\ub2e4. Cancel, Redistrubute, Retry\uc758 3\uac1c FailureMode\uac00 \uc788\uc73c\uba70, \uac01\uac01\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. Cancel : \ub2e4\uc6b4(down)\ub41c \ub178\ub4dc\uc5d0 \uc694\uccad\ud558\ub294 \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc790\ub3d9\uc73c\ub85c \ucde8\uc18c\ud55c\ub2e4. Redistribute : \uc5ec\ub7ec \uac1c\uc758 Node\uac00 \ub4f1\ub85d\ub418\uc5b4 \uc788\uc744 \uacbd\uc6b0, Request\uac00 \uc2e4\ud328\ud558\uba74 \ub2e4\uc74c Node\uc5d0\uac8c \ud574\ub2f9 Request\ub97c \ub2e4\uc2dc \uc694\uccad\ud55c\ub2e4. \uc774\ub807\uac8c \ud574\uc11c Timeout\uc774 \ub0a0 \ub54c\uae4c\uc9c0 \uc218\ud589\ud55c\ub2e4. \ub9cc\uc57d Node\uac00 \ud55c \uac1c\ub77c\uba74 \ub2e4\uc74c Node\ub294 \uc790\uae30 \uc790\uc2e0\uc774 \ub41c\ub2e4. Retry : Timeout\uc774 \ub0a0 \ub54c\uae4c\uc9c0 Request\uac00 \uc2e4\ud328\ud558\uba74 \uacc4\uc18d \ud604\uc7ac Node\uc5d0 \uc694\uccad\uc744 \uc2dc\ub3c4\ud55c\ub2e4 Arcus\ub294 Cancel \ubaa8\ub4dc\ub97c \ub514\ud3f4\ud2b8\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Redistribute\ub098 Retry\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \ubc18\ubcf5\uc801\uc778 \uc694\uccad\uc5d0 \uc758\ud574 \uc751\uc6a9 \uc11c\ubc84\uc5d0 \ubd80\ud558\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc5b4 \uc774\ub7ec\ud55c \ub450 \uac00\uc9c0 \ubc29\uc2dd\uc758 \uc0ac\uc6a9\uc744 \uae08\uc9c0\ud558\uace0 \uc788\ub2e4. setOpTimeout(long t) SpyThread\uac00 Arcus Cache Server\ub85c\ubd80\ud130 \uc751\ub2f5\uc744 \ubc1b\ub294 \ub3d9\uc548\uc758 \uc624\ud37c\ub808\uc774\uc158 \ud0c0\uc784\uc544\uc6c3\uc744 \ubc00\ub9ac\ucd08 \ub2e8\uc704\ub85c \uc124\uc815\ud55c\ub2e4. \uae30\ubcf8\uac12\uc740 1,000 \ubc00\ub9ac\ucd08\uc774\ub2e4. \ucc38\uace0\ub85c, \uc751\uc6a9\uc774 Callback\uc744 \ubc1b\uc744 \ub54c\uae4c\uc9c0 \uc124\uc815\ud558\ub294 Timeout\uc740 \u201c\uc624\ud37c\ub808\uc774\uc158 \ud0c0\uc784\uc544\uc6c3 + \uba85\ub839\uc5b4 \uc0dd\uc131\uc2dc\uac04 + \uba85\ub839\uc5b4 \ub4f1\ub85d\uc2dc\uac04\u201d\uc744 \ud3ec\ud568\ud558\ub294 Timeout\uc73c\ub85c \uc774\uac83\uacfc\ub294 \ub2e4\ub974\ub2e4. setProtocol(ConnectionFactoryBuilder.Protocol prot) Arcus client\uc640 server \uc0ac\uc774\uc5d0 \uc0ac\uc6a9\ud560 \ud504\ub85c\ud1a0\ucf5c\uc744 \uc9c0\uc815\ud55c\ub2e4. Text\uc640 Binary\uc758 \ub450 \ud504\ub85c\ud1a0\ucf5c\uc774 \uc788\uc73c\ub098, Arcus\uc5d0\uc11c\ub294 Text \ud504\ub85c\ud1a0\ucf5c\ub9cc\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. setMaxReconnectDelay(long to) Arcus\uc640 \uc5f0\uacb0\uc774 \ub04a\uacbc\uc744 \uacbd\uc6b0 \ub2e4\uc2dc \uc5f0\uacb0\uc744 \ub9fa\uae30 \uc704\ud574\uc11c \ub300\uae30\ud558\ub294 \ucd5c\ub300 \uc2dc\uac04\uc744 \ucd08 \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. Arcus\ub294 \uae30\ubcf8 1\ucd08\ub97c \uc0ac\uc6a9\ud55c\ub2e4. setOpQueueFactory(OperationQueueFactory q) \uba85\ub839\uc5b4\uc758 \ub0b4\uc6a9\uc744 \ub2f4\ub294 operation \ud050\ub97c \uc0dd\uc131\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \ud06c\uae30\uac00 16,384\uc778 \ud050\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud050\uc758 \ud06c\uae30\ub97c 1000\uc73c\ub85c \ubcc0\uacbd\ud558\uace0 \uc2f6\ub2e4\uba74 setOpQueueFactory(new ArrayOperationQueueFactory(1000))\uc73c\ub85c \uc124\uc815\ud558\uba74 \ub41c\ub2e4. setTranscoder(Transcoder t) \uce90\uc2dc\uc758 \ub370\uc774\ud130 \uc601\uc5ed\uc5d0 \ub300\ud55c character set\uacfc \uc555\ucd95 \uae30\uc900\uc744 \uc124\uc815\ud55c\ub2e4. GZip \uc555\ucd95\uc744 \uc0ac\uc6a9\ud558\uba70, \uae30\ubcf8\uac12\uc740 UTF-8\uacfc 16,384 byte\uc774\ub2e4. \uc989, \ubaa8\ub4e0 \uc694\uccad\uc758 data \uc601\uc5ed\uc740 UTF-8\ub85c encoding/decoding \ub418\uace0 data \uc601\uc5ed\uc758 \ud06c\uae30\uac00 16,384byte \uc774\uc0c1\uc774\uba74 \uc555\ucd95\ud558\uc5ec Arcus\uc640 \ud1b5\uc2e0\ud558\uac8c \ub41c\ub2e4. \ub9cc\uc57d, character set\uc744 EUC-KR\ub85c \uc124\uc815\ud558\uace0 \uc555\ucd95 \uae30\uc900\uc744 4,096byte\ub85c \ubcc0\uacbd\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uc815\ud55c\ub2e4. java SerializingTranscoder trans = new SerializingTranscoder(); trans.setCharset(\u201cEUC-KR\u201d); trans.setCompressionThreshold(4096); setTranscoder(trans); setShouldOptimize(boolean o) \ucd5c\uc801\ud654 \ub85c\uc9c1 \uc0ac\uc6a9\uc5ec\ubd80\ub97c \uacb0\uc815\ud55c\ub2e4. \ucd5c\uc801\ud654 \ub85c\uc9c1\uc740 Operation Queue\uc5d0 \uc21c\uc11c\ub300\ub85c \uc788\ub294 get \uc5f0\uc0b0\ub4e4\uc744 multi-get\uacfc get \uc5f0\uc0b0\uc73c\ub85c \uc870\ud569\ud615\uc73c\ub85c \ud55c\uaebc\ubc88\uc5d0 \uc218\ud589\ud558\uac8c \ub41c\ub2e4. Arcus\uc5d0\uc11c\ub294 optimize \ub85c\uc9c1 \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. setReadBufferSize(int to) Arcus server socket\uacfc \ud1b5\uc2e0\ud560 \ub54c \uc0ac\uc6a9\ub418\ub294 \uc804\uc5ed ByteBuffer \ud06c\uae30\ub97c \uc124\uc815\ud55c\ub2e4. (\uc774\ub984\uc740 Read\uc774\uc9c0\ub9cc \uc77d\uae30/\uc4f0\uae30 \ubc84\ud37c\uc758 \ud06c\uae30\ub294 \uc774 \uac12\uc744 \ub530\ub978\ub2e4) \ub9cc\uc57d ByteBuffer \ud06c\uae30\ub97c \ub118\uc5b4\uc11c\ub294 \ub370\uc774\ud130\uac00 \ub118\uc5b4\uc624\uba74 \uc7ac \uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uae30 \uc704\ud574 ByteBuffer \ud06c\uae30\ub9cc\ud07c \ucc98\ub9ac\ud55c \ud6c4 ByteBuffer\uc758 \ub0b4\uc6a9\uc744 \ube44\uc6b0\uace0, \ub2e4\uc2dc \uc0ac\uc6a9\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4. \ud06c\uae30\uc758 \ub2e8\uc704\ub294 byte\uc774\uba70, \uae30\ubcf8\uac12\uc740 16,384\uc774\ub2e4. setDaemon(boolean d) \uae30\ubcf8\uac12\uc774 true\uc774\ub2e4. setTimeoutExceptionThreshold(int to) Timeout\uc774 \uc5f0\uc18d\uc73c\ub85c \ubc1c\uc0dd\ud560 \uacbd\uc6b0 \ud574\ub2f9 Connection\uc5d0 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud588\ub2e4\uace0 \ud310\ub2e8\ud558\uc5ec Connection\uc744 \ub04a\uace0 \uc7ac\uc811\uc18d\uc744 \uc2dc\ub3c4\ud55c\ub2e4. Arcus\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uc5f0\uc18d Timeout \ud55c\uacc4\uac12\uc740 10\uc774\ub2e4. setTimeoutRatioThreshold(int to) Client request\uac00 \uc5b4\ub5a4 \uc774\uc720\ub85c \uc624\ub7ab\ub3d9\uc548 \ucc98\ub9ac\ub418\uc9c0 \ubabb\ud558\uba74, Arcus client\ub294 continuous timeout \ubc29\ubc95\uc73c\ub85c \uc774\ub97c \ud0d0\uc9c0\ud558\uace0 \uc751\uc6a9\uc5d0\uac8c \ube60\ub978 \uc2e4\ud328 \uc751\ub2f5\uc744 \uc804\ub2ec\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc740 \uc2e4\ud328\ud55c request \uc131\uaca9\uc5d0 \ub530\ub77c DB \uc870\ud68c\ud560 \uc9c0 \uc544\ub2c8\uba74 Arcus\uc5d0 \uc7ac\uc694\uccad\ud560 \uc9c0\ub97c \uacb0\uc815\ud558\uc5ec \uc6c0\uc9c1\uc77c \uc218 \uc788\ub2e4. Client request\uac00 \uc624\ub7ab\ub3d9\uc548 \ucc98\ub9ac\ub418\uc9c0 \ubabb\ud558\ub294 \uac83\uc774 \uc544\ub2cc \uadf8 \ucc98\ub9ac \uc18d\ub3c4\uac00 \ub9e4\uc6b0 \ub290\ub824\uc9c4 \uacbd\uc6b0\uc5d0\ub294 \uc77c\ubd80 request\uc5d0 \ub300\ud574 operation timeout\uc774 \ubc1c\uc0dd\ud558\uc9c0\ub9cc \ub2e4\ub978 \uc77c\ubd80 requests\ub294 \uc815\uc0c1 \ucc98\ub9ac\ub420 \uc218 \uc788\ub2e4. \uc774 \uacbd\uc6b0, client request\uac00 \uc815\uc0c1 \ucc98\ub9ac\ub418 \uc54a\uc9c0\ub9cc continuous timeout\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc0c1\ud0dc\ub97c \ud0d0\uc9c0\ud558\uae30 \uc704\ud558\uc5ec, \ucd5c\uadfc 100\uac1c requests\uc5d0 \ub300\ud574 timeout ratio\ub97c \uacc4\uc0b0\ud558\uc5ec \ud2b9\uc815 threshold \uc774\uc0c1\uc774\uba74 \ud604\uc7ac connection\uc744 \ub04a\uace0 \uc7ac\uc811\uc18d\uc744 \uc2dc\ub3c4\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. Timeout ratio threshold\uc758 default \uac12\uc740 0\uc73c\ub85c disabled\ub41c \uc0c1\ud0dc\uc774\uba70, 1 ~ 99 \uc0ac\uc774\uc758 \uac12\uc744 \uc8fc\uba74 \uadf8 \uac12\uc73c\ub85c timeout ratio threshold\uac00 \uc124\uc815\ub418\uc5b4 \ub3d9\uc791\ud558\uac8c \ub41c\ub2e4. setOpQueueMaxBlockTime(long t) Operation\uc744 \uc694\uccad\ud560 \ub54c \ube44\ub3d9\uae30\uc2dd\uc73c\ub85c Operation queue\uc5d0 \ub4f1\ub85d\ud558\uc5ec \uc791\uc5c5\uc744 \uc694\uccad\ud558\uac8c \ub418\uc5b4 \uc788\ub294\ub370, \uc774 \uc635\uc158\uc740 Queue\uac00 \ubaa8\ub450 \uaf49 \ucc2c \uc0c1\ud0dc\uac00 \ub418\uc5c8\uc744 \ub54c \ucd5c\ub300 \uae30\ub2e4\ub9ac\ub294 \uc2dc\uac04\uc744 \uc758\ubbf8\ud55c\ub2e4. \ub2e8\uc704\ub294 millisecond \uc774\uace0, \uae30\ubcf8\uac12\uc740 10000ms\uc774\ub2e4. setBulkServiceLoopLimit(int limit) Bulk insert\ub294 Client\uc5d0\uc11c \uc785\ub825\ub41c \uc544\uc774\ud15c\uc744 \uc11c\ubc84\ub85c \uc804\uc1a1\ud55c\ub2e4. \uc774\ub54c \ud55c\uaebc\ubc88\uc5d0 \uba87 \uac1c\uc758 \uc544\uc774\ud15c\uc744 \uc11c\ubc84\uc5d0 insert\ud558\uace0 \uacb0\uacfc\ub97c \uae30\ub2e4\ub9b4\uc9c0 \uc9c0\uc815\ud55c\ub2e4. \uae30\ubcf8\uac12\uc740 1\uc774\ub2e4. \uc989, 100\uac1c \uc544\uc774\ud15c\uc744 bulk insert\ud558\uba74 \uc11c\ubc84\ub85c \ud55c \uac1c\uc529 \uc694\uccad\ud55c\ub2e4. setBulkServiceSingleOpTimeout(long timeout) Bulk insert\uc758 \uac01 insert timeout\uc744 \uc124\uc815\ud55c\ub2e4. \ub2e8\uc704\ub294 millisecond\uc774\ub2e4.","title":"2. arcus java client"},{"location":"arcus-java-client/2.-arcus-java-client/#2-1-arcus-client","text":"\uc608\uc81c\ub97c \ud1b5\ud574 Arcus java client \uae30\ubcf8 \uc0ac\uc6a9\ubc95\uc744 \uc54c\uc544\ubcf8\ub2e4. \uc544\ub798 \uc608\uc81c\ub294 Arcus cache\uc5d0 key\uac00 \u201csample:testKey\u201d\uc774\uace0 value\uac00 \u201ctestValue\u201d\uc778 cache item\uc744 \uc800\uc7a5\ud55c\ub2e4. package com.navercorp.arcus.example; import java.util.concurrent.ExecutionException; import java.util.concurrent.Future; import java.util.concurrent.TimeUnit; import java.util.concurrent.TimeoutException; import net.spy.memcached.ArcusClient; import net.spy.memcached.ConnectionFactoryBuilder; public class HelloArcus { private static final String ARCUS_ADMIN = \"10.0.0.1:2181,10.0.0.2:2181,10.0.0.3:2181\"; private static final String SERVICE_CODE = \"test\"; private final ArcusClient arcusClient; public static void main(String[] args) { HelloArcus hello = new HelloArcus(); System.out.printf(\"hello.setTest() result=%b\", hello.setTest()); hello.closeArcusConnection(); } public HelloArcus() { arcusClient = ArcusClient.createArcusClient(ARCUS_ADMIN, SERVICE_CODE, new ConnectionFactoryBuilder()); // (1) } public boolean setTest() { Future<Boolean> future = null; try { future = arcusClient.set(\"sample:testKey\", 10, \"testValue\"); // (2) } catch (IllegalStateException e) { // client operation queue \ubb38\uc81c\ub85c \uc694\uccad\uc774 \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc558\uc744 \ub54c \uc608\uc678\ucc98\ub9ac. } if (future == null) return false; try { return future.get(500L, TimeUnit.MILLISECONDS); // (3) } catch (TimeoutException te) { // (4) future.cancel(true); } catch (ExecutionException re) { // (5) future.cancel(true); } catch (InterruptedException ie) { // (6) future.cancel(true); } return false; } public void closeArcusConnection() { arcusClient.shutdown(); // (7) } } (1) ArcusClient \ud074\ub798\uc2a4\uc758 \uac1d\uccb4(client \uac1d\uccb4)\ub97c \uc0dd\uc131\ud55c\ub2e4. Client \uac1d\uccb4\ub294 \ub9e4 \uc694\uccad\ub9c8\ub2e4 \uc0dd\uc131\ud558\uc9c0 \uc54a\uace0 \ubbf8\ub9ac \ud558\ub098\ub97c \ub9cc\ub4e4\uc5b4 \uc7ac\ud65c\uc6a9\ud558\ub3c4\ub85d \ud55c\ub2e4. Arcus\uc5d0 \uc811\uc18d\ud560 \ub54c, \uac01\uc885 \uc124\uc815\uc744 \ubcc0\uacbd\ud558\uae30 \uc704\ud574\uc11c ConnectionFactoryBuilder\ub97c \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc798\ubabb\ub41c SERVICE_CODE\ub97c \uc9c0\uc815\ud588\ub2e4\uba74 NotExistsServiceCodeException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. SERVICE_CODE\ub294 \uc62c\ubc14\ub974\uc9c0\ub9cc \uc811\uc18d \uac00\ub2a5\ud55c cache \uc11c\ubc84(\ub610\ub294 \ub178\ub4dc)\uac00 \uc5c6\ub2e4\uba74, \ubaa8\ub4e0 \uc694\uccad\uc740 Exception\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. Cache \uc11c\ubc84\uac00 \uad6c\ub3d9\ub418\uc5b4 \uc811\uc18d\uc774 \uac00\ub2a5\ud574\uc9c0\uba74, \uc790\ub3d9\uc73c\ub85c \ud574\ub2f9 cache \uc11c\ubc84\ub85c \uc5f0\uacb0\ud558\uc5ec \uc815\uc0c1 \uc11c\ube44\uc2a4\ud558\uac8c \ub41c\ub2e4. (2) Client \uac1d\uccb4\uc758 set \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c Boolean \uac12\uc744 \uac16\ub294 Future \ud074\ub798\uc2a4\uc758 \uac1d\uccb4(future \uac1d\uccb4)\ub85c \ubc1b\ub294\ub2e4. \uc800\uc7a5\ud560 \uac12\uc73c\ub85c \"\"(\uae38\uc774\uac00 0\uc778 \ubb38\uc790\uc5f4)\uc744 \ub123\uc73c\uba74, \"\"\uc774 \uadf8\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. (\ud574\ub2f9 key\uac00 \uc0ad\uc81c\ub418\uc9c0 \uc54a\ub294\ub2e4.) \uc800\uc7a5\ud560 \uac12\uc73c\ub85c null\uc744 \uc9c0\uc815\ud560 \uc218 \uc5c6\ub2e4. (key \uc0ad\uc81c \uc758\ub3c4\uc774\uba74, delete \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.) \uc800\uc7a5\ud560 \uac12\uc740 serializable\ud574\uc57c \ud55c\ub2e4. (\uc0ac\uc6a9\uc790 \uc815\uc758 \ud074\ub798\uc2a4\uc758 \uacbd\uc6b0 Serializable \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud574\uc57c \ud55c\ub2e4.) (3) Future \uac1d\uccb4\uc758 \uac12\uc744 \ubc1b\uc544\uc11c result\uc5d0 \ub2f4\ub294\ub2e4. (\ub9cc\uc57d set \uc791\uc5c5\uc774 \uc2e4\ud328\ud558\uc600\uc744 \uacbd\uc6b0\uc5d0\ub294 false\uac00 \ubc18\ud658\ub41c\ub2e4.) Cache \uc11c\ubc84\uc5d0 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub2e4\uc2dc \ub9d0\ud574 cache miss\uc774\ub77c\uba74, null\uc774 \ubc18\ud658\ub41c\ub2e4. \uae38\uc774\uac00 0\uc778 \ubb38\uc790\uc5f4(\u201c\u201d)\uc740 cache miss\uac00 \uc544\ub2c8\uace0 \u201c\u201d\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \uac83\uc774\ub2e4. (4) \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, timeout \uc2dc\uac04\uc744 500ms\ub85c \uc9c0\uc815\ud588\ub294\ub370 GC time\uc774 600ms\uac78\ub838\ub2e4\uba74 Arcus cache \uc11c\ubc84\uc640 \ud1b5\uc2e0\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 100ms\ub97c \ucd08\uacfc\ud588\uae30 \ub54c\ubb38\uc5d0 TimeoutException\uc774 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4. TimeoutException\uc774 \uc5f0\uc18d\ud574\uc11c n(\ub514\ud3f4\ud2b8\ub294 10)\ud68c \uc774\uc0c1 \ubc1c\uc0dd\ud558\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc744 \ub04a\uace0 \uc7ac\uc811\uc18d\ud55c\ub2e4. \uc5ec\uae30\uc5d0\uc11c n\ubc88\uc758 \uac12\uc740 ConnectionFactoryBuilder\ub97c \uc0dd\uc131\ud560 \ub54c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \ub610\ud55c, \ubaa8\ub4e0 Exception\uc774 \ubc1c\uc0dd\ud55c \uc0c1\ud669\uc5d0\uc11c\ub294 future.cancel(true)\ub97c \ubc18\ub4dc\uc2dc \ud638\ucd9c\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. (5) ArcusClient\uc758 operation queue\uc5d0 \ub300\uae30\ud558\uace0 \uc788\ub358 \uc791\uc5c5\uc774 \ucde8\uc18c\ub418\uc5c8\uc744 \ub54c, ExecutionException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. ExecutionException\uc740 \uc11c\ubc84 \ub610\ub294 \ub124\ud2b8\uc6cc\ud06c \uc7a5\uc560 \uc2dc \ubc1c\uc0dd\ud55c\ub2e4. (6) \ub2e4\ub978 \uc4f0\ub808\ub4dc\uc5d0\uc11c \ud574\ub2f9 \uc4f0\ub808\ub4dc\uc758 \uc791\uc5c5\uc744 Interrupt\ud588\uc744 \ub54c InterruptedException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. (\ubc1c\uc0dd\ud560 \uc5ec\uc9c0\uac00 \uac70\uc758 \uc5c6\ub2e4.) (7) \ud504\ub85c\uc138\uc2a4\ub97c \uc885\ub8cc\ud558\uae30 \uc804\uc5d0 \ub354 \uc774\uc0c1 ArcusClient\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \ubc18\ub4dc\uc2dc shutdown \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uc5ec \uc11c\ubc84\uc640\uc758 \uc5f0\uacb0\uc744 \ub04a\uc5b4\uc57c \ud55c\ub2e4. Tomcat\uacfc \uac19\uc740 WAS\uc5d0\uc11c\ub294 Tomcat\uc774 shutdown\uc774 \ub420 \ub54c shutdown \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub418\uac8c \ud558\uba74 \ub41c\ub2e4. Spring container\uc5d0\uc11c \uad00\ub9ac\ub418\ub294 \uacbd\uc6b0 bean \uc124\uc815\uc758 destroy-method\uc5d0\uc11c shutdown \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub418\ub3c4\ub85d \uc124\uc815\ud574\uc57c \ud55c\ub2e4.","title":"2-1. Arcus Client \uae30\ubcf8 \uc0ac\uc6a9\ubc95"},{"location":"arcus-java-client/2.-arcus-java-client/#2-2-arcus-client","text":"","title":"2-2. Arcus Client \uc0dd\uc131, \uc18c\uba78, \uad00\ub9ac"},{"location":"arcus-java-client/2.-arcus-java-client/#arcus-client","text":"\ud558\ub098\uc758 Arcus Client \uac1d\uccb4\ub294 Arcus cache cloud\uc5d0 \uc788\ub294 \ubaa8\ub4e0 cache server(or cache node)\uc640 \uc5f0\uacb0\uc744 \ud558\ub098\uc529 \uc0dd\uc131\ud558\uba70, \uc694\uccad\ub418\ub294 \uac01 cache item\uc758 key\uc5d0 \ub300\ud574 \uadf8 key\uac00 mapping\ub418\ub294 cache server\uc640\uc758 \uc5f0\uacb0\uc744 \uc774\uc6a9\ud558\uc5ec request\ub97c \ubcf4\ub0b4\uace0 response\ub97c \ubc1b\ub294\ub2e4. Arcus Client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \ub2e8\uc77c Arcus Client \uc0dd\uc131 Arcus Client Pool \uc0dd\uc131 \uba3c\uc800, \ub2e8\uc77c Arcus Client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uba54\uc18c\ub4dc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ArcusClient.createArcusClient(String arcusAdminAddress, String serviceCode, ConnectionFactoryBuilder cfb) arcusAdminAddress: \uc811\uadfc\ud560 cache cloud\ub97c \uad00\ub9ac\ud558\ub294 Arcus zookeeper ensemble \uc8fc\uc18c IP:port \ub9ac\uc2a4\ud2b8\uc778 \"ip1:port,ip2:port,ip3:port\" \ud615\ud0dc\ub85c \uc9c0\uc815\ud558\uac70\ub098 \"FQDN:port\" \ud615\ud0dc\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. (zookeeper IP list\uc5d0 \ub300\ud55c domain name\uc744 DNS\uc5d0 \ub4f1\ub85d\ud55c \uacbd\uc6b0) serviceCode: \uc811\uc18d\ud560 cache cloud\uc758 \uc2dd\ubcc4\uc790 cfb: Arcus client\uc758 \ub3d9\uc791 \uc124\uc815\uc744 \uc704\ud55c ConnectionFactoryBuilder \uac1d\uccb4 ARCUS_ADMIN \uc11c\ubc84\uc5d0\uc11c \uad00\ub9ac\ub418\ub294 SERVICE_CODE\uc5d0 \ud574\ub2f9\ud558\ub294 cache cloud\ub85c \uc5f0\uacb0\ud558\ub294 \ud558\ub098\uc758 ArcusClient \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); ArcusClient client = ArcusClient.createArcusClient(ARCUS_ADMIN, SERVICE_CODE, cfb); \ud558\ub098\uc758 Arcus Client\ub9cc\uc73c\ub85c\ub294 \uc751\uc6a9\uc758 requests\ub97c \ucc98\ub9ac\ud558\ub294 \uc6a9\ub7c9 \uc989, throughput\uc5d0 \ud55c\uacc4\uac00 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ud558\ub098\uc758 \uc5f0\uacb0\uc744 \ud1b5\ud574 \ud558\ub098\uc758 request\uac00 \ucc98\ub9ac\ub418\ub294 \uc2dc\uac04\uc774 1ms\ub77c \uac00\uc815\ud558\uba74, \uadf8 \uc5f0\uacb0\uc744 \ud1b5\ud574 \ucd5c\ub300 1000 requests/second \ubc16\uc5d0 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub2e4. \ub530\ub77c\uc11c, \ub9ce\uc740 \uc694\uccad \ucc98\ub9ac\ub7c9\uc774 \ud544\uc694\ud55c \uc751\uc6a9\uc778 \uacbd\uc6b0\ub294 \ub2e4\uc218\uc758 Arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc5ec\uc57c \ud55c\ub2e4. \uc774\ub97c \uc704\ud574 Arcus client pool \uac1d\uccb4\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc73c\uba70, \uc544\ub798\uc758 \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 \uc0dd\uc131\ud55c\ub2e4. ArcusClient.createArcusClientPool(String arcusAdminAddress, String serviceCode, ConnectionFactoryBuilder cfb, int poolSize); \uba54\uc18c\ub4dc\uc758 \uc778\uc790\ub85c \ub2e8\uc77c Arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud560 \uc2dc\uc758 \uc778\uc790\ub4e4 \uc678\uc5d0 pool\uc5d0 \ub4e4\uc5b4\uac08 arcus client \uac1d\uccb4 \uc218\ub97c \uc9c0\uc815\ud558\ub294 poolSize \uc778\uc790\uac00 \uc788\ub2e4. pool size\uac00 \ub108\ubb34 \uc791\uc73c\uba74 \uc751\uc6a9 \uc694\uccad\ub4e4\uc744 \uc81c\uc2dc\uac04\uc5d0 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub294 \ubb38\uc81c\uac00 \uc0dd\uae30\uace0, \ub108\ubb34 \ud06c\uba74 arcus cache server\ub85c \ubd88\ud544\uc694\ud558\uac8c \ub9ce\uc740 \uc5f0\uacb0\uc744 \ub9fa\uac8c \ud55c\ub2e4. \uc801\uc808\ud55c pool size\ub294 \"\uc751\uc6a9 \uc11c\ubc84\uc758 peak arcus request \uc694\uccad\ub7c9\"\uc744 \"\ud558\ub098\uc758 arcus client\uc758 \ucc98\ub9ac\ub7c9\"\uc73c\ub85c \ub098\ub204\uba74 \uc5bb\uc744 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c, \ud558\ub098\uc758 arcus client\uac00 \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ucc98\ub9ac\ub7c9\uc740 \uc751\uc6a9 \uc11c\ubc84\uac00 \uc694\uccad\ud558\ub294 arcus request \uc720\ud615\uacfc \uc751\uc6a9 \uc11c\ubc84\uc640 cache server \uac04\uc758 \ub124\ud2b8\uc6cd \uc0c1\ud0dc \ub4f1\uc5d0 \uc601\ud5a5\ubc1b\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c, \uc2e4\uc81c \ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud574 \ud655\uc778\ud574 \ubcf4\uace0 pool size\ub97c \uacb0\uc815\ud558\uae38 \uad8c\ud55c\ub2e4. \ud2b9\uc815 SERVICE_CODE\uc5d0 \ud574\ub2f9\ud558\ub294 cache cloud\ub85c \uc5f0\uacb0\ub418\ub294 Arcus client 4 \uac1c\ub97c \uac00\uc9c0\ub294 pool\uc744 \uc0dd\uc131\ud558\ub294 \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. int poolSize = 4; ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); ArcusClientPool pool = ArcusClient.createArcusClientPool(ARCUS_ADMIN, SERVICE_CODE, cfb, poolSize); Arcus client \uac1d\uccb4\ub97c \uc815\uc0c1\uc801\uc73c\ub85c \uc0dd\uc131\ud558\uba74, \uc544\ub798\uc758 \ub85c\uadf8\uc640 \uac19\uc774 cache cloud\uc640 \uc815\uc0c1 \uc5f0\uacb0\ub428\uc744 \ubcfc \uc218 \uc788\ub2e4. WARN net.spy.memcached.CacheManager: All arcus connections are established. Arcus cache cloud\ub85c \uc815\uc0c1 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc73c\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \ub85c\uadf8\uac00 \ubcf4\uc778\ub2e4. \uc608\ub97c \ub4e4\uc5b4 5\ub300\uc758 Cache server\uc5d0 \uc811\uc18d\uc744 \ud574\uc57c \ud558\ub294\ub370 \uc774\ub4e4 \uc911 \uc77c\ubd80 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uc9c0 \ubabb\ud588\ub2e4\uba74 \uc544\ub798 \ub85c\uadf8\uac00 \ub0a8\uac8c \ub41c\ub2e4. \uc811\uc18d \uc2e4\ud328\ud55c cache server\uc5d0 \ub300\ud574\uc11c\ub294 Arcus client\uac00 1\ucd08\uc5d0 \ud55c \ubc88\uc529 \uc790\ub3d9\uc73c\ub85c \uc7ac\uc5f0\uacb0\uc744 \uc2dc\ub3c4\ud55c\ub2e4. WARN net.spy.memcached.CacheManager: Some arcus connections are not established.","title":"Arcus Client \uc0dd\uc131"},{"location":"arcus-java-client/2.-arcus-java-client/#arcus-client_1","text":"ArcusClient \ub610\ub294 ArcusClientPool\ub97c \uc0ac\uc6a9\ud558\uace0 \ub09c \ub2e4\uc74c\uc5d0\ub294 \ubc18\ub4dc\uc2dc shutdown() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uc5ec client\uc640 admin, cache server\uac04\uc758 \uc5f0\uacb0\uc744 \ud574\uc81c\uc2dc\ucf1c\uc8fc\uc5b4\uc57c \ud55c\ub2e4. client.shutdown(); pool.shutdown();","title":"Arcus Client \uc18c\uba78"},{"location":"arcus-java-client/2.-arcus-java-client/#arcus-client_2","text":"Arcus\uc5d0 \ub300\ud55c \ub9e4 \uc694\uccad\ub9c8\ub2e4 arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uace0 \uc18c\uba78\uc2dc\ud0a4\ub294 \uac83\uc740 \uc801\uc808\ud558\uc9c0 \ubabb\ud558\ub2e4. \uc751\uc6a9 \uc11c\ubc84\uc758 \uad6c\ub3d9 \uc2dc\uc5d0 arcus client \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uace0, \uc885\ub8cc \uc2dc\uc5d0 arcus client \uac1d\uccb4\ub97c \uc18c\uba78\ud558\uba74 \ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uc751\uc6a9\uc5d0\uc11c\ub294 ArcusClient wrapper\ub97c \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud560 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4. \uc774\ub807\uac8c \ud558\uba74 ArcusClient\uc758 \uc0dd\uba85\uc8fc\uae30\ub97c \uad00\ub9ac\ud558\uae30 \uc218\uc6d4\ud574\uc9c4\ub2e4. Service code\ubcc4 ArcusClient instance\ub97c \uac00\uc9c0\ub294 factory\ub97c singleton\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub450\uace0 WAS\uac00 \ucd08\uae30\ud654 \ub420 \ub54c Arcus server \uc640 \uc5f0\uacb0\uc744 \ub9fa\ub3c4\ub85d \ud558\uc790. WAS\uac00 shutdown\ub420 \ub54c ArcusClient\ub3c4 \ud568\uaed8 shutdown\ub418\ub3c4\ub85d \uc124\uc815\ud558\uba74 \uac00\uc7a5 \uc774\uc0c1\uc801\uc774\ub2e4.","title":"Arcus Client \uc0dd\uba85\uc8fc\uae30 \uad00\ub9ac"},{"location":"arcus-java-client/2.-arcus-java-client/#cache-server-list","text":"Arcus\ub294 cache server list\ub97c \uc790\ub3d9\uc73c\ub85c \uad00\ub9ac\ud55c\ub2e4. Cache server\ub4e4 \uc911\uc5d0 \uc77c\ubd80 \uc11c\ubc84\uac00 \uc0ac\uc6a9 \ubd88\uac00\ub2a5\ud55c \uc0c1\ud0dc\uac00 \ub418\uba74 Arcus admin\uc774 \uc790\ub3d9\uc73c\ub85c \uc0c1\ud669\uc744 \uc778\uc9c0\ud558\uace0 \ud574\ub2f9 \uc11c\ubc84\ub97c cache server list\uc5d0\uc11c \uc81c\uac70\ud558\uba70, \ubcc0\uacbd\ub41c cache server list\uac00 \uc788\uc74c\uc744 \uac01 arcus client\uc5d0 \uc54c\ub9bc\uc73c\ub85c\uc368 \uac01 arcus client\uac00 \ucd5c\uc2e0\uc758 cache server list\ub97c \uc720\uc9c0\ud558\uac8c \ud55c\ub2e4. \ubc18\ub300\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c cache server\uac00 \ucd94\uac00\ub418\uc5c8\uc744 \ub54c\uc5d0\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c, Arcus admin\uc758 \ub3c4\uc6c0\uc73c\ub85c Arcus client\ub294 \ucd5c\uc2e0\uc758 cache server list\ub97c \uc720\uc9c0\ud558\uace0, cache key\uc640 cache server\uc640\uc758 mapping\uc744 \uac31\uc2e0\ud558\uac8c \ud55c\ub2e4. \ub530\ub77c\uc11c, Arcus client\ub97c \uc0ac\uc6a9\ud560 \ub54c cache server \ub300\uc218\uc758 \ubcc0\ud654\uc5d0 \ub300\ud55c \ubc29\uc5b4 \ub85c\uc9c1\uc740 \uc2e0\uacbd \uc4f0\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4.","title":"Cache Server List \uad00\ub9ac"},{"location":"arcus-java-client/2.-arcus-java-client/#2-3-arcus-client","text":"","title":"2-3. Arcus Client \uc124\uc815"},{"location":"arcus-java-client/2.-arcus-java-client/#key-value","text":"Arcus client\ub294 key-value item\uc758 \ub370\uc774\ud130 \uc555\ucd95 \ubc0f \ud574\uc81c \uae30\ub2a5\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uc989, \uc77c\uc815 \ud06c\uae30 \uc774\uc0c1\uc758 \ub370\uc774\ud130\uc774\uba74 \uadf8 \ub370\uc774\ud130\ub97c \uc555\ucd95\ud558\uc5ec cache server\uc5d0 \ubcf4\ub0b4\uc5b4 \uc800\uc7a5\ud558\uace0, cache server\ub85c \ubd80\ud130 \uac00\uc838\uc628 \ub370\uc774\ud130\uac00 \uc555\ucd95 \ub370\uc774\ud130\uc774\uba74, \ud574\uc81c\ud558\uc5ec \uc751\uc6a9\uc5d0 \uc804\ub2ec\ud55c\ub2e4. Arcus client\ub294 \uc800\uc815\ud560 \uac12\uc758 \ud06c\uae30\uac00 16KB \uc774\uc0c1\uc77c \uacbd\uc6b0\uc5d0 \uc555\ucd95\ud558\uc5ec cache server\uc5d0 \uc800\uc7a5\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4. \uc774\ub7ec\ud55c \ub370\uc774\ud130 \uc555\ucd95 \uc784\uacc4\uac12\uc740 ConnectionFactoryBuilder\uc758 setTranscoder\uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \uc124\uc815\ud560 \uc218 \uc788\ub2e4. \ub2e4\uc74c\uc740 4KB \uc774\uc0c1\uc758 \ub370\uc774\ud130\ub294 \ubaa8\ub450 \uc555\ucd95\ud558\ub3c4\ub85d \uc124\uc815\ud558\ub294 \uc608\uc81c\uc774\ub2e4. ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); SerializingTranscoder trans = new SerializingTranscoder(); trans.setCharset(\u201cUTF-8\u201d); trans.setCompressionThreshold(4096); cfb.setTranscoder(trans); ArcusClient client = ArcusClient.createArcusClient(SERVICE_CODE, cfb);","title":"Key-Value\uc5d0\uc11c \ub370\uc774\ud130 \uc555\ucd95 \uc124\uc815"},{"location":"arcus-java-client/2.-arcus-java-client/#logger","text":"Arcus client \uc0ac\uc6a9 \uc2dc\uc5d0 ArcusClient \uc790\uccb4 logger(DefaultLogger), log4j, slf4j, JDK logger \ub4f1 4\uac00\uc9c0 \uc885\ub958\uc758 Logger\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc0ac\uc6a9\ud560 logger\ub97c \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74 ArcusClient\ub294 DefaultLogger\ub97c \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\uba70, DefaultLogger\ub294 INFO level \uc774\uc0c1\uc758 \ub85c\uadf8\ub97c stderr (System.err) \ub85c \ucd9c\ub825\ud55c\ub2e4. (\ubcc0\uacbd \ubd88\uac00) log4j\ub97c \uc0ac\uc6a9\ud558\uc5ec ArcusClient \ub85c\uadf8\ub97c \uad00\ub9ac\ud558\ub824\uba74, \uc544\ub798 \uc635\uc158\uc744 WAS\ub098 \uc790\ubc14 \ud504\ub85c\uc138\uc2a4 \uc635\uc158\uc5d0 \ucd94\uac00\ud558\uc5ec JVM \uad6c\ub3d9\uc2dc System property\ub97c \uc9c0\uc815\ud55c\ub2e4. (log4j \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud074\ub798\uc2a4 \ud328\uc2a4\uc5d0 \uc788\uc5b4\uc57c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4.) -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.Log4JLogger \ub610\ub294, \uc18c\uc2a4 \ucf54\ub4dc\uc5d0\uc11c ArcusClient / ArcusClientPool\uc744 \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \uc9c1\uc811 System property\ub97c \uc124\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. (programmatic configuration) System.setProperty(\u201cnet.spy.log.LoggerImpl\u201d, \u201cnet.spy.memcached.compat.log.Log4JLogger\u201d); ... ConnectionFactoryBuilder cfb = new ConnectionFactoryBuilder(); ArcusClient client = ArcusClient.createArcusClient(SERVICE_CODE, cfb); Arcus Java client\uc5d0\uc11c\ub294 Log\ub97c \uae30\ub85d\ud560 \ub54c Class\uc758 \uc774\ub984( clazz.getName() )\uc744 \uae30\uc900\uc73c\ub85c Logger\ub97c \uad6c\ubd84\ud558\uc5ec \uc0ac\uc6a9\ud558\uba70, class\uc758 \uc774\ub984\uacfc \uc815\ud655\ud788 \uc77c\uce58\ud558\ub294 \ub85c\uac70\uac00 \uc5c6\ub2e4\uba74 logger tree \uc0c1\uc758 \uc0c1\uc704 logger \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub294 root logger \uc758 level\uc744 WARN \uc73c\ub85c \uc124\uc815\ud558\uc5ec WARN level \uc774\uc0c1\uc758 \ub85c\uadf8\ub294 \ud56d\uc0c1 \uae30\ub85d\ud558\uace0, net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl class\uc758 \ub85c\uadf8\ub9cc DEBUG level \uc774\uc0c1\uc758 \ub85c\uadf8\ub97c \uae30\ub85d\ud558\ub3c4\ub85d \ud55c \uc608\uc81c\uc774\ub2e4. <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <root> <level value=\"WARN\" /> <appender-ref ref=\"console\" /> </root> Application\uc744 \ub514\ubc84\uae45\ud574\uc57c \ud560 \ub54c Arcus client\uc5d0\uc11c Arcus server\ub85c \uc804\uc1a1\ud558\ub294 ascii protocol \ubb38\uc790\uc5f4\uc774 \uad81\uae08\ud560 \ub54c\uac00 \uc788\ub2e4. Arcus Java Client\uc5d0\uc11c Arcus server\ub85c \uc804\uc1a1\ud558\ub294 protocol\uc744 \ub85c\uadf8\ub85c \uc0b4\ud3b4\ubcf4\ub824\uba74 \uc544\ub798\uc640 \uac19\uc774 logger\ub97c \uc124\uc815\ud558\uba74 \ub41c\ub2e4. \uc608\uc81c\uc5d0 \ub098\uc5f4\ub41c logger\ub97c \ubaa8\ub450 \uc124\uc815\ud558\uba74 \uc694\uccad(get, set \ub4f1..)\ubcc4\ub85c \ubaa8\ub4e0 \ub85c\uadf8\uac00 \ub0a8\uac8c \ub418\ub2c8 \ud544\uc694\ud55c \uc694\uccad\uc5d0 \ud574\ub2f9\ud558\ub294 logger\ub9cc \uc124\uc815\ud558\uba74 \ud3b8\ub9ac\ud558\ub2e4. Ascii Protocol\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 Arcus \uc11c\ubc84 \uba85\ub839 \ud504\ub85c\ud1a0\ucf5c \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. <!-- collection update --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection piped exist --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionPipedExistOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- set attributes --> <logger name=\"net.spy.memcached.protocol.ascii.SetAttrOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection insert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionStoreOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection get --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionGetOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection upsert --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpsertOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection update --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionUpdateOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> <!-- collection count --> <logger name=\"net.spy.memcached.protocol.ascii.CollectionCountOperationImpl\" additivity=\"false\"> <level value=\"DEBUG\" /> <appender-ref ref=\"console\" /> </logger> \uae30\ud0c0 log4j\uc758 \uc790\uc138\ud55c \uc124\uc815 \ubc29\ubc95\uc740 log4j \uc124\uc815 \ubc29\ubc95 \uc744 \ud655\uc778\ud558\uae30 \ubc14\ub780\ub2e4.","title":"Logger \uc124\uc815"},{"location":"arcus-java-client/2.-arcus-java-client/#slf4jlogger","text":"slf4j\uc640 \ud638\ud658\ub418\ub294 log4j \uc774\uc678\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac(logback, log4j2, ...)\ub97c \uc4f8 \uacbd\uc6b0, net.spy.memcached.compat.log.SLF4JLogger \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud560 \uac83\uc774\ub2e4. \uc774 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \ud544\uc218\uc801\uc73c\ub85c \ud574\uc57c \ud558\ub294 \uc791\uc5c5\uc774 \uc788\ub2e4. (SLF4JLogger\uc640 log4j\ub97c \uc870\ud569\ud574\uc11c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ud558\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4.) ArcusClient\ub294 \uae30\ubcf8\uc801\uc73c\ub85c Zookeeper\uc5d0 \uc758\ud574\uc11c slf4j\uc758 \uad6c\ud604 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 slf4j-log4j12\ub97c \uae30\ubcf8 dependency\ub85c \uac00\uc9c4\ub2e4. \ub530\ub77c\uc11c log4j \uc774\uc678\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c SLF4JLogger\uc640 \uc870\ud569\ud574\uc11c \uc0ac\uc6a9\ud558\ub824\uba74 ArcusClient dependency\uc758 exclusion\uc5d0 slf4j-log4j12\ub97c \ucd94\uac00\ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 ArcusClient \uc0ac\uc6a9\uc790\uac00 SLF4JLogger\uc640 logback\uc744 \uc870\ud569\ud574\uc11c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 dependency \uc124\uc815\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ud574\uc57c \ud55c\ub2e4. <dependency> <groupId>com.navercorp.arcus</groupId> <artifactId>arcus-java-client</artifactId> <version>${arcus-java-client.version}</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>${logback.version}</version> </dependency> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-core</artifactId> <version>${logback.version}</version> </dependency> 2\uac1c \uc774\uc0c1\uc758 slf4j\uc758 \uad6c\ud604 \ub77c\uc774\ube0c\ub7ec\ub9ac(logback-classic, slf4j-log4j12, ...)\ub4e4\uc774 \uac19\uc740 classpath\uc5d0 \uc874\uc7ac\ud560 \uacbd\uc6b0, SLF4J\uc5d0\uc11c multiple binding error \uac00 \ubc1c\uc0dd\ud558\ubbc0\ub85c \ubc18\ub4dc\uc2dc exclusion \ud0a4\uc6cc\ub4dc\ub97c \uc774\uc6a9\ud574 slf4j \uad6c\ud604 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud558\ub098\ub9cc \uc874\uc7ac\ud558\ub3c4\ub85d \ud558\uc5ec\uc57c \ud55c\ub2e4. SLF4J: Class path contains multiple SLF4J bindings. SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.","title":"SLF4JLogger \uc0ac\uc6a9\uc2dc \uc720\uc758 \uc0ac\ud56d"},{"location":"arcus-java-client/2.-arcus-java-client/#transparent-front-cache","text":"Arcus\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc6d0\uaca9 Cache \uc2dc\uc2a4\ud15c\uc774\ubbc0\ub85c \uc694\uccad\uc5d0 \ub300\ud55c \uc751\ub2f5\uc744 \ubc1b\uc744 \ub54c\ub9c8\ub2e4 \ub370\uc774\ud130\ub97c \uac1d\uccb4\ud654\ud574\uc57c \ud558\ub294 \ub2e8\uc810\uc774 \uc788\ub2e4. \uc774\ub294 \uacb0\uad6d JVM\uc758 Garbage Collector\uc5d0 \ubd80\ub2f4\uc73c\ub85c \uc791\uc6a9\ud560 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \ub9cc\uc57d \uc2e4\uc81c \ub370\uc774\ud130\uac00 \uac70\uc758 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uace0, \ubcc0\uacbd\uc774 \uc788\ub354\ub77c\ub3c4 \uc544\uc8fc \uc9e7\uc740 \uc2dc\uac04 \ub0b4\uc5d0\ub294 \uc774\uc804 \ub370\uc774\ud130\ub97c \ubcf4\uc5ec\uc918\ub3c4 \uc0c1\uad00\uc5c6\ub294 \uacbd\uc6b0\ub77c\uba74 Front Cache\ub97c \uc0ac\uc6a9\ud560 \uac83\uc744 \uace0\ub824\ud574 \ubcfc \ub9cc \ud558\ub2e4. Front cache\ub97c \uc774\uc6a9\ud558\ub824\uba74 Remote Cache\uc5d0\uc11c Hit\uac00 \ub418\uc5c8\uc744 \uacbd\uc6b0 \ubcc4\ub3c4\ub85c Front Cache \uc800\uc7a5\uc18c\uc5d0 \uae30\ub85d\uc744 \ud574 \uc8fc\uc5b4\uc57c \ud558\ub294\ub370, \ucf54\ub4dc\uac00 \uc0c1\ub2f9\ud788 \uc9c0\uc800\ubd84\ud574 \uc9c0\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ub97c \uac00\uc838\uc62c \ub54c\ub3c4 \uc544\ub798 \uadf8\ub9bc\uc5d0 \ub098\uc628 \uac83\ucc98\ub7fc \uc81c\uc77c \uba3c\uc800 Front Cache\ub97c \ud655\uc778\ud558\uace0 \ub2e4\uc74c\uc5d0 Remote Cache\ub97c \ud655\uc778\ud55c\ub2e4\uba74 \uc774 \ub610\ud55c \ud504\ub85c\uadf8\ub7a8\uc774 \ubcf5\uc7a1\ud574\uc838 \ubc84\ub9b0\ub2e4. \ub530\ub77c\uc11c Transparent\ud558\uac8c \uc989, \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc54c\uc544\uc11c Front Cache\ub97c \ud65c\uc131\ud654\ud558\uc5ec JVM\uc5d0\uc11c \uc77c\uc815 \uc2dc\uac04 Item\uc744 \ubcf4\uad00\ud574 \uc904 \uc218 \uc788\ub2e4\uba74 \ud3b8\ub9ac\ud558\uba74\uc11c\ub3c4 \ubcf4\ub2e4 \ube60\ub978 \uc751\uc6a9\uc744 \uac1c\ubc1c\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. Arcus\uc5d0\ub294 Ehcache\ub77c\ub294 Local cache \ud50c\ub7ec\uadf8\uc778\uc774 \ucd94\uac00\ub418\uc5b4 \ubcf5\uc7a1\ud55c \ud504\ub85c\uadf8\ub7a8 \uc791\uc5c5 \uc5c6\uc774 \ubc14\ub85c Front cache\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4. \uc0ac\uc6a9\uc790\ub294 \uac04\ub2e8\ud55c \uc635\uc158\ub9cc \uc124\uc815\ud558\uba74 2\ubc88\uacfc 3\ubc88 \uc791\uc5c5\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub0b4\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud55c\ub2e4. \ub2e4\uc74c\uc740 Front cache\ub97c \uc0ac\uc6a9\uc744 \uc704\ud55c \uba54\uc18c\ub4dc\ub85c ConnectionFactoryBuilder \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud560 \ub54c \uc801\uc6a9\ud55c\ub2e4. setMaxFrontCacheElements(int to) (Required) \uc5ec\uae30\uc5d0 \uc801\uc6a9\ub418\ub294 \uac12\uc740 Front Cache\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ucd5c\ub300 Item\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \uae30\ubcf8\uac12\uc740 0\uc778\ub370, 0\uc774\uba74 Front Cache\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \ub73b\uc774\ub2e4. \ub530\ub77c\uc11c Front Cache\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc18\ub4dc\uc2dc \uc591\uc758 \uc815\uc218\uac12\uc744 \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4. \ub9cc\uc57d \ucd5c\ub300 Item \uc218\ub97c \ucd08\uacfc\ud558\uba74 LRU \uc54c\uace0\ub9ac\uc998\uc744 \ud1b5\ud574 \uac00\uc7a5 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 Item\uc744 \uc81c\uac70\ud558\uace0 \uc0c8\ub85c\uc6b4 Item\uc744 \ub4f1\ub85d\ud558\uac8c \ub41c\ub2e4. setFrontCacheExpireTime(int to) (Optional, default 5) Front Cache item\uc758 expire time\uc774\ub2e4. Front cache\ub294 item\ubcc4 expire time\uc744 \uc124\uc815\ud558\uc9c0 \uc54a\uace0, \ub4f1\ub85d\ub41c \ubaa8\ub4e0 item\uc5d0 \ub3d9\uc77c\ud55c expire time\uc774 \uc801\uc6a9\ub41c\ub2e4. \uae30\ubcf8\uac12\uc740 5\uc774\uba70 \ub2e8\uc704\ub294 second\uc774\ub2e4. \uc124\uc815\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uae30\ubcf8\uac12\uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ub4f1\ub85d\ub41c \uc9c0 5\ucd08\uac00 \uc9c0\ub098\uba74 \uc790\ub3d9\uc73c\ub85c \uc0ac\ub77c\uc9c0\uac8c \ub41c\ub2e4. setFrontCacheCopyOnRead(boolean copyOnRead) (Optional, default false) Front Cache \uc5d0\uc11c Copy Cache \uae30\ub2a5\uc758 copy on read \uc635\uc158\uc744 \ud65c\uc131\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uc124\uc815\uc774\uba70, \uae30\ubcf8\uac12\uc740 false \uc774\ub2e4. setFrontCacheCopyOnWrite(boolean copyOnWrite) (Optional, default false) Front Cache \uc5d0\uc11c Copy Cache \uae30\ub2a5\uc758 copy on write \uc635\uc158\uc744 \ud65c\uc131\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uc124\uc815\uc774\uba70, \uae30\ubcf8\uac12\uc740 false \uc774\ub2e4. EhCache \uc758 Copy Cache \uae30\ub2a5\uc5d0 \ub300\ud574\uc11c\ub294 \ub2e4\uc74c \ubb38\uc11c \ub97c \ucc38\uc870 \ubc14\ub78c. Front cache \uc0ac\uc6a9 \uc0c1\uc758 \uc8fc\uc758 \uc0ac\ud56d\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. Transparent Front Cache\ub294 \ud604\uc7ac Key-Value get/set\uc5d0 \ub300\ud574\uc11c\ub9cc \uc801\uc6a9 \uac00\ub2a5\ud558\ub2e4. Front cache\ub294 remote Arcus\uc640 sync\ub97c \ub9de\ucd94\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc8fc\ub85c read-only data\ub97c caching\ud558\ub294\ub370 \uc801\ud569\ud558\ub2e4. \uadf8\ub9ac\uace0 front caching expire time\ub3c4 remote cache entry update\uc8fc\uae30\uc5d0 \ub530\ub77c sync\uac00 \ub9de\uc9c0 \uc54a\ub294 \uae30\uac04\uc744 \uc798 \ud30c\uc545\ud558\uc5ec \uc124\uc815\ud574\uc57c \ud55c\ub2e4. Front Cache \ub370\uc774\ud130\ub294 flush \uba85\ub839\uc5b4\ub97c \ud1b5\ud574\uc11c flush \ub418\uc9c0 \uc54a\ub294\ub2e4 \uc544\ub798\ub294 Front cache\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. setMaxFrontCacheElements\ub9cc 0\ubcf4\ub2e4 \ud070 \uac12\uc73c\ub85c \uc124\uc815\ud558\uba74 Front Cache\uac00 \ud65c\uc131\ud654\ub41c\ub2e4. (setFrontCacheExpireTime \ub3c4 \uc0ac\uc6a9 \uc6a9\ub3c4\uc5d0 \ub9de\ub3c4\ub85d \uba85\uc2dc\uc801\uc778 \uac12\uc744 \uc124\uc815\ud574 \uc8fc\ub294 \uac83\uc744 \ucd94\ucc9c\ud568) ConnectionFactoryBuilder factory = new ConnectionFactoryBuilder(); /* Required to use transparent front cache */ factory.setMaxFrontCacheElements(10000); /* Optional settings */ factory.setFrontCacheExpireTime(5); factory.setFrontCacheCopyOnRead(true); factory.setFrontCacheCopyOnRead(true); ArcusClient client = new ArcusClient(SERVICE_CODE, factory); \uc751\uc6a9\uc5d0\uc11c Arcus\uc5d0 \ub300\ud574 front cache\ub97c \uc0ac\uc6a9\ud574\uc57c \ubd80\ubd84\uacfc \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \ubd80\ubd84\uc73c\ub85c \uad6c\ubd84\ub41c\ub2e4\uba74, \uac01 \uc6a9\ub3c4\uc5d0 \ub9de\ub294 Arcus client \uac1d\uccb4\ub97c \ubcc4\ub3c4\ub85c \uc0dd\uc131\ud558\uc5ec \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud55c\ub2e4.","title":"Transparent Front Cache \uc0ac\uc6a9"},{"location":"arcus-java-client/2.-arcus-java-client/#connectionfactorybuilder","text":"setFailureMode(FailureMode fm) FailureMode\ub97c \ubcc0\uacbd\ud55c\ub2e4. Cancel, Redistrubute, Retry\uc758 3\uac1c FailureMode\uac00 \uc788\uc73c\uba70, \uac01\uac01\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. Cancel : \ub2e4\uc6b4(down)\ub41c \ub178\ub4dc\uc5d0 \uc694\uccad\ud558\ub294 \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc790\ub3d9\uc73c\ub85c \ucde8\uc18c\ud55c\ub2e4. Redistribute : \uc5ec\ub7ec \uac1c\uc758 Node\uac00 \ub4f1\ub85d\ub418\uc5b4 \uc788\uc744 \uacbd\uc6b0, Request\uac00 \uc2e4\ud328\ud558\uba74 \ub2e4\uc74c Node\uc5d0\uac8c \ud574\ub2f9 Request\ub97c \ub2e4\uc2dc \uc694\uccad\ud55c\ub2e4. \uc774\ub807\uac8c \ud574\uc11c Timeout\uc774 \ub0a0 \ub54c\uae4c\uc9c0 \uc218\ud589\ud55c\ub2e4. \ub9cc\uc57d Node\uac00 \ud55c \uac1c\ub77c\uba74 \ub2e4\uc74c Node\ub294 \uc790\uae30 \uc790\uc2e0\uc774 \ub41c\ub2e4. Retry : Timeout\uc774 \ub0a0 \ub54c\uae4c\uc9c0 Request\uac00 \uc2e4\ud328\ud558\uba74 \uacc4\uc18d \ud604\uc7ac Node\uc5d0 \uc694\uccad\uc744 \uc2dc\ub3c4\ud55c\ub2e4 Arcus\ub294 Cancel \ubaa8\ub4dc\ub97c \ub514\ud3f4\ud2b8\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Redistribute\ub098 Retry\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \ubc18\ubcf5\uc801\uc778 \uc694\uccad\uc5d0 \uc758\ud574 \uc751\uc6a9 \uc11c\ubc84\uc5d0 \ubd80\ud558\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc5b4 \uc774\ub7ec\ud55c \ub450 \uac00\uc9c0 \ubc29\uc2dd\uc758 \uc0ac\uc6a9\uc744 \uae08\uc9c0\ud558\uace0 \uc788\ub2e4. setOpTimeout(long t) SpyThread\uac00 Arcus Cache Server\ub85c\ubd80\ud130 \uc751\ub2f5\uc744 \ubc1b\ub294 \ub3d9\uc548\uc758 \uc624\ud37c\ub808\uc774\uc158 \ud0c0\uc784\uc544\uc6c3\uc744 \ubc00\ub9ac\ucd08 \ub2e8\uc704\ub85c \uc124\uc815\ud55c\ub2e4. \uae30\ubcf8\uac12\uc740 1,000 \ubc00\ub9ac\ucd08\uc774\ub2e4. \ucc38\uace0\ub85c, \uc751\uc6a9\uc774 Callback\uc744 \ubc1b\uc744 \ub54c\uae4c\uc9c0 \uc124\uc815\ud558\ub294 Timeout\uc740 \u201c\uc624\ud37c\ub808\uc774\uc158 \ud0c0\uc784\uc544\uc6c3 + \uba85\ub839\uc5b4 \uc0dd\uc131\uc2dc\uac04 + \uba85\ub839\uc5b4 \ub4f1\ub85d\uc2dc\uac04\u201d\uc744 \ud3ec\ud568\ud558\ub294 Timeout\uc73c\ub85c \uc774\uac83\uacfc\ub294 \ub2e4\ub974\ub2e4. setProtocol(ConnectionFactoryBuilder.Protocol prot) Arcus client\uc640 server \uc0ac\uc774\uc5d0 \uc0ac\uc6a9\ud560 \ud504\ub85c\ud1a0\ucf5c\uc744 \uc9c0\uc815\ud55c\ub2e4. Text\uc640 Binary\uc758 \ub450 \ud504\ub85c\ud1a0\ucf5c\uc774 \uc788\uc73c\ub098, Arcus\uc5d0\uc11c\ub294 Text \ud504\ub85c\ud1a0\ucf5c\ub9cc\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. setMaxReconnectDelay(long to) Arcus\uc640 \uc5f0\uacb0\uc774 \ub04a\uacbc\uc744 \uacbd\uc6b0 \ub2e4\uc2dc \uc5f0\uacb0\uc744 \ub9fa\uae30 \uc704\ud574\uc11c \ub300\uae30\ud558\ub294 \ucd5c\ub300 \uc2dc\uac04\uc744 \ucd08 \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. Arcus\ub294 \uae30\ubcf8 1\ucd08\ub97c \uc0ac\uc6a9\ud55c\ub2e4. setOpQueueFactory(OperationQueueFactory q) \uba85\ub839\uc5b4\uc758 \ub0b4\uc6a9\uc744 \ub2f4\ub294 operation \ud050\ub97c \uc0dd\uc131\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \ud06c\uae30\uac00 16,384\uc778 \ud050\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud050\uc758 \ud06c\uae30\ub97c 1000\uc73c\ub85c \ubcc0\uacbd\ud558\uace0 \uc2f6\ub2e4\uba74 setOpQueueFactory(new ArrayOperationQueueFactory(1000))\uc73c\ub85c \uc124\uc815\ud558\uba74 \ub41c\ub2e4. setTranscoder(Transcoder t) \uce90\uc2dc\uc758 \ub370\uc774\ud130 \uc601\uc5ed\uc5d0 \ub300\ud55c character set\uacfc \uc555\ucd95 \uae30\uc900\uc744 \uc124\uc815\ud55c\ub2e4. GZip \uc555\ucd95\uc744 \uc0ac\uc6a9\ud558\uba70, \uae30\ubcf8\uac12\uc740 UTF-8\uacfc 16,384 byte\uc774\ub2e4. \uc989, \ubaa8\ub4e0 \uc694\uccad\uc758 data \uc601\uc5ed\uc740 UTF-8\ub85c encoding/decoding \ub418\uace0 data \uc601\uc5ed\uc758 \ud06c\uae30\uac00 16,384byte \uc774\uc0c1\uc774\uba74 \uc555\ucd95\ud558\uc5ec Arcus\uc640 \ud1b5\uc2e0\ud558\uac8c \ub41c\ub2e4. \ub9cc\uc57d, character set\uc744 EUC-KR\ub85c \uc124\uc815\ud558\uace0 \uc555\ucd95 \uae30\uc900\uc744 4,096byte\ub85c \ubcc0\uacbd\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uc815\ud55c\ub2e4. java SerializingTranscoder trans = new SerializingTranscoder(); trans.setCharset(\u201cEUC-KR\u201d); trans.setCompressionThreshold(4096); setTranscoder(trans); setShouldOptimize(boolean o) \ucd5c\uc801\ud654 \ub85c\uc9c1 \uc0ac\uc6a9\uc5ec\ubd80\ub97c \uacb0\uc815\ud55c\ub2e4. \ucd5c\uc801\ud654 \ub85c\uc9c1\uc740 Operation Queue\uc5d0 \uc21c\uc11c\ub300\ub85c \uc788\ub294 get \uc5f0\uc0b0\ub4e4\uc744 multi-get\uacfc get \uc5f0\uc0b0\uc73c\ub85c \uc870\ud569\ud615\uc73c\ub85c \ud55c\uaebc\ubc88\uc5d0 \uc218\ud589\ud558\uac8c \ub41c\ub2e4. Arcus\uc5d0\uc11c\ub294 optimize \ub85c\uc9c1 \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. setReadBufferSize(int to) Arcus server socket\uacfc \ud1b5\uc2e0\ud560 \ub54c \uc0ac\uc6a9\ub418\ub294 \uc804\uc5ed ByteBuffer \ud06c\uae30\ub97c \uc124\uc815\ud55c\ub2e4. (\uc774\ub984\uc740 Read\uc774\uc9c0\ub9cc \uc77d\uae30/\uc4f0\uae30 \ubc84\ud37c\uc758 \ud06c\uae30\ub294 \uc774 \uac12\uc744 \ub530\ub978\ub2e4) \ub9cc\uc57d ByteBuffer \ud06c\uae30\ub97c \ub118\uc5b4\uc11c\ub294 \ub370\uc774\ud130\uac00 \ub118\uc5b4\uc624\uba74 \uc7ac \uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uae30 \uc704\ud574 ByteBuffer \ud06c\uae30\ub9cc\ud07c \ucc98\ub9ac\ud55c \ud6c4 ByteBuffer\uc758 \ub0b4\uc6a9\uc744 \ube44\uc6b0\uace0, \ub2e4\uc2dc \uc0ac\uc6a9\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4. \ud06c\uae30\uc758 \ub2e8\uc704\ub294 byte\uc774\uba70, \uae30\ubcf8\uac12\uc740 16,384\uc774\ub2e4. setDaemon(boolean d) \uae30\ubcf8\uac12\uc774 true\uc774\ub2e4. setTimeoutExceptionThreshold(int to) Timeout\uc774 \uc5f0\uc18d\uc73c\ub85c \ubc1c\uc0dd\ud560 \uacbd\uc6b0 \ud574\ub2f9 Connection\uc5d0 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud588\ub2e4\uace0 \ud310\ub2e8\ud558\uc5ec Connection\uc744 \ub04a\uace0 \uc7ac\uc811\uc18d\uc744 \uc2dc\ub3c4\ud55c\ub2e4. Arcus\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uc5f0\uc18d Timeout \ud55c\uacc4\uac12\uc740 10\uc774\ub2e4. setTimeoutRatioThreshold(int to) Client request\uac00 \uc5b4\ub5a4 \uc774\uc720\ub85c \uc624\ub7ab\ub3d9\uc548 \ucc98\ub9ac\ub418\uc9c0 \ubabb\ud558\uba74, Arcus client\ub294 continuous timeout \ubc29\ubc95\uc73c\ub85c \uc774\ub97c \ud0d0\uc9c0\ud558\uace0 \uc751\uc6a9\uc5d0\uac8c \ube60\ub978 \uc2e4\ud328 \uc751\ub2f5\uc744 \uc804\ub2ec\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc740 \uc2e4\ud328\ud55c request \uc131\uaca9\uc5d0 \ub530\ub77c DB \uc870\ud68c\ud560 \uc9c0 \uc544\ub2c8\uba74 Arcus\uc5d0 \uc7ac\uc694\uccad\ud560 \uc9c0\ub97c \uacb0\uc815\ud558\uc5ec \uc6c0\uc9c1\uc77c \uc218 \uc788\ub2e4. Client request\uac00 \uc624\ub7ab\ub3d9\uc548 \ucc98\ub9ac\ub418\uc9c0 \ubabb\ud558\ub294 \uac83\uc774 \uc544\ub2cc \uadf8 \ucc98\ub9ac \uc18d\ub3c4\uac00 \ub9e4\uc6b0 \ub290\ub824\uc9c4 \uacbd\uc6b0\uc5d0\ub294 \uc77c\ubd80 request\uc5d0 \ub300\ud574 operation timeout\uc774 \ubc1c\uc0dd\ud558\uc9c0\ub9cc \ub2e4\ub978 \uc77c\ubd80 requests\ub294 \uc815\uc0c1 \ucc98\ub9ac\ub420 \uc218 \uc788\ub2e4. \uc774 \uacbd\uc6b0, client request\uac00 \uc815\uc0c1 \ucc98\ub9ac\ub418 \uc54a\uc9c0\ub9cc continuous timeout\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc0c1\ud0dc\ub97c \ud0d0\uc9c0\ud558\uae30 \uc704\ud558\uc5ec, \ucd5c\uadfc 100\uac1c requests\uc5d0 \ub300\ud574 timeout ratio\ub97c \uacc4\uc0b0\ud558\uc5ec \ud2b9\uc815 threshold \uc774\uc0c1\uc774\uba74 \ud604\uc7ac connection\uc744 \ub04a\uace0 \uc7ac\uc811\uc18d\uc744 \uc2dc\ub3c4\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. Timeout ratio threshold\uc758 default \uac12\uc740 0\uc73c\ub85c disabled\ub41c \uc0c1\ud0dc\uc774\uba70, 1 ~ 99 \uc0ac\uc774\uc758 \uac12\uc744 \uc8fc\uba74 \uadf8 \uac12\uc73c\ub85c timeout ratio threshold\uac00 \uc124\uc815\ub418\uc5b4 \ub3d9\uc791\ud558\uac8c \ub41c\ub2e4. setOpQueueMaxBlockTime(long t) Operation\uc744 \uc694\uccad\ud560 \ub54c \ube44\ub3d9\uae30\uc2dd\uc73c\ub85c Operation queue\uc5d0 \ub4f1\ub85d\ud558\uc5ec \uc791\uc5c5\uc744 \uc694\uccad\ud558\uac8c \ub418\uc5b4 \uc788\ub294\ub370, \uc774 \uc635\uc158\uc740 Queue\uac00 \ubaa8\ub450 \uaf49 \ucc2c \uc0c1\ud0dc\uac00 \ub418\uc5c8\uc744 \ub54c \ucd5c\ub300 \uae30\ub2e4\ub9ac\ub294 \uc2dc\uac04\uc744 \uc758\ubbf8\ud55c\ub2e4. \ub2e8\uc704\ub294 millisecond \uc774\uace0, \uae30\ubcf8\uac12\uc740 10000ms\uc774\ub2e4. setBulkServiceLoopLimit(int limit) Bulk insert\ub294 Client\uc5d0\uc11c \uc785\ub825\ub41c \uc544\uc774\ud15c\uc744 \uc11c\ubc84\ub85c \uc804\uc1a1\ud55c\ub2e4. \uc774\ub54c \ud55c\uaebc\ubc88\uc5d0 \uba87 \uac1c\uc758 \uc544\uc774\ud15c\uc744 \uc11c\ubc84\uc5d0 insert\ud558\uace0 \uacb0\uacfc\ub97c \uae30\ub2e4\ub9b4\uc9c0 \uc9c0\uc815\ud55c\ub2e4. \uae30\ubcf8\uac12\uc740 1\uc774\ub2e4. \uc989, 100\uac1c \uc544\uc774\ud15c\uc744 bulk insert\ud558\uba74 \uc11c\ubc84\ub85c \ud55c \uac1c\uc529 \uc694\uccad\ud55c\ub2e4. setBulkServiceSingleOpTimeout(long timeout) Bulk insert\uc758 \uac01 insert timeout\uc744 \uc124\uc815\ud55c\ub2e4. \ub2e8\uc704\ub294 millisecond\uc774\ub2e4.","title":"ConnectionFactoryBuilder \ud074\ub798\uc2a4\uc758 \uc8fc\uc694 \uba54\uc18c\ub4dc"},{"location":"arcus-java-client/3.-key-value-API/","text":"Key-value item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 \ud558\ub098\uc758 value\ub9cc\uc744 \uc800\uc7a5\ud558\ub294 item\uc774\ub2e4. \uc81c\uc57d\uc870\uac74 Key\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 250 character\uc774\ub2e4. Value\ub294 \ucd5c\ub300 1Mb\uae4c\uc9c0 \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4. 3-1. Key-Value Item \uc800\uc7a5 key-value item\uc744 \uc800\uc7a5\ud558\ub294 API\ub85c set, add, replace, prepend/append\uac00 \uc788\ub2e4. Future<Boolean> set(String key, int exp, Object obj) Future<Boolean> add(String key, int exp, Object obj) \\<key, obj>\uc758 key-value item\uc744 \uc800\uc7a5\ud55c\ub2e4. \ud574\ub2f9 key\uac00 cache\uc5d0 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0, set\uc740 value \ubd80\ubd84\ub9cc obj\ub85c \ubcc0\uacbd\ud55c\ub2e4. add\ub294 \\<key, obj> item\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc800\uc7a5\ub41c key-value item\uc740 exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. Future<Boolean> replace(String key, int exp, Object obj) \uc8fc\uc5b4\uc9c4 key\uc758 value \ubd80\ubd84\ub9cc\uc744 obj\ub85c \uad50\uccb4\ud55c\ub2e4. \ud574\ub2f9 key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74, \uad50\uccb4 \uc791\uc5c5\uc740 \uc218\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \uad50\uccb4\ub41c key-value item\uc740 exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. Future<Boolean> prepend(long cas, String key, Object val) Future<Boolean> append(long cas, String key, Object val) \uc8fc\uc5b4\uc9c4 key\uc758 value \ubd80\ubd84\uc5d0\uc11c \uac00\uc7a5 \uc55e\ucabd(prepend) \ub610\ub294 \uac00\uc7a5 \ub4a4\ucabd(append)\uc5d0 val\uc744 \ucd94\uac00\ud55c\ub2e4. \uccab\uc9f8 \uc778\uc790\uc778 cas\ub294 \ud604\uc7ac \uc774\uc6a9\ub418\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc784\uc758\uc758 \uac12\uc744 \uc8fc\uba74 \ub41c\ub2e4. \ucd08\uae30\uc5d0 CAS(compare-and-set) \uc5f0\uc0b0\uc73c\ub85c \uc218\ud589\ud558\uae30 \uc704\ud55c \uc6a9\ub3c4\ub85c \ud544\uc694\ud588\ub358 \uc778\uc790\uc774\ub2e4. \uadf8\ub9ac\uace0, \ud55c\ubc88\uc758 API \ud638\ucd9c\ub85c \ub2e4\uc218\uc758 key-value items\uc744 set\ud558\ub294 bulk API\ub97c \uc81c\uacf5\ud55c\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncSetBulk(List<String> key, int exp, Object obj) Future<Map<String, CollectionOperationStatus>> asyncSetBulk(Map<String, Object> map, int exp) \ub2e4\uc218\uc758 key-value item\uc744 \ud55c\ubc88\uc5d0 set\ud55c\ub2e4. \uc804\uc790\ub294 key list\uc758 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ub3d9\uc77c\ud55c obj\ub85c set \uc5f0\uc0b0\uc744 \ud55c\ubc88\uc5d0 \uc218\ud589\ud558\uba70, \ud6c4\uc790\ub294 map\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \\<key, obj>\uc5d0 \ub300\ud574 set \uc5f0\uc0b0\uc744 \ud55c\ubc88\uc5d0 \uc218\ud589\ud55c\ub2e4. \uc800\uc7a5\ub41c key-value item\ub4e4\uc740 \ubaa8\ub450 exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. expiration\uc740 key\uac00 \ud604\uc7ac \uc2dc\uac04\ubd80\ud130 expire \ub420 \ub54c\uae4c\uc9c0\uc758 \uc2dc\uac04(\ucd08 \ub2e8\uc704)\uc744 \uc785\ub825\ud55c\ub2e4. \uc2dc\uac04\uc774 30\uc77c\uc744 \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 expire \ub420 unix time\uc744 \uc785\ub825\ud55c\ub2e4. \uadf8 \uc678\uc5d0 expire \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\uae30 \uc704\ud574 \uc544\ub798 \uac12\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. 0: key\uac00 expire \ub418\uc9c0 \uc54a\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4. \ud558\uc9c0\ub9cc Arcus cache server\uc758 \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud55c \uacbd\uc6b0 LRU\uc5d0 \uc758\ud574 \uc5b8\uc81c\ub4e0\uc9c0 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. -1: key\ub97c sticky item\uc73c\ub85c \ub9cc\ub4e0\ub2e4. Sticky item\uc740 expire \ub418\uc9c0 \uc54a\uc73c\uba70 LRU\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\uc9c0\ub3c4 \uc54a\ub294\ub2e4. 3-2. Key-Value Item \uc870\ud68c \ud558\ub098\uc758 key\uc5d0 \ub300\ud55c value\ub97c \uc870\ud68c\ud558\ub294 API\uc640 \uc5ec\ub7ec key\ub4e4\uc758 value\ub4e4\uc744 \ud55c\ubc88\uc5d0 \uc870\ud68c\ud558\ub294 bulk API\ub97c \uc81c\uacf5\ud55c\ub2e4. Future<Object> asyncGet(String key) \uc8fc\uc5b4\uc9c4 key\uc5d0 \uc800\uc7a5\ub41c value\ub97c \ubc18\ud658\ud55c\ub2e4. Future<Map<String,Object>> asyncGetBulk(Collection<String> keys) Future<Map<String,Object>> asyncGetBulk(String... keys) \ub2e4\uc218 key\ub4e4\uc5d0 \uc800\uc7a5\ub41c value\ub97c Map \ud615\ud0dc\ub85c \ubc18\ud658\ud55c\ub2e4. \ub2e4\uc218 key\ub4e4\uc740 String \uc720\ud615\uc758 Collection\uc774\uac70\ub098 String \uc720\ud615\uc758 \ub098\uc5f4\ub41c key \ubaa9\ub85d\uc77c \uc218 \uc788\ub2e4. 3-3. Key-Value Item \uac12\uc758 \uc99d\uac10 key-value item\uc5d0\uc11c value \ubd80\ubd84\uc758 \uac12\uc744 \uc99d\uac00\uc2dc\ud0a4\uac70\ub098 \uac10\uc18c\uc2dc\ud0a4\ub294 \uc5f0\uc0b0\uc774\ub2e4. ( [\uc8fc\uc758] \uc99d\uac10 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub824\uba74, \ubc18\ub4dc\uc2dc value \uac12\uc774 String \uc720\ud615\uc758 \uc22b\uc790 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. ) Future<Long> asyncIncr(String key, int by) Future<Long> asyncDecr(String key, int by) key\uc5d0 \uc800\uc7a5\ub41c \uc815\uc218\ud615 \ub370\uc774\ud130\uc758 \uac12\uc744 by \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c\uc2dc\ud0a8\ub2e4. key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc99d\uac10\uc5f0\uc0b0\uc740 \uc218\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \ubc18\ud658\ub418\ub294 \uac12\uc740 \uc99d\uac10 \ud6c4\uc758 \uac12\uc774\ub2e4. Future<Long> asyncIncr(String key, int by, long def, int exp) Future<Long> asyncDecr(String key, int by, long def, int exp) key\uc5d0 \uc800\uc7a5\ub41c \uc815\uc218\ud615 \ub370\uc774\ud130\uc758 \uac12\uc744 by \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c\uc2dc\ud0a8\ub2e4. key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \\<key, def> item\uc744 \ucd94\uac00\ud558\uba70, exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. \ubc18\ud658\ub418\ub294 \uac12\uc740 \uc99d\uac10 \ud6c4\uc758 \uac12\uc774\ub2e4. Key-Value Item \uc0ad\uc81c Future<Boolean> delete(String key) \uc8fc\uc5b4\uc9c4 key\ub97c \uac00\uc9c4 item\uc744 cache\uc5d0\uc11c \uc0ad\uc81c\ud55c\ub2e4.","title":"3. key value API"},{"location":"arcus-java-client/3.-key-value-API/#3-1-key-value-item","text":"key-value item\uc744 \uc800\uc7a5\ud558\ub294 API\ub85c set, add, replace, prepend/append\uac00 \uc788\ub2e4. Future<Boolean> set(String key, int exp, Object obj) Future<Boolean> add(String key, int exp, Object obj) \\<key, obj>\uc758 key-value item\uc744 \uc800\uc7a5\ud55c\ub2e4. \ud574\ub2f9 key\uac00 cache\uc5d0 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0, set\uc740 value \ubd80\ubd84\ub9cc obj\ub85c \ubcc0\uacbd\ud55c\ub2e4. add\ub294 \\<key, obj> item\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc800\uc7a5\ub41c key-value item\uc740 exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. Future<Boolean> replace(String key, int exp, Object obj) \uc8fc\uc5b4\uc9c4 key\uc758 value \ubd80\ubd84\ub9cc\uc744 obj\ub85c \uad50\uccb4\ud55c\ub2e4. \ud574\ub2f9 key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74, \uad50\uccb4 \uc791\uc5c5\uc740 \uc218\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \uad50\uccb4\ub41c key-value item\uc740 exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. Future<Boolean> prepend(long cas, String key, Object val) Future<Boolean> append(long cas, String key, Object val) \uc8fc\uc5b4\uc9c4 key\uc758 value \ubd80\ubd84\uc5d0\uc11c \uac00\uc7a5 \uc55e\ucabd(prepend) \ub610\ub294 \uac00\uc7a5 \ub4a4\ucabd(append)\uc5d0 val\uc744 \ucd94\uac00\ud55c\ub2e4. \uccab\uc9f8 \uc778\uc790\uc778 cas\ub294 \ud604\uc7ac \uc774\uc6a9\ub418\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc784\uc758\uc758 \uac12\uc744 \uc8fc\uba74 \ub41c\ub2e4. \ucd08\uae30\uc5d0 CAS(compare-and-set) \uc5f0\uc0b0\uc73c\ub85c \uc218\ud589\ud558\uae30 \uc704\ud55c \uc6a9\ub3c4\ub85c \ud544\uc694\ud588\ub358 \uc778\uc790\uc774\ub2e4. \uadf8\ub9ac\uace0, \ud55c\ubc88\uc758 API \ud638\ucd9c\ub85c \ub2e4\uc218\uc758 key-value items\uc744 set\ud558\ub294 bulk API\ub97c \uc81c\uacf5\ud55c\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncSetBulk(List<String> key, int exp, Object obj) Future<Map<String, CollectionOperationStatus>> asyncSetBulk(Map<String, Object> map, int exp) \ub2e4\uc218\uc758 key-value item\uc744 \ud55c\ubc88\uc5d0 set\ud55c\ub2e4. \uc804\uc790\ub294 key list\uc758 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ub3d9\uc77c\ud55c obj\ub85c set \uc5f0\uc0b0\uc744 \ud55c\ubc88\uc5d0 \uc218\ud589\ud558\uba70, \ud6c4\uc790\ub294 map\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \\<key, obj>\uc5d0 \ub300\ud574 set \uc5f0\uc0b0\uc744 \ud55c\ubc88\uc5d0 \uc218\ud589\ud55c\ub2e4. \uc800\uc7a5\ub41c key-value item\ub4e4\uc740 \ubaa8\ub450 exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. expiration\uc740 key\uac00 \ud604\uc7ac \uc2dc\uac04\ubd80\ud130 expire \ub420 \ub54c\uae4c\uc9c0\uc758 \uc2dc\uac04(\ucd08 \ub2e8\uc704)\uc744 \uc785\ub825\ud55c\ub2e4. \uc2dc\uac04\uc774 30\uc77c\uc744 \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 expire \ub420 unix time\uc744 \uc785\ub825\ud55c\ub2e4. \uadf8 \uc678\uc5d0 expire \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\uae30 \uc704\ud574 \uc544\ub798 \uac12\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. 0: key\uac00 expire \ub418\uc9c0 \uc54a\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4. \ud558\uc9c0\ub9cc Arcus cache server\uc758 \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud55c \uacbd\uc6b0 LRU\uc5d0 \uc758\ud574 \uc5b8\uc81c\ub4e0\uc9c0 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. -1: key\ub97c sticky item\uc73c\ub85c \ub9cc\ub4e0\ub2e4. Sticky item\uc740 expire \ub418\uc9c0 \uc54a\uc73c\uba70 LRU\uc5d0 \uc758\ud574 \uc0ad\uc81c\ub418\uc9c0\ub3c4 \uc54a\ub294\ub2e4.","title":"3-1. Key-Value Item \uc800\uc7a5"},{"location":"arcus-java-client/3.-key-value-API/#3-2-key-value-item","text":"\ud558\ub098\uc758 key\uc5d0 \ub300\ud55c value\ub97c \uc870\ud68c\ud558\ub294 API\uc640 \uc5ec\ub7ec key\ub4e4\uc758 value\ub4e4\uc744 \ud55c\ubc88\uc5d0 \uc870\ud68c\ud558\ub294 bulk API\ub97c \uc81c\uacf5\ud55c\ub2e4. Future<Object> asyncGet(String key) \uc8fc\uc5b4\uc9c4 key\uc5d0 \uc800\uc7a5\ub41c value\ub97c \ubc18\ud658\ud55c\ub2e4. Future<Map<String,Object>> asyncGetBulk(Collection<String> keys) Future<Map<String,Object>> asyncGetBulk(String... keys) \ub2e4\uc218 key\ub4e4\uc5d0 \uc800\uc7a5\ub41c value\ub97c Map \ud615\ud0dc\ub85c \ubc18\ud658\ud55c\ub2e4. \ub2e4\uc218 key\ub4e4\uc740 String \uc720\ud615\uc758 Collection\uc774\uac70\ub098 String \uc720\ud615\uc758 \ub098\uc5f4\ub41c key \ubaa9\ub85d\uc77c \uc218 \uc788\ub2e4.","title":"3-2. Key-Value Item \uc870\ud68c"},{"location":"arcus-java-client/3.-key-value-API/#3-3-key-value-item","text":"key-value item\uc5d0\uc11c value \ubd80\ubd84\uc758 \uac12\uc744 \uc99d\uac00\uc2dc\ud0a4\uac70\ub098 \uac10\uc18c\uc2dc\ud0a4\ub294 \uc5f0\uc0b0\uc774\ub2e4. ( [\uc8fc\uc758] \uc99d\uac10 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub824\uba74, \ubc18\ub4dc\uc2dc value \uac12\uc774 String \uc720\ud615\uc758 \uc22b\uc790 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. ) Future<Long> asyncIncr(String key, int by) Future<Long> asyncDecr(String key, int by) key\uc5d0 \uc800\uc7a5\ub41c \uc815\uc218\ud615 \ub370\uc774\ud130\uc758 \uac12\uc744 by \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c\uc2dc\ud0a8\ub2e4. key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc99d\uac10\uc5f0\uc0b0\uc740 \uc218\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \ubc18\ud658\ub418\ub294 \uac12\uc740 \uc99d\uac10 \ud6c4\uc758 \uac12\uc774\ub2e4. Future<Long> asyncIncr(String key, int by, long def, int exp) Future<Long> asyncDecr(String key, int by, long def, int exp) key\uc5d0 \uc800\uc7a5\ub41c \uc815\uc218\ud615 \ub370\uc774\ud130\uc758 \uac12\uc744 by \ub9cc\ud07c \uc99d\uac00/\uac10\uc18c\uc2dc\ud0a8\ub2e4. key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 \\<key, def> item\uc744 \ucd94\uac00\ud558\uba70, exp \ucd08 \uc774\ud6c4\uc5d0 \uc0ad\uc81c\ub41c\ub2e4. \ubc18\ud658\ub418\ub294 \uac12\uc740 \uc99d\uac10 \ud6c4\uc758 \uac12\uc774\ub2e4.","title":"3-3. Key-Value Item \uac12\uc758 \uc99d\uac10"},{"location":"arcus-java-client/3.-key-value-API/#key-value-item","text":"Future<Boolean> delete(String key) \uc8fc\uc5b4\uc9c4 key\ub97c \uac00\uc9c4 item\uc744 cache\uc5d0\uc11c \uc0ad\uc81c\ud55c\ub2e4.","title":"Key-Value Item \uc0ad\uc81c"},{"location":"arcus-java-client/4.-list-API/","text":"List collection\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 \uc5ec\ub7ec value\ub4e4\uc744 double linked list \uad6c\uc870\ub85c \uc720\uc9c0\ud55c\ub2e4. \uc81c\uc57d \uc870\uac74 \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218 : \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB List\uc758 \uc55e, \ub4a4\uc5d0\uc11c element\ub97c \uc0bd\uc785/\uc0ad\uc81c\ud558\uae30\ub97c \uad8c\ud55c\ub2e4. \uc784\uc758\uc758 index \uc704\uce58\uc5d0\uc11c element \uc0bd\uc785/\uc0ad\uc81c\uac00 \uac00\ub2a5\ud558\uc9c0\ub9cc, \uc784\uc758\uc758 index \uc704\uce58\ub97c \uc2e0\uc18d\ud788 \ucc3e\uc544\uac00\uae30 \uc704\ud55c \uc790\ub8cc\uad6c\uc870\uac00 \ud604\uc7ac \uc5c6\ub294 \uc0c1\ud0dc\ub77c\uc11c \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4. 4-1. List Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty list item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncLopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 list\uc758 key valueType: list\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING - String ElementValueType.LONG - Long ElementValueType.INTEGER - Integer ElementValueType.BOOLEAN - Boolean ElementValueType.DATE - Date ElementValueType.BYTE - Byte ElementValueType.FLOAT - Float ElementValueType.DOUBLE - Double ElementValueType.BYTEARRAY - Byte array ElementValueType.OTHERS - \uc704\uc5d0 \ub098\uc5f4\ud55c \ud0c0\uc785\uc744 \uc81c\uc678\ud55c \ubaa8\ub4e0 \ud0c0\uc785 attributes: list item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key \uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 List item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptyList\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); try { future = client.asyncLopCreate(key, ElementValueType.OTHERS, attribute); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Empty list\ub97c \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 list\uc548\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc608\uc81c\uc5d0\uc11c\ub294 ElementValueType\uc744 \ud1b5\ud574 \uc9c0\uc815\ud560 \uc218 \uc788\ub294 \ud0c0\uc785\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty list\ub97c \uc0dd\uc131\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 4-2. List Element \uc0bd\uc785 List\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Boolean> asyncLopInsert(String key, int index, Object value, CollectionAttributes attributesForCreate) List\uc5d0 \uc0c8\ub85c\uc6b4 element\ub97c \uc0bd\uc785\ud55c\ub2e4. key: \uc0bd\uc785 \ub300\uc0c1 list\uc758 key index: \uc0bd\uc785 \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 list\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty list item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED List collection\uc774 \uc874\uc7ac\ud558\uc5ec element \ub9cc \uc0bd\uc785\ub428 True CollectionResponse.CREATED_STORED List collection\uc774 create\ub418\uace0 element\uac00 \uc0bd\uc785\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) Fasle CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 list\uac00 \uc544\ub2d8 False CollectionResponse.OVERFLOWED Overflow \uc0c1\ud0dc\uc784 False CollectionResponse.OUT_OF_RANGE \uc0bd\uc785 \uc704\uce58\uac00 list\uc758 element index \ubc94\uc704\ub97c \ub118\uc5b4\uc12c List element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:List\"; int index = -1; String value = \"This is a value.\"; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncLopInsert(key, index, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate \uc18d\uc131\uc744 \uac00\uc9c0\ub294 list\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc0bd\uc785\ud55c\ub2e4. \ub9cc\uc57d attributesForCreate\uac12\uc774 null\uc774\uace0 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 element\ub294 insert\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc774 \uc608\uc81c\ub294 \ud2b9\ubcc4\ud55c \uc124\uc815\uc744 \ud558\uc9c0 \uc54a\uc740 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70 \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. \ucc38\uace0\ub85c \uc774\ubbf8 key\uac00 \uc874\uc7ac\ud558\ub294 \uc0c1\ud0dc\uc5d0\uc11c value\ub97c \uc800\uc7a5\ud55c\ub2e4 \ud558\ub354\ub77c\ub3c4 key\uc5d0 \uc124\uc815\ub41c expire time\uc740 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub2e4\uc2dc \ub9d0\ud574 value\uac00 \ucd94\uac00\ub418\uc5b4\ub3c4 expire time\uc740 \ubcc0\uacbd\ub418\uac70\ub098 \uc5f0\uc7a5\ub418\uc9c0 \uc54a\ub294\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0bd\uc785\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0bd\uc785 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0bd\uc785 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 4-3. List Element \uc0ad\uc81c List\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 \ud558\ub098\uc758 element \ub610\ub294 index range\uc5d0 \ud3ec\ud568\ub418\ub294 \ub2e4\uc218 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CollectionFuture<Boolean> asyncLopDelete(String key, int index, Boolean dropIfEmpty) CollectionFuture<Boolean> asyncLopDelete(String key, int from, int to, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 list\uc758 key index or index range(from, to): \uc0ad\uc81c \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED List\uc5d0\uc11c element\ub9cc \uc0ad\uc81c\ub428 True CollectionResponse.DELETED_DROPPED List\uc5d0\uc11c element \uc0ad\uc81c \ud6c4, empty list\uac00 \ub418\uc5b4\uc11c \uadf8 list\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 list\uac00 \uc544\ub2d8 False CollectionResponse.NOT_FOUND_ELEMENT List \ub294 \uc788\uc9c0\ub9cc \uc870\uac74\uc5d0 \ub9de\ub294 element\uac00 \uc5c6\uc74c List\uc5d0\uc11c index\uac00 0\ubd80\ud130 10\uae4c\uc9c0\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Sample:List\"; int from = 0; int to = 10; boolean dropIfEmpty = false; CollectionFuture<Boolean> future = null; try { future = client.asyncLopDelete(key, from, to, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } List\uc5d0\uc11c index\uac00 from\ubd80\ud130 to\uc0ac\uc774\uc5d0 \uc788\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\uac00 \uc0ad\uc81c\ub41c \ub2e4\uc74c List\uac00 \ube44\uc5b4\uc788\uac8c \ub418\uba74 List\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0, TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\uba74 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc0ad\uc81c \uacb0\uacfc\uc5d0 \ub530\ub978 \ubc18\ud658 \uac12\uc740 future.operationStatus().getResponse()\ub85c \ud655\uc778\ud55c\ub2e4. 4-4. List Element \uc870\ud68c List \uc5d0\uc11c \ud558\ub098\uc758 index \ub610\ub294 index range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc870\ud68c\ud55c\ub2e4. \ub9cc\uc57d, \ud574\ub2f9 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 null\uc774 \ubc18\ud658\ub41c\ub2e4. CollectionFuture<List<Object>> asyncLopGet(String key, int index, boolean withDelete, boolean dropIfEmpty) CollectionFuture<List<Object>> asyncLopGet(String key, int from, int to, boolean withDelete, boolean dropIfEmpty) key: \uc870\ud68c \ub300\uc0c1 list\uc758 key index or index range(from, to): \uc870\ud68c \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc870\ud68c\ub9cc \ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c list\ub97c drop(delete)\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 list\uac00 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) null CollectionResponse.OUT_OF_RANGE Index\uac00 list\uc758 element index\ubc94\uc704\ub97c \ubc97\uc5b4\ub0a8 List element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:List\"; int from = 0; int to = 5; boolean withDelete = false; boolean dropIfEmpty = false; CollectionFuture<List<Object>> future = null; try { future = client.asyncLopGet(key, from, to, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { List<Object> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c List\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } else if (response.equals(CollectionResponse.NOT_FOUND_ELEMENT)) { System.out.println(\"Key\ub294 \uc874\uc7ac\ud558\uc9c0\ub9cc List\uc5d0 \uc800\uc7a5\ub41c \uac12 \uc911 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } index\uac00 0\ubd80\ud130 5\uc0ac\uc774\uc5d0 \uc788\ub294 element\ub4e4\uc744 \uc870\ud68c\ud55c\ub2e4. withDelete\uac12\uc774 true\uc774\uba74 \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 list collection\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud55c \ub2e4\uc74c list collection\uc774 \ube44\uc5b4\uc788\uac8c \ub418\uba74 list\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0, TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. future.get()\uc758 \ubc18\ud658 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. key\uac00 \uc5c6\ub294 \uacbd\uc6b0, null\uc744 \ubc18\ud658\ud55c\ub2e4. key\ub294 \uc788\uc9c0\ub9cc \uc870\uac74(index)\uc5d0 \ub9de\ub294 element\uac00 \uc5c6\ub294 \uacbd\uc6b0, empty list\ub97c \ubc18\ud658 key\uac00 \uc874\uc7ac\ud558\uace0 \uc77c\ubd80 element\ub9cc \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0, \uc870\uac74\uc5d0 \ub9de\ub294 element\ub9cc \ubc18\ud658 \uc870\ud68c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4. 4-5. List Element \uc77c\uad04 \uc0bd\uc785 \ub450 \uc720\ud615\uc758 bulk \uc0bd\uc785 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 list\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <Map<Integer, CollectionOperationStatus>> asyncLopPipedInsertBulk(String key, int index, List<Object> valueList, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 list\uc758 key index: \uc0bd\uc785 \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 -1\uc774\uba74 list\uc758 \uc81c\uc77c \ub4a4\uc5d0 0\uc774\uba74 list\uc758 \uc81c\uc77c \uc55e\uc5d0 \uc0bd\uc785\ud55c\ub2e4. valueList: \uc0bd\uc785\ud560 element\ub4e4\uc758 value list attributesForCreate: \ub300\uc0c1 list\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty list item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 list\ub4e4\uc5d0 \uac01\uac01 \ub3d9\uc77c\ud55c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future <Map<String, CollectionOperationStatus>> asyncLopInsertBulk(List<String> keyList, int index, Object value, CollectionAttributes attributesForCreate) keyList\ub85c \uc9c0\uc815\ub41c \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ub2c8\ub2e4. key: \uc0bd\uc785 \ub300\uc0c1 list\ub4e4\uc758 key list index: \uc0bd\uc785 \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 -1\uc774\uba74 list\uc758 \uc81c\uc77c \ub4a4\uc5d0 0\uc774\uba74 list\uc758 \uc81c\uc77c \uc55e\uc5d0 \uc0bd\uc785\ud55c\ub2e4. value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 list\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty list item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc544\ub798\ub294 \ud558\ub098\uc758 List\uc5d0 \uc5ec\ub7ec element\ub97c bulk insert\ud558\uace0 \uac01\uac01\uc758 item\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:ListBulk\"; List<Object> bulkData = getBulkData(); int index = -1; // List\uc758 \uc81c\uc77c \ub4a4\uc5d0 insert\ud55c\ub2e4. CollectionAttributes attributesForCreate = new CollectionAttributes(); if (bulkData.size() > client.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 client.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = client.asyncLopPipedInsertBulk(key, index, bulkData, attributesForCreate); // (2) } catch (Exception e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { // (5) System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + bulkData.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); // (6) } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c List\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate\uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index\uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert \uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 index\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4.","title":"4. list API"},{"location":"arcus-java-client/4.-list-API/#4-1-list-item","text":"\uc0c8\ub85c\uc6b4 empty list item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncLopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 list\uc758 key valueType: list\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING - String ElementValueType.LONG - Long ElementValueType.INTEGER - Integer ElementValueType.BOOLEAN - Boolean ElementValueType.DATE - Date ElementValueType.BYTE - Byte ElementValueType.FLOAT - Float ElementValueType.DOUBLE - Double ElementValueType.BYTEARRAY - Byte array ElementValueType.OTHERS - \uc704\uc5d0 \ub098\uc5f4\ud55c \ud0c0\uc785\uc744 \uc81c\uc678\ud55c \ubaa8\ub4e0 \ud0c0\uc785 attributes: list item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key \uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 List item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptyList\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); try { future = client.asyncLopCreate(key, ElementValueType.OTHERS, attribute); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Empty list\ub97c \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 list\uc548\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc608\uc81c\uc5d0\uc11c\ub294 ElementValueType\uc744 \ud1b5\ud574 \uc9c0\uc815\ud560 \uc218 \uc788\ub294 \ud0c0\uc785\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty list\ub97c \uc0dd\uc131\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"4-1. List Item \uc0dd\uc131"},{"location":"arcus-java-client/4.-list-API/#4-2-list-element","text":"List\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Boolean> asyncLopInsert(String key, int index, Object value, CollectionAttributes attributesForCreate) List\uc5d0 \uc0c8\ub85c\uc6b4 element\ub97c \uc0bd\uc785\ud55c\ub2e4. key: \uc0bd\uc785 \ub300\uc0c1 list\uc758 key index: \uc0bd\uc785 \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 list\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty list item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED List collection\uc774 \uc874\uc7ac\ud558\uc5ec element \ub9cc \uc0bd\uc785\ub428 True CollectionResponse.CREATED_STORED List collection\uc774 create\ub418\uace0 element\uac00 \uc0bd\uc785\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) Fasle CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 list\uac00 \uc544\ub2d8 False CollectionResponse.OVERFLOWED Overflow \uc0c1\ud0dc\uc784 False CollectionResponse.OUT_OF_RANGE \uc0bd\uc785 \uc704\uce58\uac00 list\uc758 element index \ubc94\uc704\ub97c \ub118\uc5b4\uc12c List element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:List\"; int index = -1; String value = \"This is a value.\"; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncLopInsert(key, index, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate \uc18d\uc131\uc744 \uac00\uc9c0\ub294 list\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc0bd\uc785\ud55c\ub2e4. \ub9cc\uc57d attributesForCreate\uac12\uc774 null\uc774\uace0 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 element\ub294 insert\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc774 \uc608\uc81c\ub294 \ud2b9\ubcc4\ud55c \uc124\uc815\uc744 \ud558\uc9c0 \uc54a\uc740 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70 \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. \ucc38\uace0\ub85c \uc774\ubbf8 key\uac00 \uc874\uc7ac\ud558\ub294 \uc0c1\ud0dc\uc5d0\uc11c value\ub97c \uc800\uc7a5\ud55c\ub2e4 \ud558\ub354\ub77c\ub3c4 key\uc5d0 \uc124\uc815\ub41c expire time\uc740 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub2e4\uc2dc \ub9d0\ud574 value\uac00 \ucd94\uac00\ub418\uc5b4\ub3c4 expire time\uc740 \ubcc0\uacbd\ub418\uac70\ub098 \uc5f0\uc7a5\ub418\uc9c0 \uc54a\ub294\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0bd\uc785\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0bd\uc785 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0bd\uc785 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"4-2. List Element \uc0bd\uc785"},{"location":"arcus-java-client/4.-list-API/#4-3-list-element","text":"List\uc5d0\uc11c index \uc704\uce58\uc5d0 \uc788\ub294 \ud558\ub098\uc758 element \ub610\ub294 index range\uc5d0 \ud3ec\ud568\ub418\ub294 \ub2e4\uc218 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CollectionFuture<Boolean> asyncLopDelete(String key, int index, Boolean dropIfEmpty) CollectionFuture<Boolean> asyncLopDelete(String key, int from, int to, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 list\uc758 key index or index range(from, to): \uc0ad\uc81c \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED List\uc5d0\uc11c element\ub9cc \uc0ad\uc81c\ub428 True CollectionResponse.DELETED_DROPPED List\uc5d0\uc11c element \uc0ad\uc81c \ud6c4, empty list\uac00 \ub418\uc5b4\uc11c \uadf8 list\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 list\uac00 \uc544\ub2d8 False CollectionResponse.NOT_FOUND_ELEMENT List \ub294 \uc788\uc9c0\ub9cc \uc870\uac74\uc5d0 \ub9de\ub294 element\uac00 \uc5c6\uc74c List\uc5d0\uc11c index\uac00 0\ubd80\ud130 10\uae4c\uc9c0\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Sample:List\"; int from = 0; int to = 10; boolean dropIfEmpty = false; CollectionFuture<Boolean> future = null; try { future = client.asyncLopDelete(key, from, to, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } List\uc5d0\uc11c index\uac00 from\ubd80\ud130 to\uc0ac\uc774\uc5d0 \uc788\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\uac00 \uc0ad\uc81c\ub41c \ub2e4\uc74c List\uac00 \ube44\uc5b4\uc788\uac8c \ub418\uba74 List\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0, TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\uba74 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc0ad\uc81c \uacb0\uacfc\uc5d0 \ub530\ub978 \ubc18\ud658 \uac12\uc740 future.operationStatus().getResponse()\ub85c \ud655\uc778\ud55c\ub2e4.","title":"4-3. List Element \uc0ad\uc81c"},{"location":"arcus-java-client/4.-list-API/#4-4-list-element","text":"List \uc5d0\uc11c \ud558\ub098\uc758 index \ub610\ub294 index range\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc870\ud68c\ud55c\ub2e4. \ub9cc\uc57d, \ud574\ub2f9 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\uba74 null\uc774 \ubc18\ud658\ub41c\ub2e4. CollectionFuture<List<Object>> asyncLopGet(String key, int index, boolean withDelete, boolean dropIfEmpty) CollectionFuture<List<Object>> asyncLopGet(String key, int from, int to, boolean withDelete, boolean dropIfEmpty) key: \uc870\ud68c \ub300\uc0c1 list\uc758 key index or index range(from, to): \uc870\ud68c \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc870\ud68c\ub9cc \ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c list\ub97c drop(delete)\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 list\uac00 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) null CollectionResponse.OUT_OF_RANGE Index\uac00 list\uc758 element index\ubc94\uc704\ub97c \ubc97\uc5b4\ub0a8 List element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:List\"; int from = 0; int to = 5; boolean withDelete = false; boolean dropIfEmpty = false; CollectionFuture<List<Object>> future = null; try { future = client.asyncLopGet(key, from, to, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { List<Object> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c List\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } else if (response.equals(CollectionResponse.NOT_FOUND_ELEMENT)) { System.out.println(\"Key\ub294 \uc874\uc7ac\ud558\uc9c0\ub9cc List\uc5d0 \uc800\uc7a5\ub41c \uac12 \uc911 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } index\uac00 0\ubd80\ud130 5\uc0ac\uc774\uc5d0 \uc788\ub294 element\ub4e4\uc744 \uc870\ud68c\ud55c\ub2e4. withDelete\uac12\uc774 true\uc774\uba74 \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 list collection\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud55c \ub2e4\uc74c list collection\uc774 \ube44\uc5b4\uc788\uac8c \ub418\uba74 list\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0, TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. future.get()\uc758 \ubc18\ud658 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. key\uac00 \uc5c6\ub294 \uacbd\uc6b0, null\uc744 \ubc18\ud658\ud55c\ub2e4. key\ub294 \uc788\uc9c0\ub9cc \uc870\uac74(index)\uc5d0 \ub9de\ub294 element\uac00 \uc5c6\ub294 \uacbd\uc6b0, empty list\ub97c \ubc18\ud658 key\uac00 \uc874\uc7ac\ud558\uace0 \uc77c\ubd80 element\ub9cc \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0, \uc870\uac74\uc5d0 \ub9de\ub294 element\ub9cc \ubc18\ud658 \uc870\ud68c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4.","title":"4-4. List Element \uc870\ud68c"},{"location":"arcus-java-client/4.-list-API/#4-5-list-element","text":"\ub450 \uc720\ud615\uc758 bulk \uc0bd\uc785 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 list\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <Map<Integer, CollectionOperationStatus>> asyncLopPipedInsertBulk(String key, int index, List<Object> valueList, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 list\uc758 key index: \uc0bd\uc785 \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 -1\uc774\uba74 list\uc758 \uc81c\uc77c \ub4a4\uc5d0 0\uc774\uba74 list\uc758 \uc81c\uc77c \uc55e\uc5d0 \uc0bd\uc785\ud55c\ub2e4. valueList: \uc0bd\uc785\ud560 element\ub4e4\uc758 value list attributesForCreate: \ub300\uc0c1 list\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty list item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 list\ub4e4\uc5d0 \uac01\uac01 \ub3d9\uc77c\ud55c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future <Map<String, CollectionOperationStatus>> asyncLopInsertBulk(List<String> keyList, int index, Object value, CollectionAttributes attributesForCreate) keyList\ub85c \uc9c0\uc815\ub41c \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ub2c8\ub2e4. key: \uc0bd\uc785 \ub300\uc0c1 list\ub4e4\uc758 key list index: \uc0bd\uc785 \uc704\uce58\ub85c 0-based index\ub85c \uc9c0\uc815 -1\uc774\uba74 list\uc758 \uc81c\uc77c \ub4a4\uc5d0 0\uc774\uba74 list\uc758 \uc81c\uc77c \uc55e\uc5d0 \uc0bd\uc785\ud55c\ub2e4. value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 list\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty list item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc544\ub798\ub294 \ud558\ub098\uc758 List\uc5d0 \uc5ec\ub7ec element\ub97c bulk insert\ud558\uace0 \uac01\uac01\uc758 item\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:ListBulk\"; List<Object> bulkData = getBulkData(); int index = -1; // List\uc758 \uc81c\uc77c \ub4a4\uc5d0 insert\ud55c\ub2e4. CollectionAttributes attributesForCreate = new CollectionAttributes(); if (bulkData.size() > client.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 client.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = client.asyncLopPipedInsertBulk(key, index, bulkData, attributesForCreate); // (2) } catch (Exception e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { // (5) System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + bulkData.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); // (6) } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c List\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate\uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index\uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert \uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 index\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4.","title":"4-5. List Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-java-client/5.-set-API/","text":"Set item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 unique value\uc758 \uc9d1\ud569\uc744 \uc800\uc7a5\ud55c\ub2e4. \uc8fc\ub85c membership checking\uc5d0 \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc81c\uc57d \uc870\uac74 - \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218 : \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) - \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB - Element \uac12\uc758 \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. 5-1. Set Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty set item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncSopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 set\uc758 key valueType: set\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING ElementValueType.LONG ElementValueType.INTEGER ElementValueType.BOOLEAN ElementValueType.DATE ElementValueType.BYTE ElementValueType.FLOAT ElementValueType.DOUBLE ElementValueType.BYTEARRAY ElementValueType.OTHERS attributes: set item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key \uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 Set item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptySet\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); try { future = client.asyncSopCreate(key, ElementValueType.OTHERS, attribute); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Empty set\uc744 \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 set\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. \uc608\uc81c\uc5d0\uc11c\ub294 ElementValueType\uc744 \ud1b5\ud574 \uc9c0\uc815\ud560 \uc218 \uc788\ub294 \ud0c0\uc785\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty set\uc744 \uc0dd\uc131\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 5-2. Set Element \uc0bd\uc785 Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Boolean> asyncSopInsert(String key, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 set\uc758 key value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty set item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Set collection\uc774 \uc874\uc7ac\ud558\uc5ec element \ub9cc \uc0bd\uc785\ub428 True CollectionResponse.CREATED_STORED Set collection\uc774 create\ub418\uace0 element\uac00 \uc0bd\uc785\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 set\uc774 \uc544\ub2d8 False CollectionResponse.OVERFLOWED Overflow \uc0c1\ud0dc\uc784 False CollectionResponse.ELEMENT_EXISTS \ub3d9\uc77c\ud55c \uac12\uc744 \uac00\uc9c4 element\uac00 set\uc5d0 \uc874\uc7ac\ud568 Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:Set\"; String value = \"This is a value.\"; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncSopInsert(key, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); // (3) System.out.println(future.getOperationStatus().getResponse()); // (4) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate \uc18d\uc131\uc744 \uac00\uc9c4 set\uc744 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc0bd\uc785\ud55c\ub2e4. \ub9cc\uc57d attributesForCreate\uac12\uc774 null\uc774\uace0 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 element\ub294 insert\ub418\uc9c0 \uc54a\ub294\ub2e4. \ud2b9\ubcc4\ud55c \uc124\uc815\uc744 \ud558\uc9c0 \uc54a\uc740 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70 \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. \ucc38\uace0\ub85c \uc774\ubbf8 key\uac00 \uc874\uc7ac\ud558\ub294 \uc0c1\ud0dc\uc5d0\uc11c value\ub97c \uc800\uc7a5\ud55c\ub2e4 \ud558\ub354\ub77c\ub3c4 key\uc5d0 \uc124\uc815\ub41c expire time\uc740 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub2e4\uc2dc \ub9d0\ud574 value\uac00 \ucd94\uac00\ub418\uc5b4\ub3c4 expire time\uc740 \ubcc0\uacbd\ub418\uac70\ub098 \uc5f0\uc7a5\ub418\uc9c0 \uc54a\ub294\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0bd\uc785\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0bd\uc785 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Set\uc740 \uac12\uc758 \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc911\ubcf5 \uac12\uc758 \uc720\ubb34\uc5d0 \ub530\ub77c \ubc18\ud658 \uac12\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ub2ec\ub77c\uc9c4\ub2e4. \uc0bd\uc785 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 5-3. Set Element \uc0ad\uc81c Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Boolean> asyncSopDelete(String key, Object value, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 set\uc758 key value: \uc0ad\uc81c\ud560 element \uac12 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED Set\uc5d0\uc11c element\ub9cc \uc0ad\uc81c\ub428 True CollectionResponse.DELETED_DROPPED Set\uc5d0\uc11c element \uc0ad\uc81c \ud6c4, empty set\uc774 \ub418\uc5b4\uc11c \uadf8 set\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 False CollectionResponse.NOT_FOUND_ELEMENT Key\ub294 \uc788\uc9c0\ub9cc \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c Set\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Sample:Set\"; String value = \"This is a value.\"; boolean dropIfEmpty = false; CollectionFuture<Boolean> future = null; try { future = client.asyncSopDelete(key, value, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud55c \ud6c4 set\uc774 \ube44\uc5b4\uc788\uac8c \ub420 \ub54c key\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\uba74 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc790\uc138\ud55c \uc0ad\uc81c \uacb0\uacfc\ub294 future.operationStatus().getResponse() \ub85c \ud655\uc778 \ud560 \uc218 \uc788\ub2e4. 5-4. Set Element \uc874\uc7ac\uc720\ubb34 \ud655\uc778 Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\uc758 \uc874\uc7ac\uc720\ubb34\ub97c \ud655\uc778\ud55c\ub2e4. CollectionFuture<Boolean> asyncSopExist(String key, Object value) key: \uc870\ud68c \ub300\uc0c1 set\uc758 key value: \uc874\uc7ac\uc720\ubb34\ub97c \ud655\uc778\ud560 value \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.EXIST Element\uac00 \uc874\uc7ac\ud568 True CollectionResponse.NOT_EXIST Element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 False CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) Set element\uc758 \uc874\uc7ac\uc5ec\ubd80\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:Set\"; String value = \"This is a value.\"; CollectionFuture<Boolean> future = null; try { future = client.asyncSopExist(key, value); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); // (2) CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c Set\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } else if (response.equals(CollectionResponse.NOT_EXIST)) { System.out.println(\"Key\ub294 \uc874\uc7ac\ud558\uc9c0\ub9cc Set\uc5d0 \uc694\uccad\ud55c \uac12\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Key\uc5d0 \uc800\uc7a5\ub41c set\uc5d0 value\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uac12\uc774 \uc874\uc7ac\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uad00\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 future.getOperationStatus().getResponse()\ub85c \ud655\uc778\uc774 \uac00\ub2a5\ud558\ub2e4. 5-5. Set Element \uc870\ud68c Set element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc774 \ud568\uc218\ub294 \uc784\uc758\uc758 count \uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Set<Object>> asyncSopGet(String key, int count, boolean withDelete, boolean dropIfEmpty) key: \uc870\ud68c \ub300\uc0c1 set\uc758 key count: \uc870\ud68c\ud560 element \uac1c\uc218 withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc870\ud68c\ub9cc \ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c set\uc744 drop(delete)\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc784, set\uc774 \ube44\uc5b4\uc788\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) Set element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:Set\"; int count = 10; boolean withDelete = false; boolean dropIfEmpty = false; CollectionFuture<Set<Object>> future = null; try { future = client.asyncSopGet(key, count, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Set<Object> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Set collection\uc5d0\uc11c count\uac1c\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. withDelete\uac12\uc774 true\uc774\uba74 \uc870\ud68c\ud55c \ub2e4\uc74c element\ub97c set collection\uc5d0\uc11c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 element\uac00 \uc0ad\uc81c\ub41c \ud6c4 set\uc774 \ube44\uc5b4\uc788\uac8c \ub418\uba74 key\ub97c \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc870\ud68c\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 \uc870\ud68c \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uad00\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 future.operationStatus().getResponse() \ub85c \ud655\uc778\uc774 \uac00\ub2a5\ud558\ub2e4. 5-6. Set Element \uc77c\uad04 \uc0bd\uc785 Set\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 set\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <Map<Integer, CollectionOperationStatus>> asyncSopPipedInsertBulk(String key, List<Object> valueList, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 set\uc758 key valueList: \uc0bd\uc785\ud560 element\ub4e4\uc758 value list attributesForCreate: \ub300\uc0c1 set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty set item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 set\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncSopInsertBulk(List<String> keyList, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 set\ub4e4\uc758 key list value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty set item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ud558\ub098\uc758 Set\uc5d0 \uc5ec\ub7ec element\ub97c bulk insert\ud558\uace0 \uac01\uac01\uc758 item\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:SetBulk\"; List<Object> bulkData = getBulkData(); CollectionAttributes attributesForCreate = new CollectionAttributes(); if (bulkData.size() > client.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 client.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = client.asyncSopPipedInsertBulk(key, bulkData, attributesForCreate); // (2) } catch (Exception e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { // (5) System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + bulkData.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); // (6) } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c Set\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate \uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index \uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert \uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 index\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. 5-7. Set Element \uc77c\uad04 \uc874\uc7ac\uc5ec\ubd80 \ud655\uc778 Set\uc5d0\uc11c \uc5ec\ub7ec element\uc758 \uc874\uc7ac\uc5ec\ubd80\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Object, Boolean>> asyncSopPipedExistBulk(String key, List<Object> values) key: \uc870\ud68c \ub300\uc0c1 set\uc758 key values: \uc874\uc7ac\uc720\ubb34\ub97c \ud655\uc778\ud560 value list \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.EXIST Element\uac00 \uc874\uc7ac\ud568 not null CollectionResponse.NOT_EXIST Element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) \uacb0\uacfc\ub85c \ubc18\ud658\ub41c result(Map\\<Object, Boolean>) \uac1d\uccb4\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 result \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() Object value getValue() Boolean value\uc758 \uc874\uc7ac \uc720\ubb34 \uc544\ub798 \ucf54\ub4dc\ub294 set\uc548\uc5d0 VALUE1\ubd80\ud130 VALUE4\uc758 \uc874\uc7ac\uc720\ubb34\ub97c \ud310\ub2e8\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. \uacb0\uacfc\ub294 Map\\<Object, Boolean> \ud615\ud0dc\uc774\uba70 \uacb0\uacfc\uac12\uc758 key\ub294 \uc874\uc7ac \uc720\ubb34\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud55c \uac12\uc774\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \uac12\uc774 \uc874\uc7ac\ud558\uba74 map\uc758 value\ub294 true\uac00 \ubc18\ud658\ub41c\ub2e4. String key = \"Sample:Set\"; List<Object> valueList = new ArrayList<Object>(); valueList.add(\"value1\"); valueList.add(\"value2\"); valueList.add(\"value3\"); valueList.add(\"value4\"); CollectionFuture<Boolean> future = null; try { future = client.asyncSopPipedExistBulk(key, valueList); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Object, Boolean> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) for(Entry<Object, Boolean> entry : result.entrySet()) { System.out.println(\"Object=\" + entry.getKey() + \", exists=\" + entry.getValue()); } CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Value list\uc5d0 \ud3ec\ud568\ub41c \uac12\ub4e4\uc774 set\uc5d0 \uac01\uac01 \uc874\uc7ac\ud558\ub294\uc9c0 \uc870\ud68c\ud55c\ub2e4. \uacb0\uacfc\ub294 Map\\<Object, Boolean>\ud615\ud0dc\ub85c \ubc18\ud658\ub41c\ub2e4. Map entry\uc758 key\ub294 \uc874\uc7ac\uc720\ubb34\ub97c \ud310\ub2e8\ud558\ub294 \uac12\uc774\uba70 Map entry\uc758 value\ub294 \uc874\uc7ac\uc720\ubb34\ub97c \ub098\ud0c0\ub0b4\ub294 boolean\uac12\uc774\ub2e4. (\uac12\uc774 \uc874\uc7ac\ud558\uba74 true) Bulk exists\uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc751\ub2f5\ucf54\ub4dc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"5. set API"},{"location":"arcus-java-client/5.-set-API/#5-1-set-item","text":"\uc0c8\ub85c\uc6b4 empty set item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncSopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 set\uc758 key valueType: set\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING ElementValueType.LONG ElementValueType.INTEGER ElementValueType.BOOLEAN ElementValueType.DATE ElementValueType.BYTE ElementValueType.FLOAT ElementValueType.DOUBLE ElementValueType.BYTEARRAY ElementValueType.OTHERS attributes: set item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key \uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 Set item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptySet\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); try { future = client.asyncSopCreate(key, ElementValueType.OTHERS, attribute); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Empty set\uc744 \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 set\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. \uc608\uc81c\uc5d0\uc11c\ub294 ElementValueType\uc744 \ud1b5\ud574 \uc9c0\uc815\ud560 \uc218 \uc788\ub294 \ud0c0\uc785\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty set\uc744 \uc0dd\uc131\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"5-1. Set Item \uc0dd\uc131"},{"location":"arcus-java-client/5.-set-API/#5-2-set-element","text":"Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Boolean> asyncSopInsert(String key, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 set\uc758 key value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty set item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Set collection\uc774 \uc874\uc7ac\ud558\uc5ec element \ub9cc \uc0bd\uc785\ub428 True CollectionResponse.CREATED_STORED Set collection\uc774 create\ub418\uace0 element\uac00 \uc0bd\uc785\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 set\uc774 \uc544\ub2d8 False CollectionResponse.OVERFLOWED Overflow \uc0c1\ud0dc\uc784 False CollectionResponse.ELEMENT_EXISTS \ub3d9\uc77c\ud55c \uac12\uc744 \uac00\uc9c4 element\uac00 set\uc5d0 \uc874\uc7ac\ud568 Set\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:Set\"; String value = \"This is a value.\"; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncSopInsert(key, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); // (3) System.out.println(future.getOperationStatus().getResponse()); // (4) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate \uc18d\uc131\uc744 \uac00\uc9c4 set\uc744 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc0bd\uc785\ud55c\ub2e4. \ub9cc\uc57d attributesForCreate\uac12\uc774 null\uc774\uace0 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 element\ub294 insert\ub418\uc9c0 \uc54a\ub294\ub2e4. \ud2b9\ubcc4\ud55c \uc124\uc815\uc744 \ud558\uc9c0 \uc54a\uc740 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70 \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. \ucc38\uace0\ub85c \uc774\ubbf8 key\uac00 \uc874\uc7ac\ud558\ub294 \uc0c1\ud0dc\uc5d0\uc11c value\ub97c \uc800\uc7a5\ud55c\ub2e4 \ud558\ub354\ub77c\ub3c4 key\uc5d0 \uc124\uc815\ub41c expire time\uc740 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub2e4\uc2dc \ub9d0\ud574 value\uac00 \ucd94\uac00\ub418\uc5b4\ub3c4 expire time\uc740 \ubcc0\uacbd\ub418\uac70\ub098 \uc5f0\uc7a5\ub418\uc9c0 \uc54a\ub294\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0bd\uc785\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0bd\uc785 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Set\uc740 \uac12\uc758 \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc911\ubcf5 \uac12\uc758 \uc720\ubb34\uc5d0 \ub530\ub77c \ubc18\ud658 \uac12\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ub2ec\ub77c\uc9c4\ub2e4. \uc0bd\uc785 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"5-2. Set Element \uc0bd\uc785"},{"location":"arcus-java-client/5.-set-API/#5-3-set-element","text":"Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Boolean> asyncSopDelete(String key, Object value, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 set\uc758 key value: \uc0ad\uc81c\ud560 element \uac12 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED Set\uc5d0\uc11c element\ub9cc \uc0ad\uc81c\ub428 True CollectionResponse.DELETED_DROPPED Set\uc5d0\uc11c element \uc0ad\uc81c \ud6c4, empty set\uc774 \ub418\uc5b4\uc11c \uadf8 set\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 False CollectionResponse.NOT_FOUND_ELEMENT Key\ub294 \uc788\uc9c0\ub9cc \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c Set\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Sample:Set\"; String value = \"This is a value.\"; boolean dropIfEmpty = false; CollectionFuture<Boolean> future = null; try { future = client.asyncSopDelete(key, value, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud55c \ud6c4 set\uc774 \ube44\uc5b4\uc788\uac8c \ub420 \ub54c key\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc815\uc0c1\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\uba74 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc790\uc138\ud55c \uc0ad\uc81c \uacb0\uacfc\ub294 future.operationStatus().getResponse() \ub85c \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.","title":"5-3. Set Element \uc0ad\uc81c"},{"location":"arcus-java-client/5.-set-API/#5-4-set-element","text":"Set\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 value\ub97c \uac00\uc9c4 element\uc758 \uc874\uc7ac\uc720\ubb34\ub97c \ud655\uc778\ud55c\ub2e4. CollectionFuture<Boolean> asyncSopExist(String key, Object value) key: \uc870\ud68c \ub300\uc0c1 set\uc758 key value: \uc874\uc7ac\uc720\ubb34\ub97c \ud655\uc778\ud560 value \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.EXIST Element\uac00 \uc874\uc7ac\ud568 True CollectionResponse.NOT_EXIST Element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 False CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) Set element\uc758 \uc874\uc7ac\uc5ec\ubd80\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:Set\"; String value = \"This is a value.\"; CollectionFuture<Boolean> future = null; try { future = client.asyncSopExist(key, value); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); // (2) CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c Set\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } else if (response.equals(CollectionResponse.NOT_EXIST)) { System.out.println(\"Key\ub294 \uc874\uc7ac\ud558\uc9c0\ub9cc Set\uc5d0 \uc694\uccad\ud55c \uac12\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Key\uc5d0 \uc800\uc7a5\ub41c set\uc5d0 value\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uac12\uc774 \uc874\uc7ac\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uad00\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 future.getOperationStatus().getResponse()\ub85c \ud655\uc778\uc774 \uac00\ub2a5\ud558\ub2e4.","title":"5-4. Set Element \uc874\uc7ac\uc720\ubb34 \ud655\uc778"},{"location":"arcus-java-client/5.-set-API/#5-5-set-element","text":"Set element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. \uc774 \ud568\uc218\ub294 \uc784\uc758\uc758 count \uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Set<Object>> asyncSopGet(String key, int count, boolean withDelete, boolean dropIfEmpty) key: \uc870\ud68c \ub300\uc0c1 set\uc758 key count: \uc870\ud68c\ud560 element \uac1c\uc218 withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc870\ud68c\ub9cc \ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c set\uc744 drop(delete)\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc784, set\uc774 \ube44\uc5b4\uc788\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) Set element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:Set\"; int count = 10; boolean withDelete = false; boolean dropIfEmpty = false; CollectionFuture<Set<Object>> future = null; try { future = client.asyncSopGet(key, count, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Set<Object> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Set collection\uc5d0\uc11c count\uac1c\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. withDelete\uac12\uc774 true\uc774\uba74 \uc870\ud68c\ud55c \ub2e4\uc74c element\ub97c set collection\uc5d0\uc11c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 \uc870\ud68c\uc640 \ub3d9\uc2dc\uc5d0 element\uac00 \uc0ad\uc81c\ub41c \ud6c4 set\uc774 \ube44\uc5b4\uc788\uac8c \ub418\uba74 key\ub97c \uc0ad\uc81c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc870\ud68c\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 \uc870\ud68c \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \uad00\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 future.operationStatus().getResponse() \ub85c \ud655\uc778\uc774 \uac00\ub2a5\ud558\ub2e4.","title":"5-5. Set Element \uc870\ud68c"},{"location":"arcus-java-client/5.-set-API/#5-6-set-element","text":"Set\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 set\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <Map<Integer, CollectionOperationStatus>> asyncSopPipedInsertBulk(String key, List<Object> valueList, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 set\uc758 key valueList: \uc0bd\uc785\ud560 element\ub4e4\uc758 value list attributesForCreate: \ub300\uc0c1 set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty set item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 set\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncSopInsertBulk(List<String> keyList, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 set\ub4e4\uc758 key list value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 set\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uc2dc\uc758 \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty set item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ud558\ub098\uc758 Set\uc5d0 \uc5ec\ub7ec element\ub97c bulk insert\ud558\uace0 \uac01\uac01\uc758 item\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:SetBulk\"; List<Object> bulkData = getBulkData(); CollectionAttributes attributesForCreate = new CollectionAttributes(); if (bulkData.size() > client.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 client.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = client.asyncSopPipedInsertBulk(key, bulkData, attributesForCreate); // (2) } catch (Exception e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { // (5) System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + bulkData.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); // (6) } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c Set\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate \uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index \uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert \uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 index\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4.","title":"5-6. Set Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-java-client/5.-set-API/#5-7-set-element","text":"Set\uc5d0\uc11c \uc5ec\ub7ec element\uc758 \uc874\uc7ac\uc5ec\ubd80\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Object, Boolean>> asyncSopPipedExistBulk(String key, List<Object> values) key: \uc870\ud68c \ub300\uc0c1 set\uc758 key values: \uc874\uc7ac\uc720\ubb34\ub97c \ud655\uc778\ud560 value list \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.EXIST Element\uac00 \uc874\uc7ac\ud568 not null CollectionResponse.NOT_EXIST Element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) \uacb0\uacfc\ub85c \ubc18\ud658\ub41c result(Map\\<Object, Boolean>) \uac1d\uccb4\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 result \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() Object value getValue() Boolean value\uc758 \uc874\uc7ac \uc720\ubb34 \uc544\ub798 \ucf54\ub4dc\ub294 set\uc548\uc5d0 VALUE1\ubd80\ud130 VALUE4\uc758 \uc874\uc7ac\uc720\ubb34\ub97c \ud310\ub2e8\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. \uacb0\uacfc\ub294 Map\\<Object, Boolean> \ud615\ud0dc\uc774\uba70 \uacb0\uacfc\uac12\uc758 key\ub294 \uc874\uc7ac \uc720\ubb34\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud55c \uac12\uc774\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \uac12\uc774 \uc874\uc7ac\ud558\uba74 map\uc758 value\ub294 true\uac00 \ubc18\ud658\ub41c\ub2e4. String key = \"Sample:Set\"; List<Object> valueList = new ArrayList<Object>(); valueList.add(\"value1\"); valueList.add(\"value2\"); valueList.add(\"value3\"); valueList.add(\"value4\"); CollectionFuture<Boolean> future = null; try { future = client.asyncSopPipedExistBulk(key, valueList); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Object, Boolean> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) for(Entry<Object, Boolean> entry : result.entrySet()) { System.out.println(\"Object=\" + entry.getKey() + \", exists=\" + entry.getValue()); } CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Value list\uc5d0 \ud3ec\ud568\ub41c \uac12\ub4e4\uc774 set\uc5d0 \uac01\uac01 \uc874\uc7ac\ud558\ub294\uc9c0 \uc870\ud68c\ud55c\ub2e4. \uacb0\uacfc\ub294 Map\\<Object, Boolean>\ud615\ud0dc\ub85c \ubc18\ud658\ub41c\ub2e4. Map entry\uc758 key\ub294 \uc874\uc7ac\uc720\ubb34\ub97c \ud310\ub2e8\ud558\ub294 \uac12\uc774\uba70 Map entry\uc758 value\ub294 \uc874\uc7ac\uc720\ubb34\ub97c \ub098\ud0c0\ub0b4\ub294 boolean\uac12\uc774\ub2e4. (\uac12\uc774 \uc874\uc7ac\ud558\uba74 true) Bulk exists\uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc751\ub2f5\ucf54\ub4dc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"5-7. Set Element \uc77c\uad04 \uc874\uc7ac\uc5ec\ubd80 \ud655\uc778"},{"location":"arcus-java-client/6.-map-API/","text":"Map item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 hash \uad6c\uc870 \uae30\ubc18\uc73c\ub85c mkey & value \uc30d\uc744 data \uc9d1\ud569\uc73c\ub85c \uac00\uc9c4\ub2e4. Map\uc744 Java\uc758 Map \uc790\ub8cc\ud615\uc744 \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\uc7a5\ud55c\ub2e4. \uc81c\uc57d \uc870\uac74 - \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218 : \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) - \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB - mkey\uc758 \uc785\ub825, Java map type\uc5d0\uc11c key\ub294 string type\ub9cc \uac00\ub2a5\ud558\ub2e4. mkey \ucd5c\ub300 \uae38\uc774\ub294 250 \ubc14\uc774\ud2b8 \uc774\uace0, \ud558\ub098\uc758 map\uc5d0 \uc911\ubcf5\ub41c mkey\ub294 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. 6-1. Map Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty map item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 map item\uc758 key valueType: map\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING ElementValueType.LONG ElementValueType.INTEGER ElementValueType.BOOLEAN ElementValueType.DATE ElementValueType.BYTE ElementValueType.FLOAT ElementValueType.DOUBLE ElementValueType.BYTEARRAY ElementValueType.OTHERS : for example, user defined class attributes: map item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 Map item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptyMap\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); // (1) attribute.setExpireTime(60); // (1) try { future = client.asyncMopCreate(key, ElementValueType.STRING, attribute); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (4) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Map\uc758 expire time\uc744 60\ucd08\ub85c \uc9c0\uc815\ud558\uc600\ub2e4. CollectionAttributes\uc758 \uc790\uc138\ud55c \uc0ac\uc6a9\ubc29\ubc95\uc740 Manual:Attribute_\uc0ac\uc6a9 \uc7a5\uc5d0\uc11c \uc790\uc138\ud788 \ub2e4\ub8ec\ub2e4. Empty map\uc744 \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 map\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub807\uac8c \ud574\uc57c \ud558\ub294 \uc774\uc720\ub294 Java client\uc5d0\uc11c value\ub97c encoding/decoding\ud558\ub294 \uba54\ucee4\ub2c8\uc998 \ub54c\ubb38\uc774\ub2e4. \uc704 \uc608\uc81c\ub294 String \ud0c0\uc785\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty map\uc744 \uc0dd\uc131\ud55c\ub2e4. \ub9cc\uc57d\uc5d0 empty map\uc744 \uc0dd\uc131\ud560 \ub54c \uc9c0\uc815\ud55c element type\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uac12\uc744 map\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uba74 \uc800\uc7a5\uc740 \uc131\uacf5\ud558\uaca0\uc9c0\ub9cc \uc870\ud68c\ud560 \ub54c \uc5c9\ub6b1\ud55c \uac12\uc774 \uc870\ud68c\ub41c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4. 6-2. Map Element \uc0bd\uc785 Map\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopInsert(String key, String mkey, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 map\uc758 key mkey: \uc0bd\uc785\ud560 element\uc758 mkey value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 map\uc774 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty map item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Map collection\uc774 \uc874\uc7ac\ud558\uc5ec element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED Map collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 map\uc774 \uc544\ub2d8 False CollectionResponse.ELEMENT_EXISTS \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 Map element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:MapKey\"; String mkey = \"mkey\"; String value = \"This is a value.\"; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncMopInsert(key, mkey, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 map\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate\uc18d\uc131\uc744 \uac00\uc9c4 map\uc744 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc800\uc7a5\ud55c\ub2e4. \ub9cc\uc57d key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud669\uc5d0\uc11c attributesForCreate\uac12\uc774 null\uc774\uba74 insert\uc5d0 \uc2e4\ud328\ud55c\ub2e4. \uc704 \uc608\uc81c\ub294 \ub514\ud3f4\ud2b8 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70, \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. Insert\uac00 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Insert\uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 future.getOperationStatus().getResponse()\ub97c \uc0ac\uc6a9\ud55c\ub2e4. 6-3. Map Element \ubcc0\uacbd Map\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. Element\uc758 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopUpdate(String key, String mkey, Object value) key: \ubcc0\uacbd \ub300\uc0c1 map\uc758 key mkey: \ubcc0\uacbd \ub300\uc0c1 element\uc758 mkey value: element\uc758 new value \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.UPDATED Element\uac00 \ubcc0\uacbd\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 map\uc774 \uc544\ub2d8 \ud2b9\uc815 element\uc758 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Boolean> future = mc.asyncMopUpdate(key, mkey, value); Element \uc218\uc815\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc218\ud589 \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 6-4. Map Element \uc0ad\uc81c Map\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud574\ub2f9 Map\uc758 \ubaa8\ub4e0 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopDelete(String key, boolean dropIfEmpty) \ub458\uc9f8, Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 mkey\uc758 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopDelete(String key, String mkey, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 map\uc758 key dropIfEmpty: element \uc0ad\uc81c\ub85c empty map\uc774 \ub418\uba74, \uadf8 map \uc790\uccb4\ub97c \uc0ad\uc81c\ud560 \uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED Element\ub9cc \uc0ad\uc81c\ud568 True CollectionResponse.DELETED_DROPPED Element \uc0ad\uc81c\ud558\uace0 Map \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 map\uc774 \uc544\ub2d8 \ub2e4\uc74c\uc740 map\uc5d0\uc11c mkey\uac00 mkey1\uc778 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Prefix:MapKey\"; String mkey1 = \"mkey1\"; boolean dropIfEmpty = true; CollectionFuture<Boolean> future = null; try { future = client.asyncMopDelete(key, mkey1, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Map\uc5d0\uc11c mkey1\uc5d0 \ud574\ub2f9\ud558\ub294 element \ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud558\uace0 map\uc774 \ube44\uc5b4\uc788\uac8c \ub418\uc5c8\uc744 \ub54c map\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4 \uc0ad\uc81c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4. 6-5. Map Element \uc870\ud68c Map element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc138 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud574\ub2f9 Map\uc758 \ubaa8\ub4e0 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, Object>> asyncMopGet(String key, boolean withDelete, boolean dropIfEmpty) \ub458\uc9f8, \ud574\ub2f9 Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 mkey \ud558\ub098\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, Object>> asyncMopGet(String key, String mkey, boolean withDelete, boolean dropIfEmpty) \uc14b\uc9f8, Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 mkeyList\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, Object>> asyncMopGet(String key, List<String> mkeyList, boolean withDelete, boolean dropIfEmpty) key: map item\uc758 key mkey: \uc870\ud68c\ud560 element\uc758 mkey mkeyList: \uc870\ud68c\ud560 element\uc758 mkeyLists withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c empty map\uc774 \ub418\uba74, \uadf8 map \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub9cc \uc870\ud68c not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c map\uc744 drop\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 map \uc601\uc5ed \uc5c6\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 map\uc774 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) Map element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:MapKey\"; List<String> mkeyList = new ArrayList<String>(); mkeyList.add(\"mkey1\"); mkeyList.add(\"mkey2\"); boolean withDelete = false; boolean dropIfEmpty = false; CollectionFuture<Map<String, Object>> future = null; try { future = client.asyncMopGet(key, mkeyList, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<String, Object> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c Map\uc774 \uc5c6\uc74c.\"); } else if (response.equals(CollectionResponse.NOT_FOUND_ELEMENT)) { System.out.println(\"Key\uc5d0 map\uc740 \uc874\uc7ac\ud558\uc9c0\ub9cc \uc800\uc7a5\ub41c \uac12 \uc911 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc5c6\uc74c.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } map\uc5d0\uc11c mkey1, mkey2\ub97c \ud55c\ubc88\uc5d0 \uc870\ud68c\ud558\uae30 \uc704\ud574 List\uc5d0 add\ud558\uace0 mkeyList\ub97c \uc870\ud68c\ud588\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubc18\ud658\ub418\ub294 Map \uc778\ud130\ud398\uc774\uc2a4\uc758 \uad6c\ud604\uccb4\ub294 HashMap\uc774\uba70, \uadf8 \uacb0\uacfc\ub294 \ub2e4\uc74c \uc911\uc758 \ud558\ub098\uc774\ub2e4. key \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c : null \ubc18\ud658 key \uc874\uc7ac\ud558\uc9c0\ub9cc \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc5c6\uc74c: empty map \ubc18\ud658 key \uc874\uc7ac\ud558\uace0 \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc788\uc74c: non-empty map \ubc18\ud658 \uc870\ud68c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\uc73c\ub85c \ud655\uc778\ud55c\ub2e4. 6-6. Map Element \uc77c\uad04 \uc0bd\uc785 Map\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 Map\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncMopPipedInsertBulk(String key, Map<String, Object> elements, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 map\uc758 key elements: \uc0bd\uc785\ud560 element\ub4e4 Map\\<String, Object> \uc720\ud615 attributesForCreate: \ub300\uc0c1 map\uc774 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty map item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 map\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncMopInsertBulk(List<String> keyList, String mkey, Object value, CollectionAttributes attributesForCreate) keyList: \uc0bd\uc785 \ub300\uc0c1 map\ub4e4\uc758 key list mkey: \uc0bd\uc785\ud560 element\uc758 mkey value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 map\uc774 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty map item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ud558\ub098\uc758 map\uc5d0 \uc5ec\ub7ec \uac1c\uc758 elements\uc744 bulk insert\ud558\uace0 \uac01\uac01\uc758 element\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:MapBulk\"; Map<String, Object> elements = new HashMap<String, Object>(); elements.put(\"mkey1\", \"value1\"); elements.put(\"mkey2\", \"value2\"); elements.put(\"mkey3\", \"value3\"); boolean createKeyIfNotExists = true; if (elements.size() > mc.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 mc.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = mc.asyncMopPipedInsertBulk(key, elements, new CollectionAttributes()); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Map.Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + elements.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c map\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate\uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index\uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert\uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 mapKey\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. 6-7. Map Element \uc77c\uad04 \ubcc0\uacbd Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 elements\uc5d0 \ud574\ub2f9\ud558\ub294 \ubaa8\ub4e0 element\uc758 value\ub97c \uc77c\uad04 \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncMopPipedUpdateBulk(String key, Map<String, Object>> elements) key: \ubcc0\uacbd \ub300\uc0c1 map\uc758 key elements: \ubcc0\uacbd \ub300\uc0c1 map\uc5d0 \ub300\ud574 mkey, new value\ub97c \uac00\uc9c4\ub2e4.","title":"6. map API"},{"location":"arcus-java-client/6.-map-API/#6-1-map-item","text":"\uc0c8\ub85c\uc6b4 empty map item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 map item\uc758 key valueType: map\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING ElementValueType.LONG ElementValueType.INTEGER ElementValueType.BOOLEAN ElementValueType.DATE ElementValueType.BYTE ElementValueType.FLOAT ElementValueType.DOUBLE ElementValueType.BYTEARRAY ElementValueType.OTHERS : for example, user defined class attributes: map item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 Map item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptyMap\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); // (1) attribute.setExpireTime(60); // (1) try { future = client.asyncMopCreate(key, ElementValueType.STRING, attribute); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (4) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Map\uc758 expire time\uc744 60\ucd08\ub85c \uc9c0\uc815\ud558\uc600\ub2e4. CollectionAttributes\uc758 \uc790\uc138\ud55c \uc0ac\uc6a9\ubc29\ubc95\uc740 Manual:Attribute_\uc0ac\uc6a9 \uc7a5\uc5d0\uc11c \uc790\uc138\ud788 \ub2e4\ub8ec\ub2e4. Empty map\uc744 \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 map\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub807\uac8c \ud574\uc57c \ud558\ub294 \uc774\uc720\ub294 Java client\uc5d0\uc11c value\ub97c encoding/decoding\ud558\ub294 \uba54\ucee4\ub2c8\uc998 \ub54c\ubb38\uc774\ub2e4. \uc704 \uc608\uc81c\ub294 String \ud0c0\uc785\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty map\uc744 \uc0dd\uc131\ud55c\ub2e4. \ub9cc\uc57d\uc5d0 empty map\uc744 \uc0dd\uc131\ud560 \ub54c \uc9c0\uc815\ud55c element type\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uac12\uc744 map\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uba74 \uc800\uc7a5\uc740 \uc131\uacf5\ud558\uaca0\uc9c0\ub9cc \uc870\ud68c\ud560 \ub54c \uc5c9\ub6b1\ud55c \uac12\uc774 \uc870\ud68c\ub41c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4.","title":"6-1. Map Item \uc0dd\uc131"},{"location":"arcus-java-client/6.-map-API/#6-2-map-element","text":"Map\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopInsert(String key, String mkey, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 map\uc758 key mkey: \uc0bd\uc785\ud560 element\uc758 mkey value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 map\uc774 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty map item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Map collection\uc774 \uc874\uc7ac\ud558\uc5ec element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED Map collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 map\uc774 \uc544\ub2d8 False CollectionResponse.ELEMENT_EXISTS \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 Map element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:MapKey\"; String mkey = \"mkey\"; String value = \"This is a value.\"; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncMopInsert(key, mkey, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 map\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate\uc18d\uc131\uc744 \uac00\uc9c4 map\uc744 \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc800\uc7a5\ud55c\ub2e4. \ub9cc\uc57d key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud669\uc5d0\uc11c attributesForCreate\uac12\uc774 null\uc774\uba74 insert\uc5d0 \uc2e4\ud328\ud55c\ub2e4. \uc704 \uc608\uc81c\ub294 \ub514\ud3f4\ud2b8 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70, \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. Insert\uac00 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Insert\uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 future.getOperationStatus().getResponse()\ub97c \uc0ac\uc6a9\ud55c\ub2e4.","title":"6-2. Map Element \uc0bd\uc785"},{"location":"arcus-java-client/6.-map-API/#6-3-map-element","text":"Map\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. Element\uc758 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopUpdate(String key, String mkey, Object value) key: \ubcc0\uacbd \ub300\uc0c1 map\uc758 key mkey: \ubcc0\uacbd \ub300\uc0c1 element\uc758 mkey value: element\uc758 new value \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.UPDATED Element\uac00 \ubcc0\uacbd\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 map\uc774 \uc544\ub2d8 \ud2b9\uc815 element\uc758 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Boolean> future = mc.asyncMopUpdate(key, mkey, value); Element \uc218\uc815\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc218\ud589 \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"6-3. Map Element \ubcc0\uacbd"},{"location":"arcus-java-client/6.-map-API/#6-4-map-element","text":"Map\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ub450 \uac00\uc9c0\uac00 \uc788\ub2e4. \uccab\uc9f8, \ud574\ub2f9 Map\uc758 \ubaa8\ub4e0 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopDelete(String key, boolean dropIfEmpty) \ub458\uc9f8, Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 mkey\uc758 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncMopDelete(String key, String mkey, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 map\uc758 key dropIfEmpty: element \uc0ad\uc81c\ub85c empty map\uc774 \ub418\uba74, \uadf8 map \uc790\uccb4\ub97c \uc0ad\uc81c\ud560 \uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED Element\ub9cc \uc0ad\uc81c\ud568 True CollectionResponse.DELETED_DROPPED Element \uc0ad\uc81c\ud558\uace0 Map \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 mkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 map\uc774 \uc544\ub2d8 \ub2e4\uc74c\uc740 map\uc5d0\uc11c mkey\uac00 mkey1\uc778 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Prefix:MapKey\"; String mkey1 = \"mkey1\"; boolean dropIfEmpty = true; CollectionFuture<Boolean> future = null; try { future = client.asyncMopDelete(key, mkey1, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Map\uc5d0\uc11c mkey1\uc5d0 \ud574\ub2f9\ud558\ub294 element \ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud558\uace0 map\uc774 \ube44\uc5b4\uc788\uac8c \ub418\uc5c8\uc744 \ub54c map\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4 \uc0ad\uc81c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4.","title":"6-4. Map Element \uc0ad\uc81c"},{"location":"arcus-java-client/6.-map-API/#6-5-map-element","text":"Map element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc138 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud574\ub2f9 Map\uc758 \ubaa8\ub4e0 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, Object>> asyncMopGet(String key, boolean withDelete, boolean dropIfEmpty) \ub458\uc9f8, \ud574\ub2f9 Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 mkey \ud558\ub098\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, Object>> asyncMopGet(String key, String mkey, boolean withDelete, boolean dropIfEmpty) \uc14b\uc9f8, Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 mkeyList\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, Object>> asyncMopGet(String key, List<String> mkeyList, boolean withDelete, boolean dropIfEmpty) key: map item\uc758 key mkey: \uc870\ud68c\ud560 element\uc758 mkey mkeyList: \uc870\ud68c\ud560 element\uc758 mkeyLists withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c empty map\uc774 \ub418\uba74, \uadf8 map \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub9cc \uc870\ud68c not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c map\uc744 drop\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 map \uc601\uc5ed \uc5c6\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 map\uc774 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) Map element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:MapKey\"; List<String> mkeyList = new ArrayList<String>(); mkeyList.add(\"mkey1\"); mkeyList.add(\"mkey2\"); boolean withDelete = false; boolean dropIfEmpty = false; CollectionFuture<Map<String, Object>> future = null; try { future = client.asyncMopGet(key, mkeyList, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<String, Object> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c Map\uc774 \uc5c6\uc74c.\"); } else if (response.equals(CollectionResponse.NOT_FOUND_ELEMENT)) { System.out.println(\"Key\uc5d0 map\uc740 \uc874\uc7ac\ud558\uc9c0\ub9cc \uc800\uc7a5\ub41c \uac12 \uc911 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc5c6\uc74c.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } map\uc5d0\uc11c mkey1, mkey2\ub97c \ud55c\ubc88\uc5d0 \uc870\ud68c\ud558\uae30 \uc704\ud574 List\uc5d0 add\ud558\uace0 mkeyList\ub97c \uc870\ud68c\ud588\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubc18\ud658\ub418\ub294 Map \uc778\ud130\ud398\uc774\uc2a4\uc758 \uad6c\ud604\uccb4\ub294 HashMap\uc774\uba70, \uadf8 \uacb0\uacfc\ub294 \ub2e4\uc74c \uc911\uc758 \ud558\ub098\uc774\ub2e4. key \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c : null \ubc18\ud658 key \uc874\uc7ac\ud558\uc9c0\ub9cc \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc5c6\uc74c: empty map \ubc18\ud658 key \uc874\uc7ac\ud558\uace0 \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc788\uc74c: non-empty map \ubc18\ud658 \uc870\ud68c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\uc73c\ub85c \ud655\uc778\ud55c\ub2e4.","title":"6-5. Map Element \uc870\ud68c"},{"location":"arcus-java-client/6.-map-API/#6-6-map-element","text":"Map\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 Map\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncMopPipedInsertBulk(String key, Map<String, Object> elements, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 map\uc758 key elements: \uc0bd\uc785\ud560 element\ub4e4 Map\\<String, Object> \uc720\ud615 attributesForCreate: \ub300\uc0c1 map\uc774 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty map item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 map\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncMopInsertBulk(List<String> keyList, String mkey, Object value, CollectionAttributes attributesForCreate) keyList: \uc0bd\uc785 \ub300\uc0c1 map\ub4e4\uc758 key list mkey: \uc0bd\uc785\ud560 element\uc758 mkey value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 map\uc774 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty map item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ud558\ub098\uc758 map\uc5d0 \uc5ec\ub7ec \uac1c\uc758 elements\uc744 bulk insert\ud558\uace0 \uac01\uac01\uc758 element\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:MapBulk\"; Map<String, Object> elements = new HashMap<String, Object>(); elements.put(\"mkey1\", \"value1\"); elements.put(\"mkey2\", \"value2\"); elements.put(\"mkey3\", \"value3\"); boolean createKeyIfNotExists = true; if (elements.size() > mc.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 mc.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = mc.asyncMopPipedInsertBulk(key, elements, new CollectionAttributes()); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Map.Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + elements.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c map\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate\uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index\uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert\uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 mapKey\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4.","title":"6-6. Map Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-java-client/6.-map-API/#6-7-map-element","text":"Map\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 elements\uc5d0 \ud574\ub2f9\ud558\ub294 \ubaa8\ub4e0 element\uc758 value\ub97c \uc77c\uad04 \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncMopPipedUpdateBulk(String key, Map<String, Object>> elements) key: \ubcc0\uacbd \ub300\uc0c1 map\uc758 key elements: \ubcc0\uacbd \ub300\uc0c1 map\uc5d0 \ub300\ud574 mkey, new value\ub97c \uac00\uc9c4\ub2e4.","title":"6-7. Map Element \uc77c\uad04 \ubcc0\uacbd"},{"location":"arcus-java-client/7.-btree-API/","text":"B+tree item\uc740 \ud558\ub098\uc758 key\uc5d0 \ub300\ud574 b+tree \uad6c\uc870 \uae30\ubc18\uc73c\ub85c b+tree key(bkey)\ub85c \uc815\ub82c\ub41c data\uc758 \uc9d1\ud569\uc744 \uac00\uc9c4\ub2e4. \uc81c\uc57d \uc870\uac74 \uc800\uc7a5 \uac00\ub2a5\ud55c \ucd5c\ub300 element \uac1c\uc218 : \ub514\ud3f4\ud2b8 4,000\uac1c (attribute \uc124\uc815\uc73c\ub85c \ucd5c\ub300 50,000\uac1c \ud655\uc7a5 \uac00\ub2a5) \uac01 element\uc5d0\uc11c value \ucd5c\ub300 \ud06c\uae30 : 4KB \ud558\ub098\uc758 b+tree \ub0b4\uc5d0\uc11c \ubaa8\ub4e0 element\ub294 \ub3d9\uc77c\ud55c bkey \uc720\ud615\uc744 \uac00\uc838\uc57c \ud55c\ub2e4. \uc989, long bkey \uc720\ud615\uacfc byte array bkey \uc720\ud615\uc774 \ud63c\uc7ac\ud560 \uc218 \uc5c6\ub2e4. B+tree item \uad6c\uc870\uc640 \uae30\ubcf8 \ud2b9\uc9d5\uc740 Arcus Server Ascii Protocol \ubb38\uc11c\uc758 \ub0b4\uc6a9 \uc744 \uba3c\uc800 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. 7-1. BKey(B+Tree Key)\uc640 EFlag(Element Flag) B+tree item\uc5d0\uc11c \uc0ac\uc6a9\uac00\ub2a5\ud55c bkey \ub370\uc774\ud130 \ud0c0\uc785\uc740 \uc544\ub798 \ub450 \uac00\uc9c0\uc774\ub2e4. long \ud0c0\uc785 byte[1~31] \ud0c0\uc785 : byte array\ud06c\uae30\uac00 1\ubd80\ud130 31\uae4c\uc9c0 \uc5b4\ub290 \uac83\uc744 \uc0ac\uc6a9\ud574\ub3c4 \ub41c\ub2e4. byte array \ud0c0\uc785\uc758 bkey\ub97c \ub9cc\ub4dc\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \ub9cc\uc57d, byte array\uc758 \ud06c\uae30\uac00 31\uc744 \ucd08\uacfc\ud558\uba74 IllegalArgumentException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. // Bkey\ub85c 0x00000001\uc744 \uc0ac\uc6a9\ud55c\ub2e4. byte[] bkey = new byte[] { 0, 0, 0, 1 } eflag\ub294 \ud604\uc7ac b+tree element\uc5d0\ub9cc \uc874\uc7ac\ud558\ub294 \ud544\ub4dc\uc774\ub2e4. eflag \ub370\uc774\ud130 \ud0c0\uc785\uc740 byte[1~31] \ud0c0\uc785\ub9cc \uac00\ub2a5\ud558\uba70, bkey\uc758 byte array \uc0ac\uc6a9 \ubc29\uc2dd\uacfc \ub3d9\uc77c\ud558\ub2e4. Element Flag Filter \uac1d\uccb4 Element\ub97c \uc870\ud68c, \uc218\uc815, \uc0ad\uc81c \uc2dc\uc5d0 eflag(element flag)\uc5d0 \ub300\ud55c filter \uc870\uac74\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. eflag filter \uc870\uac74\uc740 \uc544\ub798\uc640 \uac19\uc774 \ud45c\ud604\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c, eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc744 compare \uac12 \uacfc compare \uc5f0\uc0b0 \uc744 \uc218\ud589\ud55c\ub2e4. compare \uac12 \uc740 eflag \uac12\uc5d0 \ub300\ud574 compare \uc5f0\uc0b0\uc744 \ucde8\ud55c operand\ub85c eflag filter\uc5d0 \uba85\uc2dc\ub41c\ub2e4. \uc120\ud0dd\uc801\uc73c\ub85c, compare \uc5f0\uc0b0\uc758 \uc218\ud589 \uc804\uc5d0 eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc5d0 \ub300\ud574 bitwise \uac12 \uc73c\ub85c bitwise \uc5f0\uc0b0 \uc744 \uba3c\uc800 \ucde8\ud560 \uc218 \uc788\ub2e4. bitwise \uac12 \uc740 eflag \uac12\uc5d0 \ub300\ud574 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c operand\ub85c eflag filter\uc5d0 \uba85\uc2dc\ub41c\ub2e4. \ud604\uc7ac, bitwise \uac12\uc758 \uae38\uc774\ub294 compare \uac12\uc758 \uae38\uc774\uc640 \ub3d9\uc77c\ud574\uc57c \ud558\ub294 \uc81c\uc57d\uc774 \uc788\ub2e4. eflag filter \uc870\uac74\uc5d0\uc11c compare/bitwise \uc5f0\uc0b0\uc774 \uc218\ud589\ub420 eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc740 \uc544\ub798\uc640 \uac19\uc774 \uc120\ud0dd\ud55c\ub2e4. eflag \uc804\uccb4 \uac12\uc5d0\uc11c compare \uc5f0\uc0b0\uc758 \ub300\uc0c1 \uac12\uc740 compare offset \uacfc compare length \ub85c \uc9c0\uc815\ud55c\ub2e4. compare offset \uc740 \ub514\ud3f4\ud2b8\ub85c 0\uc744 \uac00\uc9c0\uba70, eflag filter\uc5d0\uc11c \uc218\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. compare length \ub294 eflag filter\uc5d0 \uba85\uc2dc\ub41c compare \uac12 \uc758 \uae38\uc774\ub85c \uc790\ub3d9 \uc124\uc815\ub41c\ub2e4. eflag \uc804\uccb4 \uac12\uc5d0\uc11c bitwise \uc5f0\uc0b0\uc758 \ub300\uc0c1 \uac12\uc740 bitwise offset \uacfc bitwise length \ub85c \uc9c0\uc815\ud55c\ub2e4. bitwise offset \uc740 \ub530\ub85c \uc9c0\uc815\ud558\uc9c0 \uc54a\uace0, compare offset \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4. bitwise length \ub294 eflag filter\uc5d0 \uba85\uc2dc\ub41c bitwise \uac12 \uc758 \uae38\uc774\ub85c \uc790\ub3d9 \uc124\uc815\ub41c\ub2e4. \uc81c\uacf5\ud558\ub294 compare \uc5f0\uc0b0\uc790\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. compare \uc5f0\uc0b0\uc790 \uc124\uba85 ElementFlagFilter.CompOperands.Equal \uc77c\uce58 ElementFlagFilter.CompOperands.NotEqual \uc77c\uce58\ud558\uc9c0 \uc54a\uc74c ElementFlagFilter.CompOperands.LessThan \uc791\uc740 \uac83 ElementFlagFilter.CompOperands.LessOrEqual \uc791\uac70\ub098 \uac19\uc740 \uac83 ElementFlagFilter.CompOperands.GreaterThan \ud070 \uac83 ElementFlagFilter.CompOperands.GreaterOrEqual \ud06c\uac70\ub098 \uac19\uc740 \uac83 \uc81c\uacf5\ud558\ub294 bitwise \uc5f0\uc0b0\uc790\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. compare \uc5f0\uc0b0\uc790 \uc124\uba85 ElementFlagFilter.BitwiseOperands.AND AND \uc5f0\uc0b0 ElementFlagFilter.BitwiseOperands.OR OR \uc5f0\uc0b0 ElementFlagFilter.BitwiseOperands.XOR XOR \uc5f0\uc0b0 ElementFlagFilter \uba54\uc18c\ub4dc ElementFlagFilter \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. compare \uc5f0\uc0b0\uc790\uc640 compare \uac12\ub9cc\uc744 \uc9c0\uc815\ud558\uc5ec ElementFlagFilter \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. compare offset\ub294 \ub514\ud3f4\ud2b8\ub85c 0\uc744 \uac12\uc73c\ub85c \uac00\uc9c0\uba74, bitwise \uc5f0\uc0b0\uc758 \uc124\uc815\uc740 \uc5c6\ub294 \uc0c1\ud0dc\uac00 \ub41c\ub2e4. ElementFlagFilter(CompOperands compOperand, byte[] compValue) ElementFlagFilter \uac1d\uccb4\uc758 compare offset\uc744 \ubcc0\uacbd\ud558\uac70\ub098 bitwise \uc5f0\uc0b0 \uc124\uc815\uc744 \ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc544\ub798 \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. ElementFlagFilter setCompareOffset(int offset) ElementFlagFilter setBitOperand(BitWiseOperands bitOp, byte[] bitCompValue) ElementFlagFilter \uc0ac\uc6a9 \uc608\uc81c \uccab\uc9f8 \uc608\ub294 b+tree\uc5d0 \uc800\uc7a5\ub41c \uc804\uccb4 element\ub4e4\uc5d0\uc11c eflag \uac12\uc774 0x0102\uc640 \uc77c\uce58\ud558\ub294 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. ElementFlagFilter filter = new ElementFlagFilter(CompOperands.Equal, new byte[] { 1, 2 }); // (1) CollectionFuture<Integer> future = mc.asyncBopGetItemCount(KEY, MIN_BKEY, MAX_BKEY, filter); Integer count = future.get(); Eflag\uac00 0x0102\uc640 \uc77c\uce58 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\ub294 filter\ub97c \uc0dd\uc131\ud55c\ub2e4. compare offset\uc740 0\uc774 \ub418\uace0, compare length\ub294 2\uac00 \ub41c\ub2e4. \ub458\uc9f8 \uc608\ub294 b+tree\uc758 \ubaa8\ub4e0 element\ub4e4\uc5d0\uc11c eflag\uc758 \ub450 \ubc88\uc9f8 \ubc14\uc774\ud2b8\ub97c 0x01\uacfc AND \uc5f0\uc0b0\ud55c \uacb0\uacfc\uac00 0x01\uc778 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. ElementFlagFilter filter = new ElementFlagFilter(CompOperands.Equal, new byte[] { 1 }); // (1) filter.setBitOperand(BitWiseOperands.AND, new byte[] { 1 }); // (2) filter.setCompareOffset(1); // (3) CollectionFuture<Integer> future = mc.asyncBopGetItemCount(KEY, MIN_BKEY, MAX_BKEY, filter); Integer count = future.get(); Eflag\uac00 0x01\uc640 \uc77c\uce58 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\ub294 filter\ub97c \uc0dd\uc131\ud55c\ub2e4. Eflag\uc5d0 \ub300\ud55c compare \uc5f0\uc0b0 \uc218\ud589 \uc804\uc5d0 0x01\uacfc bitwise AND \uc5f0\uc0b0\ud558\uae30 \uc704\ud574 \uc124\uc815\ud55c\ub2e4. Eflag\uc758 \ub450 \ubc88\uc9f8 \ubc14\uc774\ud2b8\ubd80\ud130 filtering\ud558\uae30 \uc704\ud574 \uc124\uc815\ud55c\ub2e4. \ucc38\uace0\ub85c, \uc870\ud68c \uc870\uac74\uc5d0 filter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\ub824\uba74 filter \uac12\uc73c\ub85c ElementFlagFilter.DO_NOT_FILTER\ub97c \uc9c0\uc815\ud558\uba74 \ub41c\ub2e4. \uc14b\uc9f8 \uc608\ub294 b+tree\uc5d0\uc11c eflag\uac00 \uc124\uc815\ub418\uc9c0 \uc54a\uc740 \ubaa8\ub4e0 element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. Eflag\uac00 \uc9c0\uc815\ub418\uc9c0 \uc54a\uc740 element\ub97c \uc870\ud68c\ud558\ub824\uba74 eflag\uc758 \uccab \ubc88\uc9f8 \ud55c \ubc14\uc774\ud2b8\ub97c 0x00\uacfc bitwise AND\uc5f0\uc0b0\uc744 \ucde8\ud558\uace0 \uadf8 \uacb0\uacfc\uac00 0x00\uc774 \uc544\ub2cc element\ub97c \ucc3e\uc73c\uba74 \ub41c\ub2e4. eflag\ub97c \uac00\uc9c4 element\ub77c\uba74 \uccab \ubc88\uc7ac \ud55c \ubc14\uc774\ud2b8\ub97c 0x00\uacfc bitwise AND \uc5f0\uc0b0\uc744 \ucde8\ud588\uc744 \ub54c \ubb34\uc870\uac74 0x00\uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 bitwise\uc5f0\uc0b0 \uacb0\uacfc\uac00 0x00\uc774 \uc544\ub2cc \uac83\uc744 \uc870\ud68c\ud558\uba74 eflag\ub97c \uac16\uc9c0 \uc54a\uc740 element\ub97c \uc870\ud68c\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. ElementFlagFilter filter = new ElementFlagFilter(CompOperands.NotEqual, new byte[] { 0 }); // (1) filter.setBitOperand(BitWiseOperands.AND, new byte[] { 0 }); // (2) Map<Long, Object> map = mc.asyncBopGet(KEY, BKEY, BKEY + 100, 0, 100, false, false, filter).get(); // (3) Eflag\uac00 0x00\uc774 \uc544\ub2cc \uac83\ub4e4\uc744 \uc870\ud68c\ud558\ub294 filter\ub97c \uc0dd\uc131\ud55c\ub2e4. Filter\uac00 \ube44\uad50\ud560 eflag\ub294 element\uc5d0 \uc124\uc815\ub41c eflag\uc640 0x00\ub97c bitwise AND\uc5f0\uc0b0\ud55c \uac83\uc744 \uc0ac\uc6a9\ud55c\ub2e4. 1\uacfc 2\uc5d0\uc11c \uc0dd\uc131\ud55c filter\ub97c \uc0ac\uc6a9\ud558\uba74 eflag\uac00 \uc124\uc815\ub418\uc9c0 \uc54a\uc740 element\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. ElementMultiFlagsFilter Eflag\uc5d0 \ub300\ud574 \uc544\ub798\uc640 \uac19\uc740 IN \uc5f0\uc0b0\uacfc NOT IN \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c filter\uc774\ub2e4. IN \uc5f0\uc0b0 : eflag \uac12\uc774 \uc5ec\ub7ec compare values \uc911 \ud558\ub098\uc640 \ub3d9\uc77c\ud55c \uc9c0\ub97c \uac80\uc0ac NOT IN \uc5f0\uc0b0 : eflags \uac12\uc774 \uc5ec\ub7ec compare values\uc640 \ubaa8\ub450 \ub2e4\ub978 \uc9c0\ub97c \uac80\uc0ac ElementMultiFlagsFilter\ub294 \uc5ec\ub7ec compare value\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uace0, \uc544\ub798 \ub450 \uac1c\uc758 compare \uc5f0\uc0b0\uc790\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - ElementFlagFilter.CompOperands.Equal - ElementFlagFilter.CompOperands.NotEqual ElementMultiFlagsFilter \uc0ac\uc6a9 \uc608\ub85c, \uc544\ub798\ub294 b+tree\uc758 \uc804\uccb4 element\ub4e4 \uc911\uc5d0 eflag\uc758 \uac12\uc774 0x0102 \ub610\ub294 0x0104\uc5d0 \uc77c\uce58\ud558\ub294 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. \uc989, IN \uc5f0\uc0b0\uc758 filtering\uc744 \uc218\ud589\ud55c\ub2e4. mentMultiFlagsFilter filter = new ElementMultiFlagsFilter(CompOperands.Equal); // (1) filter.addCompValue(new byte[] { 1, 2 }); // (2) filter.addCompValue(new byte[] { 1, 4 }); // (3) CollectionFuture<Integer> future = mc.asyncBopGetItemCount(KEY, MIN_BKEY, MAX_BKEY, filter); Integer count = future.get(); filter\ub97c \uc0dd\uc131\ud55c\ub2e4. \uc77c\uce58 \uc5ec\ubd80 \ud310\ub2e8\uc744 \uc704\ud55c \uac12 0x0102 \ub4f1\ub85d \uc77c\uce58 \uc5ec\ubd80 \ud310\ub2e8\uc744 \uc704\ud55c \uac12 0x0104 \ub4f1\ub85d ElementMultiFlagsFilter\ub85c \ucd5c\ub300 100\uac1c compare value\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc73c\uba70, asyncBopGet, asyncBopCount, asyncBopDelete, asyncBopSortMergeGet \uc5d0\uc11c\ub9cc \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4. Element Flag Update \uac1d\uccb4 Eflag\uc758 \uc804\uccb4 \ub610\ub294 \ubd80\ubd84 \uac12\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \uc774\ub97c \uc704\ud55c ElementFlagUpdate \uc0dd\uc131\uc790 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ElementFlagUpdate(byte[] elementFlag) Eflag\uc758 \uc804\uccb4 \uac12\uc744 \uc0c8\ub85c\uc6b4 elementFlag\ub85c \uad50\uccb4\ud55c\ub2e4. ElementFlagUpdate(int elementFlagOffset, BitWiseOperands bitOp, byte[] elementFlag) Eflag\uc758 \ubd80\ubd84 \uac12\uc744 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c \uacb0\uacfc\ub85c \uad50\uccb4\ud55c\ub2e4. Eflag\uc5d0\uc11c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 \ubd80\ubd84 \uac12\uc758 offset\uacfc length\ub294 \uac01\uac01 elementFlagOffset\uacfc elementFlag \uac12\uc758 \uae38\uc774\ub85c \uacb0\uc815\ub41c\ub2e4. Eflag \uc804\uccb4 \uac12\uc744 \uad50\uccb4\ud558\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. byte[] flag = new byte[] { 1, 0, 1, 0 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null); Eflag \ubd80\ubd84 \uac12\uc744 \uad50\uccb4\ud558\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. int eFlagOffset = 1; BitWiseOperands bitOp = BitWiseOperands.AND; byte[] flag = new byte[] { 1 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(eFlagOffset, bitOp, flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null); 7-2. B+Tree Item \uc0dd\uc131 \uc0c8\ub85c\uc6b4 empty b+tree item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 b+tree item\uc758 key valueType: b+tree\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING ElementValueType.LONG ElementValueType.INTEGER ElementValueType.BOOLEAN ElementValueType.DATE ElementValueType.BYTE ElementValueType.FLOAT ElementValueType.DOUBLE ElementValueType.BYTEARRAY ElementValueType.OTHERS : for example, user defined class attributes: b+tree item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 B+tree item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptyBTree\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); // (1) attribute.setExpireTime(60); // (1) try { future = client.asyncBopCreate(key, ElementValueType.STRING, attribute); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (4) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } B+tree\uc758 expire time\uc744 60\ucd08\ub85c \uc9c0\uc815\ud558\uc600\ub2e4. CollectionAttributes\uc758 \uc790\uc138\ud55c \uc0ac\uc6a9\ubc29\ubc95\uc740 [[Manual:Java_Client/Attribute_\uc0ac\uc6a9|Attribute_\uc0ac\uc6a9]] \uc7a5\uc5d0\uc11c \uc790\uc138\ud788 \ub2e4\ub8ec\ub2e4. Empty b+tree\ub97c \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 b+tree\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub807\uac8c \ud574\uc57c \ud558\ub294 \uc774\uc720\ub294 Java client\uc5d0\uc11c value\ub97c encoding/decoding\ud558\ub294 \uba54\ucee4\ub2c8\uc998 \ub54c\ubb38\uc774\ub2e4. \uc704 \uc608\uc81c\ub294 String \ud0c0\uc785\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty b+tree\ub97c \uc0dd\uc131\ud55c\ub2e4. \ub9cc\uc57d\uc5d0 empty b+tree\ub97c \uc0dd\uc131\ud560 \ub54c \uc9c0\uc815\ud55c element type\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uac12\uc744 b+tree\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uba74 \uc800\uc7a5\uc740 \uc131\uacf5\ud558\uaca0\uc9c0\ub9cc \uc870\ud68c\ud560 \ub54c \uc5c9\ub6b1\ud55c \uac12\uc774 \uc870\ud68c\ub41c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4. 7-3. B+Tree Element \uc0bd\uc785 B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. \uc804\uc790\ub294 long \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopInsert(String key, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) CollectionFuture<Boolean> asyncBopInsert(String key, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 b+tree\uc758 key bkey: \uc0bd\uc785\ud560 element\uc758 bkey(b+tree key) eflag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag), that is optional. value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED B+tree collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.ELEMENT_EXISTS \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 False CollectionResponse.OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 bkey\uac00 b+tree trimmed \uc601\uc5ed\uc5d0 \ud574\ub2f9\ub428 B+tree element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTreeKey\"; long bkey = 1L; String value = \"This is a value.\"; byte[] eflag = new byte[] { 1, 1, 1, 1 }; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncBopInsert(key, bkey, eflag, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 b+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate\uc18d\uc131\uc744 \uac00\uc9c4 b+tree\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc800\uc7a5\ud55c\ub2e4. \ub9cc\uc57d key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud669\uc5d0\uc11c attributesForCreate\uac12\uc774 null\uc774\uba74 insert\uc5d0 \uc2e4\ud328\ud55c\ub2e4. \uc704 \uc608\uc81c\ub294 \ub514\ud3f4\ud2b8 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70, \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. Insert\uac00 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Insert\uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 future.getOperationStatus().getResponse()\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc544\ucee4\uc2a4\uc5d0\uc11c B+tree\ub294 \uac00\uc9c8 \uc218 \uc788\ub294 \ucd5c\ub300 \uc5d8\ub9ac\uba3c\ud2b8 \uac1c\uc218\uac00 \uc81c\ud55c\ub418\uc5b4 \uc788\ub2e4. \uc774 \uc81c\ud55c \ubc94\uc704 \uc548\uc5d0\uc11c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 B+tree \ud06c\uae30\ub97c \uc9c0\uc815\ud560 \uc218\ub3c4 \uc788\ub294\ub370(maxcount), \uc774\ub7ec\ud55c \uc81c\uc57d\uc870\uac74 \ub54c\ubb38\uc5d0 \uac00\ub4dd \ucc2c B+tree\uc5d0 \uc0c8\ub85c\uc6b4 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825\ud558\uba74 \uc124\uc815\uc5d0 \ub530\ub77c \uae30\uc874\uc758 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c \uc554\ubb35\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825(insert, upsert)\uc2dc\uc810\uc5d0 \ud68d\ub4dd\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. BTreeStoreAndGetFuture<Boolean, Object> asyncBopInsertAndGetTrimmed(String key, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) BTreeStoreAndGetFuture<Boolean, Object> asyncBopInsertAndGetTrimmed(String key, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) B+tree\uc5d0 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub97c insert \ud558\uac70\ub098 upsert \ud560 \ub54c \uc0ad\uc81c(trim) \ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc788\uc744 \uacbd\uc6b0 \uadf8 \uac12\uc744 \uc870\ud68c\ud55c\ub2e4. key: b+tree item\uc758 key bkey: \uc0bd\uc785\ud560 element\uc758 bkey(b+tree key) bkey\ub294 element\uc758 key\ub85c long\ub610\ub294 byte[1~31] \uc720\ud615\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. 0\uc774\uc0c1\uc758 \uac12\uc73c\ub85c\ub9cc \uc9c0\uc815\ud560 \uc218 \uc788\uace0. key\uac00 \uc874\uc7ac\ud558\ub294 \uc0c1\ud0dc\uc5d0\uc11c bkey\uc640 value\uac00 \uc800\uc7a5\ub41c\ub2e4 \ud558\ub354\ub77c\ub3c4 key\uc5d0 \uc124\uc815\ub41c expire time\uc740 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. eflag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag) value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED B+tree collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 True CollectionResponse.REPLACED Element\uac00 \uad50\uccb4\ub428 True CollectionResponse.TRIMMED element\uac00 \uc0bd\uc785\ub418\uace0, \uc0bd\uc785\uc73c\ub85c trimmed element\uac00 \uc870\ud68c\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.ELEMENT_EXISTS \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 False CollectionResponse.OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 bkey\uac00 b+tree trimmed \uc601\uc5ed\uc5d0 \ud574\ub2f9\ub428 future.getElement()\uac1d\uccb4\ub97c \ud1b5\ud574 \uc0ad\uc81c(trim) \ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 future.getElement() \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getValue() Object element\uc758 \uac12 getByteArrayBkey() byte[] element bkey \uac12(byte[]) getLongBkey() long element bkey \uac12(long) isByteArrayBkey() boolean element bkey byte array \uc5ec\ubd80 getFlag() byte[] element flag\uac12(byte[]) B+tree\uc5d0 element \uc0bd\uc785\ud558\uba74\uc11c \uc554\ubb35\uc801\uc73c\ub85c trim\ub418\ub294 element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. private String key = \"BopStoreAndGetTest\"; private long[] longBkeys = { 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, public void testInsertAndGetTrimmedLongBKey() throws Exception { // insert test data CollectionAttributes attrs = new CollectionAttributes(); attrs.setMaxCount(10); attrs.setOverflowAction(CollectionOverflowAction.smallest_trim); for (long each : longBkeys) { mc.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // cause an overflow assertTrue(mc.asyncBopInsert(key, 1000, null, \"val\", null).get()); // expecting that bkey 10 was trimmed out and the first bkey is 11 Map<Integer, Element<Object>> posMap = mc.asyncBopGetByPosition(key, BTreeOrder.ASC, 0).get(); assertNotNull(posMap); assertNotNull(posMap.get(0)); // the first element assertEquals(11L, posMap.get(0).getLongBkey()); // then cause an overflow again and get a trimmed object // it would be a bkey(11) BTreeStoreAndGetFuture<Boolean, Object> f = mc.asyncBopInsertAndGetTrimmed(key, 2000, null, \"val\", null); boolean succeeded = f.get(); Element<Object> element = f.getElement(); assertTrue(succeeded); assertNotNull(element); assertEquals(11L, element.getLongBkey()); System.out.println(\"The insertion was succeeded and an element \" + f.getElement() + \" was trimmed out\"); // finally check the first bkey which is expected to be 12 posMap = mc.asyncBopGetByPosition(key, BTreeOrder.ASC, 0).get(); assertNotNull(posMap); assertNotNull(posMap.get(0)); // the first element assertEquals(12L, posMap.get(0).getLongBkey()); } 7-4. B+Tree Element Upsert B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c upsert\ud558\ub294 \ud568\uc218\ub4e4\uc774\ub2e4. Upsert \uc5f0\uc0b0\uc740 \ud574\ub2f9 element\uac00 \uc5c6\uc73c\uba74 insert\ud558\uace0, \uc788\uc73c\uba74 update\ud558\ub294 \uc5f0\uc0b0\uc774\ub2e4. \uc804\uc790\ub294 long bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopUpsert(String key, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) CollectionFuture<Boolean> asyncBopUpsert(String key, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) key: upsert \ub300\uc0c1 b+tree\uc758 key bkey: upsert\ud560 element\uc758 bkey(b+tree key) eflag: upsert\ud560 element\uc758 eflag(element flag), that is optional value: upsert\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: upsert \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED B+tree collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 True CollectionResponse.REPLACED Element\uac00 \uad50\uccb4\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 False CollectionResponse.OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 bkey\uac00 b+tree trimmed \uc601\uc5ed\uc5d0 \ud574\ub2f9\ub428 B+tree element\ub97c upsert\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTreeKey\"; long bkey = 1L; String value = \"This is a value.\"; byte[] eflag = new byte[] { 1, 1, 1, 1 }; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncBopUpsert(key, bkey, eflag, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } B+tree\uc5d0 element\ub97c update\ub610\ub294 insert\ud55c\ub2e4. attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 b+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate\uc18d\uc131\uc744 \uac00\uc9c4 b+tree\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc800\uc7a5\ud55c\ub2e4. \ub9cc\uc57d key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud669\uc5d0\uc11c attributesForCreate\uac12\uc774 null\uc774\uba74 insert\uc5d0 \uc2e4\ud328\ud55c\ub2e4. Key\uac00 \uc0c8\ub85c \uc0dd\uc131\ub420 \ub54c \uc9c0\uc815\ud558\ub294 attributesForCreate\uc5d0 expire time\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74 \uae30\ubcf8\uac12\uc778 0\uc73c\ub85c \uc124\uc815\ub418\uba70 \uc774\ub294 b+tree\uac00 \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. Upsert\uac00 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 upsert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Upsert \uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 future.getOperationStatus().getResponse()\ub97c \uc0ac\uc6a9\ud55c\ub2e4. 7-5. B+Tree Element \ubcc0\uacbd B+Tree\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. Element\uc758 eflag \uadf8\ub9ac\uace0/\ub610\ub294 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. \uc804\uc790\ub294 long bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopUpdate(String key, long bkey, ElementFlagUpdate eFlagUpdate, Object value) CollectionFuture<Boolean> asyncBopUpdate(String key, byte[] bkey, ElementFlagUpdate eFlagUpdate, Object value) key: \ubcc0\uacbd \ub300\uc0c1 b+tree\uc758 key bkey: \ubcc0\uacbd \ub300\uc0c1 element\uc758 bkey(b+tree key) eFlagUpate: element\uc758 eflag \ubcc0\uacbd\ud560 \ub0b4\uc6a9 eflag\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc73c\ub824\uba74 null\uc744 \uc9c0\uc815\ud55c\ub2e4. eflag\ub97c \uc0ad\uc81c\ud558\ub824\uba74 ElementFlagUpdate.RESET_FLAG\ub97c \uc9c0\uc815\ud55c\ub2e4. value: element\uc758 new value value\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc73c\ub824\uba74 null\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.UPDATED Element\uac00 \ubcc0\uacbd\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.EFLAG_MISMATCH \uc8fc\uc5b4\uc9c4 eFlagUpate\uac00 \ud574\ub2f9 element\uc758 eflag \ub370\uc774\ud130\uc640 \ubd88\uc77c\uce58 \ud2b9\uc815 element\uc758 eflag\ub294 \uadf8\ub300\ub85c \ub450\uace0 value\ub9cc \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, null, value); \ud2b9\uc815 element\uc758 eflag\ub294 0x01000100\ub85c \ubcc0\uacbd\ud558\uace0 value\ub294 \uadf8\ub300\ub85c \ub454\ub2e4. byte[] flag = new byte[] { 1, 0, 1, 0 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null); \ud2b9\uc815 element\uc758 eflag\ub97c \uc0ad\uc81c\ud558\uace0 value\ub294 \uadf8\ub300\ub85c \ub454\ub2e4. CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, ElementFlagUpdate.RESET_FLAG, null); \ud2b9\uc815 element\uc758 elfag\uc5d0\uc11c \ud2b9\uc815 byte\ub97c bitwise \uc5f0\uc0b0\ud558\uc5ec \ubcc0\uacbd\ud558\ub294 \uc608\uc81c\uc774\ub2e4. \uc544\ub798 \uc608\uc81c\ub294 eflag\uc758 \ub450\ubc88\uc9f8 byte\ub97c 0x01\uacfc bitwise AND \uc5f0\uc0b0\ud55c \uacb0\uacfc\ub85c \ubcc0\uacbd\ud55c\ub2e4. \ub9cc\uc57d, \ud574\ub2f9 element\uc5d0 eflag\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 offset\uc774 \uac00\ub9ac\ud0a4\ub294 byte\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ubcc0\uacbd \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud55c\ub2e4. int eFlagOffset = 1; BitWiseOperands bitOp = BitWiseOperands.AND; byte[] flag = new byte[] { 1 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(eFlagOffset, bitOp, flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null); Element \uc218\uc815\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc218\ud589 \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 7-6. B+Tree Element \uc0ad\uc81c B+tree\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c0\uba74\uc11c eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopDelete(String key, long bkey, ElementFlagFilter eFlagFilter, boolean dropIfEmpty) CollectionFuture<Boolean> asyncBopDelete(String key, byte[] bkey, ElementFlagFilter eFlagFilter, boolean dropIfEmpty) \ub458\uc9f8, B+tree\uc5d0\uc11c from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 elements\ub97c \ud0d0\uc0c9\ud558\uba74\uc11c eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\ub97c \uc0ad\uc81c\ud55c\ub2e4. count\uac00 0\uc774\uba74 bkey range\uc5d0\uc11c eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ubaa8\ub4e0 element\ub97c \uc0ad\uc81c\ud558\uace0 0\ubcf4\ub2e4 \ud06c\uba74, count \uac1c\uc758 elements\ub9cc \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopDelete(String key, long from, long to, ElementFlagFilter eFlagFilter, int count, boolean dropIfEmpty) CollectionFuture<Boolean> asyncBopDelete(String key, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int count, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 b+tree\uc758 key bkey \ub610\ub294 \\<from, to>: \uc0ad\uc81c\ud560 element\uc758 bkey(b+tree key) \ub610\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 count: \uc0ad\uc81c\ud560 element \uac1c\uc218\ub97c \uc9c0\uc815, 0\uc774\uba74 \uc870\uac74 \ub9cc\uc871\ud558\ub294 \ubaa8\ub4e0 element \uc0ad\uc81c dropIfEmpty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub418\uba74, \uadf8 b+tree \uc790\uccb4\ub97c \uc0ad\uc81c\ud560 \uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED Element\ub9cc \uc0ad\uc81c\ud568 True CollectionResponse.DELETED_DROPPED Element \uc0ad\uc81c\ud558\uace0 B+tree \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 \ub2e4\uc74c\uc740 b+tree\uc5d0\uc11c bkey\uac00 1\uc778 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Prefix:BTreeKey\"; long bkey = 1L; boolean dropIfEmpty = true; CollectionFuture<Boolean> future = null; try { future = client.asyncBopDelete(key, bkey, ElementFlagFilter.DO_NOT_FILTER, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } B+tree\uc5d0\uc11c bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud558\uace0 b+tree\uac00 \ube44\uc5b4\uc788\uac8c \ub418\uc5c8\uc744 \ub54c b+tree\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. \uc608\uc81c\uc5d0\uc11c filter\uc870\uac74\uc740 \u201cfilter\ud558\uc9c0 \uc54a\uc74c\u201d\uc73c\ub85c \uc9c0\uc815\ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4 \uc0ad\uc81c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4. 7-7. B+tree Element \uac12\uc758 \uc99d\uac10 B+tree element\uc758 \uac12\uc744 \uc99d\uac00/\uac10\uc18c \uc2dc\ud0a4\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Element\uc758 \uac12\uc740 String \ud615\uc758 \uc22b\uc790\uc774\uc5b4\uc57c \ud55c\ub2e4. CollectionFuture<Long> asyncBopIncr(String key, long bkey, int by) CollectionFuture<Long> asyncBopDecr(String key, long bkey, int by) CollectionFuture<Long> asyncBopIncr(String key, Byte[] bkey, int by) CollectionFuture<Long> asyncBopDecr(String key, Byte[] bkey, int by) CollectionFuture<Long> asyncBopIncr(String key, long subkey, int by, long initial, byte[] eFlag); CollectionFuture<Long> asyncBopDecr(String key, long subkey, int by, long initial, byte[] eFlag); CollectionFuture<Long> asyncBopIncr(String key, byte[] subkey, int by, long initial, byte[] eFlag); CollectionFuture<Long> asyncBopDecr(String key, byte[] subkey, int by, long initial, byte[] eFlag); key: b+tree item\uc758 key bkey: \ub300\uc0c1 element\uc758 bkey by: \uc99d\uac10\uc2dc\ud0ac \uac12 (1 \uc774\uc0c1\uc758 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d \uac10\uc18c\uc2dc\ud0ac \uac12\uc774 element \uac12\ubcf4\ub2e4 \ud06c\uba74, \uac10\uc18c \ud6c4\uc758 \uacb0\uacfc\uac12\uc740 0\uc73c\ub85c \uc800\uc7a5\ub41c\ub2e4) \uc544\ub798 \uac12\ub4e4\uc740 \ub300\uc0c1 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c \uc0c8\ub86d\uac8c \uc0bd\uc785\ub418\ub294 \uac12\ub4e4\uc774\ub2e4. (optional) - initial: \uc0bd\uc785\ud560 element\uc758 value (0 \uc774\uc0c1\uc758 \uac12[64bit unsigned integer]\uc774\uc5b4\uc57c \ud55c\ub2e4) - eFlag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag) \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 element \uac12 CollectionResponse.END \uc99d\uac10 \uc815\uc0c1 \uc218\ud589 null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) null CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 null CollectionResponse.OUT_OF_RANGE \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c B+tree element \uac12\uc744 \uc99d\uac00\uc2dc\ud0a4\ub294 \uc608\uc81c\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. String key = \"Prefix:BTree\"; long bkey = 0L; CollectionFuture<Long> future = null; try { future = mc.asyncBopIncr(key, bkey, (int) 2); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Long result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc774 \uc608\uc81c\ub294 b+tree\uc5d0 \uc800\uc7a5\ub41c element\uc758 \uac12\uc744 2 \ub9cc\ud07c increment \ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Element increment \ud6c4 \uc870\ud68c\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 7-8. B+Tree Element \uac1c\uc218 \uacc4\uc0b0 B+tree\uc5d0\uc11c from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 element\ub4e4 \uc911 eFlagFilter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Integer> asyncBopGetItemCount(String key, long from, long to, ElementFlagFilter eFlagFilter) CollectionFuture<Integer> asyncBopGetItemCount(String key, byte[] from, byte[] to, ElementFlagFilter eFlagFilter) key: b+tree item\uc758 key \\<from, to>: element \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 element \uac1c\uc218 CollectionResponse.END Element count\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) B+tree element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTree\"; long bkeyFrom = 0L; long bkeyTo = 100L; CollectionFuture<Integer> future = null; try { future = mc.asyncBopGetItemCount(key, bkeyFrom, bkeyTo, ElementFlagFilter.DO_NOT_FILTER); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Integer result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc774 \uc608\uc81c\ub294 b+ tree\uc5d0 \uc800\uc7a5\ub41c element\uc911 bkey\uac00 bkeyFrom\ubd80\ud130 bkeyTo\uae4c\uc9c0 \uc778 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. element\uac1c\uc218 \uc870\ud68c\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 7-9. B+Tree Element \uc870\ud68c B+tree element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c0\uace0 eFlagFilter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<Long, Element<Object>>> asyncBopGet(String key, long bkey, ElementFlagFilter eFlagFilter, boolean withDelete, Boolean dropIfEmpty) CollectionFuture<Map<ByteArrayBKey, Element<Object>>> asyncBopGet(String key, byte[] bkey, ElementFlagFilter eFlagFilter, boolean withDelete, Boolean dropIfEmpty) \ub458\uc9f8, B+tree\uc5d0\uc11c from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 elements\ub97c \ud0d0\uc0c9\ud558\uba74\uc11c eFlagFilter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc911 offset \ubc88\uc9f8 element\ubd80\ud130 count\uac1c\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<Long, Element<Object>>> asyncBopGet(String key, long from, long to, ElementFlagFilter eFlagFilter, int offset, int count, boolean withDelete, boolean dropIfEmpty) CollectionFuture<Map<ByteArrayBKey, Element<Object>>> asyncBopGet(String key, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int offset, int count, boolean withDelete, Boolean dropIfEmpty) key: b+tree item\uc758 key bkey \ub610\ub294 \\<from, to>: element \uc870\ud68c \ub300\uc0c1\uc774 \ub418\ub294 bkey \ub610\ub294 \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub418\uba74, \uadf8 b+tree \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub9cc \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc5c6\uc74c not null CollectionResponse.TRIMMED Element\ub9cc \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c b+tree\ub97c drop\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree \uc601\uc5ed \uc5c6\uc74c null CollectionResponse.OUT_OF_RANGE \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) \uacb0\uacfc\ub85c \ubc18\ud658\ub41c result(Map\\<Long, Element\\<Object>>) \uac1d\uccb4\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 result \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() Long btree\ub0b4\uc758 position getValue().getValue() Object element\uc758 \uac12 getValue().getByteArrayBkey() byte[] element bkey \uac12(byte[]) getValue().getLongBkey() long element bkey \uac12long) getValue().isByteArrayBkey() boolean element bkey \uac12 byte array \uc5ec\ubd80 getValue().getFlag() byte[] element flag \uac12(byte[]) B+tree element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTreeKey\"; long from = 1L; long to = 6L; int offset = 2; int count = 3; boolean withDelete = false; boolean dropIfEmpty = false; ElementFlagFilter filter = new ElementFlagFilter(CompOperands.Equal, new byte[] { 1, 1 }); CollectionFuture<Map<Long, Element<Object>>> future = null; try { future = client.asyncBopGet(key, from, to, filter, offset, count, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Long, Element<Object>> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c B+ tree\uac00 \uc5c6\uc74c.\"); } else if (response.equals(CollectionResponse.NOT_FOUND_ELEMENT)) { System.out.println(\"Key\uc5d0 B+ tree\ub294 \uc874\uc7ac\ud558\uc9c0\ub9cc \uc800\uc7a5\ub41c \uac12 \uc911 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc5c6\uc74c.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } bkey\uac00 1\ubd80\ud130 6\uc0ac\uc774\uc5d0 \uc788\uace0 filter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub4e4 \uc911\uc5d0\uc11c 3\ubc88\uc9f8 \uc704\uce58\ud558\ub294 \uac12\ubd80\ud130 3\uac1c\ub97c \uc870\ud68c\ud55c\ub2e4. \uc774 \uc608\uc81c\uc5d0\uc11c eflag filter \uc870\uac74\uc740 eflag \uac12\uc774 0x0101\uacfc \uac19\uc740\uc9c0\ub97c \uac80\uc0ac\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubc18\ud658\ub418\ub294 Map \uc778\ud130\ud398\uc774\uc2a4\uc758 \uad6c\ud604\uccb4\ub294 TreeMap\uc774\uba70, \uadf8 \uacb0\uacfc\ub294 \ub2e4\uc74c \uc911\uc758 \ud558\ub098\uc774\ub2e4. key \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c : null \ubc18\ud658 key \uc874\uc7ac\ud558\uc9c0\ub9cc \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc5c6\uc74c: empty map \ubc18\ud658 key \uc874\uc7ac\ud558\uace0 \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc788\uc74c: non-empty map \ubc18\ud658 \uc870\ud68c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\uc73c\ub85c \ud655\uc778\ud55c\ub2e4. 7-10. B+Tree Element \uc77c\uad04 \uc0bd\uc785 B+tree\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 b+tree\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncBopPipedInsertBulk(String key, List<Element<Object>> elements, CollectionAttributes attributesForCreate) CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncBopPipedInsertBulk(String key, Map<Long, Object> elements, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 b+tree\uc758 key elements: \uc0bd\uc785\ud560 element\ub4e4 List\\<Element\\<Object>> \uc720\ud615 Map\\<Long, Object> \uc720\ud615 attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 b+tree\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncBopInsertBulk(List<String> keyList, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) Future<Map<String, CollectionOperationStatus>> asyncBopInsertBulk(List<String> keyList, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) keyList: \uc0bd\uc785 \ub300\uc0c1 b+tree\ub4e4\uc758 key list bkey: \uc0bd\uc785\ud560 element\uc758 bkey(b+tree key) eflag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag) value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ud558\ub098\uc758 b+tree\uc5d0 \uc5ec\ub7ec \uac1c\uc758 elements\uc744 bulk insert\ud558\uace0 \uac01\uac01\uc758 element\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:BTreeBulk\"; List<Element<Object>> elements = new ArrayList<Element<Object>>(); elements.add(new Element<Object>(1L, \"VALUE1\", new byte[] { 1, 1 })); elements.add(new Element<Object>(2L, \"VALUE2\", new byte[] { 1, 1 })); elements.add(new Element<Object>(3L, \"VALUE3\", new byte[] { 1, 1 })); boolean createKeyIfNotExists = true; if (elements.size() > mc.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 mc.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = mc.asyncBopPipedInsertBulk(key, elements, new CollectionAttributes()); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Map.Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + elements.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c b+ tree\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate\uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index\uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert\uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 index\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. 7-.11. B+Tree Element \uc77c\uad04 \ubcc0\uacbd B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 elements\uc5d0 \ud574\ub2f9\ud558\ub294 \ubaa8\ub4e0 element\uc758 value \uadf8\ub9ac\uace0/\ub610\ub294 element flag\ub97c \uc77c\uad04 \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncBopPipedUpdateBulk(String key, List<Element<Object>> elements) key: \ubcc0\uacbd \ub300\uc0c1 b+tree\uc758 key elements: \ubcc0\uacbd \ub300\uc0c1 elements\uc5d0 \ub300\ud574 bkey\uc640 eFlagUpate, new value\ub97c \uac00\uc9c4\ub2e4. 7-12. B+Tree Element \uc77c\uad04 \uc870\ud68c \ub2e4\uc218\uc758 b+tree\ub4e4 \uac01\uac01\uc5d0 \ub300\ud574 from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 elements\ub97c \ud0d0\uc0c9\ud558\uba74\uc11c, eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc911 offset \uc704\uce58\ubd80\ud130 count \uac1c\uc218\ub9cc\ud07c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, BTreeGetResult<Long, Object>>> asyncBopGetBulk(List<String> keyList, long from, long to, ElementFlagFilter eFlagFilter, int offset, int count) CollectionFuture<Map<String, BTreeGetResult<ByteArrayBKey, Object>>> asyncBopGetBulk(List<String> keyList, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int offset, int count) keyList: b+tree items\uc758 key list bkey \ub610\ub294 \\<from, to>: element \uc870\ud68c \ub300\uc0c1\uc774 \ub418\ub294 bkey \ub610\ub294 \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 eflag filter \uc870\uac74\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\ub824\uba74, ElementFlagFilter.DO_NOT_FILTER\ub97c \uc785\ub825\ud55c\ub2e4. offset, count: bkey range\uc640 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c \uc2e4\uc81c \uc870\ud68c\ud560 element\uc758 offset\uacfc count \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 Map\\<Stirng, BTreeGetResult\\<Bkey, Object>>\uc744 \uc5bb\uc73c\uba70, \uc774\ub7ec\ud55c Map\uc740 \uac1c\ubcc4 b+tree item\uc758 key\uc640 \uadf8 b+tree\uc5d0\uc11c \uc870\ud68c\ud55c \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub294 BTreeGetResult \uac1d\uccb4\uc774\ub2e4. BTreeGetResult \uac1d\uccb4\ub97c \ud1b5\ud574 \uac1c\ubcc4 \uc870\ud68c \uacb0\uacfc\ub97c \uc544\ub798\uc640 \uac19\uc774 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. BTreeGetResult.getElements() BtreeGetResult.getCollectionResponse() \uc124\uba85 not null CollectionResponse.OK Element \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc5c6\uc74c not null CollectionResponse.TRIMMED Element \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc870\ud68c\ub41c element \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc5c6\uc74c null CollectionResponse.OUT_OF_RANGE \uc870\ud68c\ub41c element \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) BTreeGetResult.getElements()\ub85c \uc870\ud68c\ud55c BTreeElement \uac1d\uccb4\ub85c\ubd80\ud130 \uac1c\ubcc4 element\uc758 bkey, eflag, value\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. BTreeElement \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() long \ub610\ub294 byte[] element\uc758 bkey getEFlag() byte[] element flag getValue() Object element\uc758 \uac12 B+tree element \uc77c\uad04 \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. final List<String> keyList = new ArrayList<String>() { { add(\"Prefix:BTree1\"); add(\"Prefix:BTree2\"); add(\"Prefix:BTree3\"); } }; ElementFlagFilter filter = ElementFlagFilter.DO_NOT_FILTER; long bkeyFrom = 0L; long bkeyTo = 100L; int queryCount = 10; int offset = 0; CollectionGetBulkFuture<Map<String, BTreeGetResult<Long, Object>>> future = null; Map<String, BTreeGetResult<Long, Object>> results = null; try { future = mc.asyncBopGetBulk(keyList, from, to, filter, offset, count); // (1) results = future.get(1000L, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } if (results == null) return; for(Entry<String, BTreeGetResult<Long, Object>> entry : results.entrySet()) { // (2) System.out.println(\"key=\" + entry.getKey()); System.out.println(\"result code=\" + entry.getValue().getCollectionResponse().getMessage()); // (3) if (entry.getValue().getElements() != null) { // (4) for(Entry<Long, BTreeElement<Long, Object>> el : entry.getValue().getElements().entrySet()) { System.out.println(\"bkey=\" + el.getKey()); System.out.println(\"eflag=\" + Arrays.toString(el.getValue().getEflag()); System.out.println(\"value=\" + el.getValue().getValue()); } } } keyList\ub85c \uc8fc\uc5b4\uc9c4 b+tree\uc5d0 \uc800\uc7a5\ub41c element \uc911 bkey\uac00 from\ubd80\ud130 to\uc0ac\uc774\uc5d0 \uc788\uace0 eflag filter\ub97c \ub9cc\uc871\ud558\ub294 elements \uc911 offset \ubc88\uc9f8\ubd80\ud130 count \uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\ub294 Map\uc73c\ub85c \ubc18\ud658\ub418\ub294\ub370 Key\ub294 b+tree\uc758 key\uac00 \ub418\uace0 Map\uc758 value\ub294 \uac01 key\uc5d0 \uc800\uc7a5\ub41c element\ub4e4\uc774\ub2e4. \uc870\ud68c \uacb0\uacfc map\uc5d0\uc11c key\ubcc4\ub85c \uc870\ud68c\ud55c BTreeGetResult\uac1d\uccb4\ub294 \uc870\ud68c \uacb0\uacfc\ucf54\ub4dc\uc640 \ud574\ub2f9 b+tree\uc5d0\uc11c \uc870\ud68c\ub41c element\ub97c \uac00\uc9c4\ub2e4. \uc870\ud68c \uacb0\uacfc\ucf54\ub4dc\uc5d0 \ub530\ub77c BTreeGetResult.getElements()\uc758 \uacb0\uacfc\ub294 null\uc77c \uc218 \uc788\ub2e4. BTreeGetResult.getElements()\ub85c \uc870\ud68c\ud55c BTreeElement\uac1d\uccb4\ub85c\ubd80\ud130 element\uc758 bkey, eflag, value\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 7-13. B+Tree Element Sort-Merge \uc870\ud68c \ub2e4\uc218\uc758 B+tree\ub4e4\uc5d0 \ub300\ud574 element \uc870\ud68c\ub97c sort-merge \ubc29\uc2dd\uc73c\ub85c \uc218\ud589\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. \ubb3c\ub9ac\uc801\uc73c\ub85c \uc5ec\ub7ec b+tree\ub4e4\ub85c \uad6c\uc131\ub418\uc9c0\ub9cc, \uc774\ub4e4\uc774 \ub17c\ub9ac\uc801\uc73c\ub85c \ud558\ub098\uc758 \uac70\ub300\ud55c b+tree\ub77c \uac00\uc815\ud558\uace0, \uc774\ub7ec\ud55c b+tree\uc5d0 \ub300\ud574 element \uc870\ud68c\ub97c \uc218\ud589\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. smget \ub3d9\uc791\uc740 \uc870\ud68c \ubc94\uc704\uc640 \uc5b4\ub5a4 b+tree\uc758 trim \uc601\uc5ed\uacfc\uc758 \uacb9\uce68\uc5d0 \ub300\ud55c \ucc98\ub9ac\ub85c, \uc544\ub798 \ub450 \uac00\uc9c0 \ub3d9\uc791 \ubaa8\ub4dc\uac00 \uc788\ub2e4. 1) \uae30\uc874 Sort-Merge \uc870\ud68c (1.8.X \uc774\ud558 \ubc84\uc804\uc5d0\uc11c \ub3d9\uc791\ud558\ub358 \ubc29\uc2dd) - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uccab\ubc88\uc9f8 element\uac00 trim\ub41c b+tree\uac00 \ud558\ub098\ub77c\ub3c4 \uc874\uc7ac\ud558\uba74 OUT_OF_RANGE \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements \uc870\ud68c\ud55c \ud6c4\uc5d0 \uc751\uc6a9\uc5d0\uc11c sort-merge \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. - OUT_OF_RANGE\uac00 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c smget\uc744 \uc218\ud589\ud558\uba74\uc11c \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\ub97c \ub9cc\ub098\uac8c \ub418\uba74, \uadf8 \uc9c0\uc810\uae4c\uc9c0 \uc870\ud68c\ud55c elements\ub97c \ucd5c\uc885 elements \uacb0\uacfc\ub85c \ud558\uace0 smget \uc218\ud589 \uc0c1\ud0dc\ub294 TRIMMED\ub85c \ud558\uc5ec \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim \uc601\uc5ed\uc758 elements\ub97c \uc870\ud68c\ud558\uc5ec smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. 2) \uc2e0\uaddc Sort-Merge \uc870\ud68c (1.9.0 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub41c \ubc29\uc2dd) - \uae30\uc874\uc758 OUT_OF_RANGE\uc5d0 \ud574\ub2f9\ud558\ub294 b+tree\ub97c missed keys\ub85c \ubd84\ub958\ud558\uace0 \ub098\uba38\uc9c0 b+tree\ub4e4\uc5d0 \ub300\ud574 smget\uc744 \uacc4\uc18d \uc218\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 missed keys\uc5d0 \ud55c\ud574\uc11c\ub9cc \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\uac00 \uc874\uc7ac\ud558\ub354\ub77c\ub3c4, \uadf8 \uc9c0\uc810\uc5d0\uc11c smget\uc744 \uc911\uc9c0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uadf8\ub7ec\ud55c b+tree\ub97c trimmed keys\ub85c \ubd84\ub958\ud558\uace0 \uc6d0\ud558\ub294 \uac1c\uc218\uc758 elements\ub97c \ucc3e\uc744 \ub54c\uae4c\uc9c0 smget\uc744 \uacc4\uc18d \uc9c4\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 trimmed keys\uc5d0 \ud55c\ud558\uc5ec \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim\ub41c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - bkey\uc5d0 \ub300\ud55c unique \uc870\ud68c \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\ub294 duplcate \uc870\ud68c \uc678\uc5d0 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uace0 unique bkey\ub9cc\uc744 \uc870\ud68c\ud558\ub294 unique \uc870\ud68c\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - \uc870\ud68c \uc870\uac74\uc5d0 offset \uae30\ub2a5\uc744 \uc81c\uac70\ud55c\ub2e4. \uae30\uc874 smget \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4, offset \uac12\uc740 \ud56d\uc0c1 0\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\uace0\ud55c\ub2e4. \uc591\uc218\uc758 offset\uc744 \uc0ac\uc6a9\ud558\ub294 smget\uc5d0\uc11c missed keys\uac00 \uc874\uc7ac\ud558\uace0 missed keys\uc5d0 \ub300\ud55c DB \uc870\ud68c\uac00 offset\uc73c\ub85c skip\ub41c element\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0, \uc751\uc6a9\uc5d0\uc11c \uc815\ud655\ud55c offset \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud574\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\uc804\uc758 \uc870\ud68c \uacb0\uacfc\uc5d0 \uc774\uc5b4\uc11c \ucd94\uac00\ub85c \uc870\ud68c\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, \uc774\uc804\uc5d0 \uc870\ud68c\ub41c bkey \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c bkey range\ub97c \uc7ac\uc870\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc5ec\ub7ec b+tree\ub4e4\uc5d0 \ub300\ud574 sort-merge get\uc744 \uc218\ud589\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uc5ec\ub7ec b+tree\ub4e4\ub85c \ubd80\ud130 from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba74\uc11c eflag filter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub97c \ucc3e\uc544 sort merge\ud558\uba74\uc11c, count\uac1c\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. SMGetFuture<List<SMGetElement<Object>>> asyncBopSortMergeGet(List<String> keyList, long from, long to, ElementFlagFilter eFlagFilter, int count, SMGetMode smgetMode) SMGetFuture<List<SMGetElement<Object>>> asyncBopSortMergeGet(List<String> keyList, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int count, SMGetMode smgetMode) keyList: b+tree items\uc758 key list \\<from, to>: \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 eflag filter \uc870\uac74\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\ub824\uba74, ElementFlagFilter.DO_NOT_FILTER\ub97c \uc785\ub825\ud55c\ub2e4. count: bkey range\uc640 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c \uc2e4\uc81c \uc870\ud68c\ud560 element\uc758 count \uc9c0\uc815 \uc81c\uc57d \uc870\uac74\uc73c\ub85c 1000\uc774\ud558\uc774\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub294 sort-merge get \uc5f0\uc0b0\uc774 \ubd80\ub2f4\uc774 \ub108\ubb34 \ud06c\uc9c0 \uc54a\uc740 \uc5f0\uc0b0\uc73c\ub85c \uc81c\ud55c\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. smgetMode: smget\uc5d0 \ub300\ud574\uc11c mode\ub97c \uc9c0\uc815\ud558\ub294 flag unique \uc870\ud68c \ub610\ub294 duplicate \uc870\ud68c\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element \uc870\ud68c, No duplicate bkey not null CollectionResponse.DUPLICATED Element \uc870\ud68c, Duplicate bkey \uc874\uc7ac null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.ATTR_MISMATCH sort-merge get\uc5d0 \ucc38\uc5ec\ud55c b+tree\uc758 \uc18d\uc131\uc774 \uc11c\ub85c \ub2e4\ub984, arcus-memcached 1.11.3 \uc774\ud6c4 \uc18d\uc131 \uc81c\uc57d\uc774 \uc0ac\ub77c\uc9d0 B+tree element sort-merge \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. List<String> keyList = new ArrayList<String>() {{ add(\"Prefix:KeyA\"); add(\"Prefix:KeyB\"); add(\"Prefix:KeyC\"); }}; long bkeyFrom = 0L; // (1) long bkeyTo = 100L; int queryCount = 10; SMGetMode smgetMode = SMGetMode.DUPLICATE; SMGetFuture<List<SMGetElement<Object>>> future = null; try { future = mc.asyncBopSortMergeGet(keyList, bkeyFrom, bkeyTo, ElementFlagFilter.DO_NOT_FILTER, queryCount, smgetMode); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { List<SMGetElement<Object>> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) for (SMGetElement<Object> element : result) { // (4) System.out.println(element.getKey()); System.out.println(element.getBkey()); System.out.println(element.getValue()); } for (Map.Entry<String, CollectionOperationStatus> m : future.getMissedKeys().entrySet()) { // (5) System.out.print(\"Missed key : \" + m.getKey()); System.out.println(\", response : \" + m.getValue().getResponse()); } for (SMGetTrimKey e : future.getTrimmedKeys()) { // (6) System.out.println(\"Trimmed key : \" + e.getKey() + \", bkey : \" + e.getBkey()); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc608\uc81c\ub294 \u201cKeyA\u201d, \u201cKeyB\u201d, \u201cKeyC\u201d\uc5d0 \uc800\uc7a5\ub41c element\ub4e4 \uc911 bkey\uac00 0\ubd80\ud130 100\uae4c\uc9c0 \ud574\ub2f9\ud558\ub294 element\ub4e4 10\uac1c\ub97c \uc870\ud68c\ud55c\ub2e4. \uc8fc\uc758\ud560 \uc810\uc740 key\ub85c \uc8fc\uc5b4\uc9c4 b+tree\uc758 attribute\uc124\uc815\uc740 \ubaa8\ub450 \uac19\uc544\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. ElementFlagFilter\ub294 bkey\uc5d0 \uc9c0\uc815\ub41c eflag\uac00 elementFlagFIlter\ub85c \uc9c0\uc815\ub41c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub4e4\ub9cc \uc870\ud68c\ud558\ub294 \uc870\uac74\uc774\ub2e4 \uc608\uc81c\uc5d0\uc11c\ub294 eflag filter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c \uc870\ud68c\ud558\uc600\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc870\ud68c\ub41c \uac12\uc740 List\\<SMGetElement>\ud615\ud0dc\ub85c \ubc18\ud658\ub41c\ub2e4. \uc774\ub85c\ubd80\ud130 \uc870\ud68c\ub41c element\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \ub3d9\uc77c\ud55c bkey\uac00 \uc874\uc7ac\ud558\uba74 key\ub97c \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub418\uc5b4 \ubc18\ud658\ub41c\ub2e4. \uc870\ud68c\ud560 \ub54c \uc9c0\uc815\ud55c key\ub4e4 \uc911\uc5d0 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 key\ub4e4\uc740 future.getMissedKeys()\ub97c \ud1b5\ud574 Map \ud615\ud0dc\ub85c \uc2e4\ud328 \uc6d0\uc778\uacfc \ud568\uaed8 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc2e4\ud328\uc6d0\uc778\uc740 cache miss(NOT_FOUND), unreadable \uc0c1\ud0dc(UNREADABLE), bkey \ubc94\uc704 \uc870\ud68c\ub97c \ub9cc\uc871\ud558\ub294 \ucc98\uc74c bkey\uac00 trim\ub41c \uc0c1\ud0dc(OUT_OF_RANGE) \uc911 \ud558\ub098\uc774\ub2e4. \uc751\uc6a9\uc740 \uc774\ub4e4 \ud0a4\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 back-end storage\uc778 DB\uc5d0\uc11c \ub3d9\uc77c \uc870\ud68c \uc870\uac74\uc73c\ub85c elements\ub97c \uac80\uc0c9\ud558\uc5ec sort-merge \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. bkey \uc870\ud68c \ubc94\uc704\uc758 \ucc98\uc74c bkey\uac00 \uc874\uc7ac\ud558\uc9c0\ub9cc bkey \ubc94\uc704\uc758 \ub05d\uc5d0 \ub2e4\ub2e4\ub974\uae30 \uc804\uc5d0 trim\uc774 \ubc1c\uc0dd\ud55c key\uc640 trim \uc9c1\uc804\uc5d0 cache\uc5d0 \uc788\ub294 \ub9c8\uc9c0\ub9c9 bkey\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc751\uc6a9\uc740 \uc774\ub4e4 \ud0a4\ub4e4\uc5d0 \ub300\ud574 trim \uc9c1\uc804 \ub9c8\uc9c0\ub9c9 bkey \uc774\ud6c4\uc5d0 trim\ub41c bkey\ub4e4\uc744 back-end storage\uc778 DB\uc5d0\uc11c \uc870\ud68c\ud558\uc5ec sort-merge \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. Sort merge get\uc758 \ucd5c\uc885 \uc218 \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. 7-14. B+Tree Position \uc870\ud68c B+tree\uc758 \uac80\uc0c9 \uc870\uac74\uc73c\ub85c \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc704\uce58(position) \uc815\ubcf4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c \uc704\uce58\ub780 B+tree \uc548\uc5d0\uc11c bkey\ub97c \ud1b5\ud574 \uc77c\ub82c\ub85c \uc815\ub82c\ub418\uc5b4 \uc788\ub294 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc778\ub371\uc2a4\ub97c \ub73b\ud558\uba70, 0\ubd80\ud130 count-1 \uae4c\uc9c0 \uc21c\uc11c\ub300\ub85c \ub9e4\uaca8\uc9c4\ub2e4. \uc21c\uc11c\uc5d0 \ub300\ud55c \uae30\uc900\uc73c\ub85c \uc624\ub984\ucc28\uc21c(ASC)\uacfc \ub0b4\ub9bc\ucc28\uc21c(DESC)\uc774 \uc9c0\uc6d0\ub41c\ub2e4. B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc8fc\uc5b4\uc9c4 order\uc5d0 \ub530\ub77c \uc5b4\ub5a4 \uc704\uce58(position)\uc5d0 \uc788\ub294\uc9c0 \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CollectionFuture<Integer> asyncBopFindPosition(String key, long bkey, BTreeOrder order) CollectionFuture<Integer> asyncBopFindPosition(String key, byte[] bkey, BTreeOrder order) key: b+tree item\uc758 key bkey: \uc870\ud68c\ud560 element\uc758 bkey(b+tree bkey) order: \uc704\uce58(position) \uae30\uc900\uc744 \uc815\uc758\ud55c\ub2e4. (\uc624\ub984\ucc28\uc21c : BTreeOrder.ASC, \ub0b4\ub9bc\ucc28\uc21c : BTreeOrder.DESC) \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 element position CollectionResponse.OK Element \uc704\uce58\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element miss null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\uac00 unreadable\uc0c1\ud0dc\uc784 B+tree position \uc870\ud68c \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"BopFindPositionTest\"; long[] longBkeys = { 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L }; public void testLongBKeyAsc() throws Exception { // insert CollectionAttributes attrs = new CollectionAttributes(); for (long each : longBkeys) { arcusClient.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // bop position for (int i=0; i<longBkeys.length; i++) { CollectionFuture<Integer> f = arcusClient.asyncBopFindPosition(key, longBkeys[i], BTreeOrder.ASC); Integer position = f.get(); assertNotNull(position); assertEquals(CollectionResponse.OK, f.getOperationStatus().getResponse()); assertEquals(i, position.intValue()); } } public void testLongBKeyDesc() throws Exception { // insert CollectionAttributes attrs = new CollectionAttributes(); for (long each : longBkeys) { arcusClient.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // bop position for (int i=0; i<longBkeys.length; i++) { CollectionFuture<Integer> f = arcusClient.asyncBopFindPosition(key, longBkeys[i], BTreeOrder.DESC); Integer position = f.get(); assertNotNull(position); assertEquals(CollectionResponse.OK, f.getOperationStatus().getResponse()); assertEquals(\"invalid position\", longBkeys.length-i-1, position.intValue()); } } 7-15. B+Tree Position \uae30\ubc18\uc758 Element \uc870\ud68c B+tree\uc5d0\uc11c \ud558\ub098\uc758 position \ub610\ub294 position range\uc5d0 \ud574\ub2f9\ud558\ub294 elements\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Integer, Element<Object>>> asyncBopGetByPosition(String key, BTreeOrder order, int pos) CollectionFuture<Map<Integer, Element<Object>>> asyncBopGetByPosition(String key, BTreeOrder order, int from, int to) key: b+tree item\uc758 key order: \uc704\uce58(position) \uae30\uc900\uc744 \uc815\uc758\ud55c\ub2e4. (\uc624\ub984\ucc28\uc21c : BTreeOrder.ASC, \ub0b4\ub9bc\ucc28\uc21c : BTreeOrder.DESC) pos or \\<from, to>: \uc704\uce58(position)\ub97c \ud558\ub098\ub9cc \uc9c0\uc815\ud558\uac70\ub098 \ubc94\uc704\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element miss null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\uac00 unreadable\uc0c1\ud0dc\uc784 B+tree\uc5d0\uc11c position \uae30\ubc18\uc758 element \uc870\ud68c \uc608\uc81c\uc774\ub2e4. String key = \"BopGetByPositionTest\"; long[] longBkeys = { 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L }; public void testLongBKeyMultiple() throws Exception { // 10\uac1c\uc758 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c insert \ud55c\ub2e4. CollectionAttributes attrs = new CollectionAttributes(); for (long each : longBkeys) { arcusClient.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // \ud14c\uc2a4\ud2b8 : 5 \ubd80\ud130 8 \uc704\uce58\uc758 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc870\ud68c\ud55c\ub2e4. int posFrom = 5; int posTo = 8; CollectionFuture<Map<Integer, Element<Object>>> f = arcusClient .asyncBopGetByPosition(key, BTreeOrder.ASC, posFrom, posTo); Map<Integer, Element<Object>> result = f.get(1000, TimeUnit.MILLISECONDS); assertEquals(4, result.size()); assertEquals(CollectionResponse.END, f.getOperationStatus().getResponse()); int count = 0; for (Entry<Integer, Element<Object>> each : result.entrySet()) { int currPos = posFrom + count++; assertEquals(\"invalid index\", currPos, each.getKey().intValue()); assertEquals(\"invalid bkey\", longBkeys[currPos], each.getValue().getLongBkey()); assertEquals(\"invalid value\", \"val\", each.getValue().getValue()); } } 7-16. B+Tree Position\uacfc Element \ub3d9\uc2dc \uc870\ud68c B+tree\uc758 \uac80\uc0c9 \uc870\uac74\uc73c\ub85c \ud2b9\uc815 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc704\uce58(position) \ub97c \uae30\uc900\uc73c\ub85c \uc8fc\ubcc0(\uc55e/\ub4a4 position) \uc5d8\ub9ac\uba3c\ud2b8\ub4e4\uc744 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c \uc704\uce58\ub780 B+tree\uc548\uc5d0\uc11c bkey\ub97c \ud1b5\ud574 \uc77c\ub82c\ub85c \uc815\ub82c\ub418\uc5b4 \uc788\ub294 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc778\ub371\uc2a4\ub97c \ub73b\ud558\uba70, 0\ubd80\ud130 count-1\uae4c\uc9c0 \uc21c\uc11c\ub300\ub85c \ub9e4\uaca8\uc9c4\ub2e4. \uc21c\uc11c\uc5d0 \ub300\ud55c \uae30\uc900\uc73c\ub85c \uc624\ub984\ucc28\uc21c(ASC)\uacfc \ub0b4\ub9bc\ucc28\uc21c(DESC)\uc774 \uc9c0\uc6d0\ub41c\ub2e4. B+tree\uc5d0\uc11c bkey\uc5d0 \ud574\ub2f9\ud558\ub294 position\uc744 \uae30\uc900\uc73c\ub85c count\ub9cc\ud07c\uc758 element\ub97c \uc8fc\uc5b4\uc9c4 order\uc5d0 \ub530\ub77c\uc11c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CollectionFuture<Map<Integer, Element<Object>>> asyncBopFindPositionWithGet(String key, long longBKey, BTreeOrder order, int count) CollectionFuture<Map<Integer, Element<Object>>> asyncBopFindPositionWithGet(String key, byte[] byteArrayBKey, BTreeOrder order, int count) key: b+tree item\uc758 key longBKey: \uc870\ud68c\ud560 element\uc758 bkey(b+tree bkey) order: longBKey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uc758 \uc704\uce58(position) \uae30\uc900\uc73c\ub85c \uacb0\uacfc\ub97c \ub2f4\uc744 \uc21c\uc11c\ub97c \uc815\uc758\ud55c\ub2e4. (\uc624\ub984\ucc28\uc21c: BTreeOrder.ASC, \ub0b4\ub9bc\ucc28\uc21c: BTreeOrder.DESC) count: longBKey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uc758 \uc704\uce58(position) \uae30\uc900\uc73c\ub85c \uc870\ud68c\ud560 \uc8fc\ubcc0(\uc55e/\ub4a4 position) element \uac1c\uc218\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element miss null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\uac00 unreadable\uc0c1\ud0dc\uc784 \uacb0\uacfc\ub85c \ubc18\ud658\ub41c result(Map\\<Integer, Element\\<Object>>) \uac1d\uccb4\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 result \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() integer btree\ub0b4\uc758 position getValue().getValue() Object element\uc758 \uac12 getValue().getByteArrayBkey() byte[] element bkey \uac12(byte[]) getValue().getLongBkey() long element bkey \uac12(long) getValue().isByteArrayBkey() boolean element bkey \uac12 byte array \uc5ec\ubd80 getValue().getFlag() byte[] element flag \uac12(byte[]) B+tree\uc5d0\uc11c position\uacfc element \ub3d9\uc2dc \uc870\ud68c \uc608\uc81c\uc774\ub2e4. String key = \"BopFindPositionWithGetTest\"; public void testLongBKey() throws Exception { long longBkey, resultBkey; int totCount = 100; int pwgCount = 10; int rstCount; int position, i; // totCount\uac1c\uc758 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c insert\ud55c\ub2e4. CollectionAttributes attrs = new CollectionAttributes(); for (i = 0; i < totCount; i++) { longBkey = (long)i; arcusClient.asyncBopInsert(key, longBkey, null, \"val\", attrs).get(); } for (i = 0; i < totCount; i++) { // longBkey\ub97c bkey\ub85c \uac00\uc9c0\ub294 element\uc758 position\uc744 \uae30\uc900\uc73c\ub85c \uc8fc\ubcc0(\uc55e/\ub4a4 position) element\ub4e4\uc744 pwgCount\ub9cc\ud07c \uc870\ud68c longBkey = (long)i; CollectionFuture<Map<Integer, Element<Object>>> f = arcusClient .asyncBopFindPositionWithGet(key, longBkey, BTreeOrder.ASC, pwgCount); Map<Integer, Element<Object>> result = f.get(1000, TimeUnit.MILLISECONDS); if (i >= pwgCount && i < (totCount-pwgCount)) { rstCount = pwgCount + 1 + pwgCount; } else { if (i < pwgCount) rstCount = i + 1 + pwgCount; else rstCount = pwgCount + 1 + ((totCount-1)-i); } assertEquals(rstCount, result.size()); assertEquals(CollectionResponse.END, f.getOperationStatus().getResponse()); if (i < pwgCount) { position = 0; } else { position = i - pwgCount; } resultBkey = position; for (Entry<Integer, Element<Object>> each : result.entrySet()) { assertEquals(\"invalid position\", position, each.getKey().intValue()); assertEquals(\"invalid bkey\", resultBkey, each.getValue().getLongBkey()); assertEquals(\"invalid value\", \"val\", each.getValue().getValue()); position++; resultBkey++; } } }","title":"7. btree API"},{"location":"arcus-java-client/7.-btree-API/#7-1-bkeybtree-key-eflagelement-flag","text":"B+tree item\uc5d0\uc11c \uc0ac\uc6a9\uac00\ub2a5\ud55c bkey \ub370\uc774\ud130 \ud0c0\uc785\uc740 \uc544\ub798 \ub450 \uac00\uc9c0\uc774\ub2e4. long \ud0c0\uc785 byte[1~31] \ud0c0\uc785 : byte array\ud06c\uae30\uac00 1\ubd80\ud130 31\uae4c\uc9c0 \uc5b4\ub290 \uac83\uc744 \uc0ac\uc6a9\ud574\ub3c4 \ub41c\ub2e4. byte array \ud0c0\uc785\uc758 bkey\ub97c \ub9cc\ub4dc\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \ub9cc\uc57d, byte array\uc758 \ud06c\uae30\uac00 31\uc744 \ucd08\uacfc\ud558\uba74 IllegalArgumentException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. // Bkey\ub85c 0x00000001\uc744 \uc0ac\uc6a9\ud55c\ub2e4. byte[] bkey = new byte[] { 0, 0, 0, 1 } eflag\ub294 \ud604\uc7ac b+tree element\uc5d0\ub9cc \uc874\uc7ac\ud558\ub294 \ud544\ub4dc\uc774\ub2e4. eflag \ub370\uc774\ud130 \ud0c0\uc785\uc740 byte[1~31] \ud0c0\uc785\ub9cc \uac00\ub2a5\ud558\uba70, bkey\uc758 byte array \uc0ac\uc6a9 \ubc29\uc2dd\uacfc \ub3d9\uc77c\ud558\ub2e4.","title":"7-1. BKey(B+Tree Key)\uc640 EFlag(Element Flag)"},{"location":"arcus-java-client/7.-btree-API/#element-flag-filter","text":"Element\ub97c \uc870\ud68c, \uc218\uc815, \uc0ad\uc81c \uc2dc\uc5d0 eflag(element flag)\uc5d0 \ub300\ud55c filter \uc870\uac74\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. eflag filter \uc870\uac74\uc740 \uc544\ub798\uc640 \uac19\uc774 \ud45c\ud604\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c, eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc744 compare \uac12 \uacfc compare \uc5f0\uc0b0 \uc744 \uc218\ud589\ud55c\ub2e4. compare \uac12 \uc740 eflag \uac12\uc5d0 \ub300\ud574 compare \uc5f0\uc0b0\uc744 \ucde8\ud55c operand\ub85c eflag filter\uc5d0 \uba85\uc2dc\ub41c\ub2e4. \uc120\ud0dd\uc801\uc73c\ub85c, compare \uc5f0\uc0b0\uc758 \uc218\ud589 \uc804\uc5d0 eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc5d0 \ub300\ud574 bitwise \uac12 \uc73c\ub85c bitwise \uc5f0\uc0b0 \uc744 \uba3c\uc800 \ucde8\ud560 \uc218 \uc788\ub2e4. bitwise \uac12 \uc740 eflag \uac12\uc5d0 \ub300\ud574 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c operand\ub85c eflag filter\uc5d0 \uba85\uc2dc\ub41c\ub2e4. \ud604\uc7ac, bitwise \uac12\uc758 \uae38\uc774\ub294 compare \uac12\uc758 \uae38\uc774\uc640 \ub3d9\uc77c\ud574\uc57c \ud558\ub294 \uc81c\uc57d\uc774 \uc788\ub2e4. eflag filter \uc870\uac74\uc5d0\uc11c compare/bitwise \uc5f0\uc0b0\uc774 \uc218\ud589\ub420 eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc740 \uc544\ub798\uc640 \uac19\uc774 \uc120\ud0dd\ud55c\ub2e4. eflag \uc804\uccb4 \uac12\uc5d0\uc11c compare \uc5f0\uc0b0\uc758 \ub300\uc0c1 \uac12\uc740 compare offset \uacfc compare length \ub85c \uc9c0\uc815\ud55c\ub2e4. compare offset \uc740 \ub514\ud3f4\ud2b8\ub85c 0\uc744 \uac00\uc9c0\uba70, eflag filter\uc5d0\uc11c \uc218\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. compare length \ub294 eflag filter\uc5d0 \uba85\uc2dc\ub41c compare \uac12 \uc758 \uae38\uc774\ub85c \uc790\ub3d9 \uc124\uc815\ub41c\ub2e4. eflag \uc804\uccb4 \uac12\uc5d0\uc11c bitwise \uc5f0\uc0b0\uc758 \ub300\uc0c1 \uac12\uc740 bitwise offset \uacfc bitwise length \ub85c \uc9c0\uc815\ud55c\ub2e4. bitwise offset \uc740 \ub530\ub85c \uc9c0\uc815\ud558\uc9c0 \uc54a\uace0, compare offset \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4. bitwise length \ub294 eflag filter\uc5d0 \uba85\uc2dc\ub41c bitwise \uac12 \uc758 \uae38\uc774\ub85c \uc790\ub3d9 \uc124\uc815\ub41c\ub2e4. \uc81c\uacf5\ud558\ub294 compare \uc5f0\uc0b0\uc790\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. compare \uc5f0\uc0b0\uc790 \uc124\uba85 ElementFlagFilter.CompOperands.Equal \uc77c\uce58 ElementFlagFilter.CompOperands.NotEqual \uc77c\uce58\ud558\uc9c0 \uc54a\uc74c ElementFlagFilter.CompOperands.LessThan \uc791\uc740 \uac83 ElementFlagFilter.CompOperands.LessOrEqual \uc791\uac70\ub098 \uac19\uc740 \uac83 ElementFlagFilter.CompOperands.GreaterThan \ud070 \uac83 ElementFlagFilter.CompOperands.GreaterOrEqual \ud06c\uac70\ub098 \uac19\uc740 \uac83 \uc81c\uacf5\ud558\ub294 bitwise \uc5f0\uc0b0\uc790\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. compare \uc5f0\uc0b0\uc790 \uc124\uba85 ElementFlagFilter.BitwiseOperands.AND AND \uc5f0\uc0b0 ElementFlagFilter.BitwiseOperands.OR OR \uc5f0\uc0b0 ElementFlagFilter.BitwiseOperands.XOR XOR \uc5f0\uc0b0","title":"Element Flag Filter \uac1d\uccb4"},{"location":"arcus-java-client/7.-btree-API/#elementflagfilter","text":"ElementFlagFilter \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. compare \uc5f0\uc0b0\uc790\uc640 compare \uac12\ub9cc\uc744 \uc9c0\uc815\ud558\uc5ec ElementFlagFilter \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. compare offset\ub294 \ub514\ud3f4\ud2b8\ub85c 0\uc744 \uac12\uc73c\ub85c \uac00\uc9c0\uba74, bitwise \uc5f0\uc0b0\uc758 \uc124\uc815\uc740 \uc5c6\ub294 \uc0c1\ud0dc\uac00 \ub41c\ub2e4. ElementFlagFilter(CompOperands compOperand, byte[] compValue) ElementFlagFilter \uac1d\uccb4\uc758 compare offset\uc744 \ubcc0\uacbd\ud558\uac70\ub098 bitwise \uc5f0\uc0b0 \uc124\uc815\uc744 \ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc544\ub798 \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. ElementFlagFilter setCompareOffset(int offset) ElementFlagFilter setBitOperand(BitWiseOperands bitOp, byte[] bitCompValue)","title":"ElementFlagFilter \uba54\uc18c\ub4dc"},{"location":"arcus-java-client/7.-btree-API/#elementflagfilter_1","text":"\uccab\uc9f8 \uc608\ub294 b+tree\uc5d0 \uc800\uc7a5\ub41c \uc804\uccb4 element\ub4e4\uc5d0\uc11c eflag \uac12\uc774 0x0102\uc640 \uc77c\uce58\ud558\ub294 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. ElementFlagFilter filter = new ElementFlagFilter(CompOperands.Equal, new byte[] { 1, 2 }); // (1) CollectionFuture<Integer> future = mc.asyncBopGetItemCount(KEY, MIN_BKEY, MAX_BKEY, filter); Integer count = future.get(); Eflag\uac00 0x0102\uc640 \uc77c\uce58 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\ub294 filter\ub97c \uc0dd\uc131\ud55c\ub2e4. compare offset\uc740 0\uc774 \ub418\uace0, compare length\ub294 2\uac00 \ub41c\ub2e4. \ub458\uc9f8 \uc608\ub294 b+tree\uc758 \ubaa8\ub4e0 element\ub4e4\uc5d0\uc11c eflag\uc758 \ub450 \ubc88\uc9f8 \ubc14\uc774\ud2b8\ub97c 0x01\uacfc AND \uc5f0\uc0b0\ud55c \uacb0\uacfc\uac00 0x01\uc778 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. ElementFlagFilter filter = new ElementFlagFilter(CompOperands.Equal, new byte[] { 1 }); // (1) filter.setBitOperand(BitWiseOperands.AND, new byte[] { 1 }); // (2) filter.setCompareOffset(1); // (3) CollectionFuture<Integer> future = mc.asyncBopGetItemCount(KEY, MIN_BKEY, MAX_BKEY, filter); Integer count = future.get(); Eflag\uac00 0x01\uc640 \uc77c\uce58 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\ub294 filter\ub97c \uc0dd\uc131\ud55c\ub2e4. Eflag\uc5d0 \ub300\ud55c compare \uc5f0\uc0b0 \uc218\ud589 \uc804\uc5d0 0x01\uacfc bitwise AND \uc5f0\uc0b0\ud558\uae30 \uc704\ud574 \uc124\uc815\ud55c\ub2e4. Eflag\uc758 \ub450 \ubc88\uc9f8 \ubc14\uc774\ud2b8\ubd80\ud130 filtering\ud558\uae30 \uc704\ud574 \uc124\uc815\ud55c\ub2e4. \ucc38\uace0\ub85c, \uc870\ud68c \uc870\uac74\uc5d0 filter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\ub824\uba74 filter \uac12\uc73c\ub85c ElementFlagFilter.DO_NOT_FILTER\ub97c \uc9c0\uc815\ud558\uba74 \ub41c\ub2e4. \uc14b\uc9f8 \uc608\ub294 b+tree\uc5d0\uc11c eflag\uac00 \uc124\uc815\ub418\uc9c0 \uc54a\uc740 \ubaa8\ub4e0 element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. Eflag\uac00 \uc9c0\uc815\ub418\uc9c0 \uc54a\uc740 element\ub97c \uc870\ud68c\ud558\ub824\uba74 eflag\uc758 \uccab \ubc88\uc9f8 \ud55c \ubc14\uc774\ud2b8\ub97c 0x00\uacfc bitwise AND\uc5f0\uc0b0\uc744 \ucde8\ud558\uace0 \uadf8 \uacb0\uacfc\uac00 0x00\uc774 \uc544\ub2cc element\ub97c \ucc3e\uc73c\uba74 \ub41c\ub2e4. eflag\ub97c \uac00\uc9c4 element\ub77c\uba74 \uccab \ubc88\uc7ac \ud55c \ubc14\uc774\ud2b8\ub97c 0x00\uacfc bitwise AND \uc5f0\uc0b0\uc744 \ucde8\ud588\uc744 \ub54c \ubb34\uc870\uac74 0x00\uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 bitwise\uc5f0\uc0b0 \uacb0\uacfc\uac00 0x00\uc774 \uc544\ub2cc \uac83\uc744 \uc870\ud68c\ud558\uba74 eflag\ub97c \uac16\uc9c0 \uc54a\uc740 element\ub97c \uc870\ud68c\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. ElementFlagFilter filter = new ElementFlagFilter(CompOperands.NotEqual, new byte[] { 0 }); // (1) filter.setBitOperand(BitWiseOperands.AND, new byte[] { 0 }); // (2) Map<Long, Object> map = mc.asyncBopGet(KEY, BKEY, BKEY + 100, 0, 100, false, false, filter).get(); // (3) Eflag\uac00 0x00\uc774 \uc544\ub2cc \uac83\ub4e4\uc744 \uc870\ud68c\ud558\ub294 filter\ub97c \uc0dd\uc131\ud55c\ub2e4. Filter\uac00 \ube44\uad50\ud560 eflag\ub294 element\uc5d0 \uc124\uc815\ub41c eflag\uc640 0x00\ub97c bitwise AND\uc5f0\uc0b0\ud55c \uac83\uc744 \uc0ac\uc6a9\ud55c\ub2e4. 1\uacfc 2\uc5d0\uc11c \uc0dd\uc131\ud55c filter\ub97c \uc0ac\uc6a9\ud558\uba74 eflag\uac00 \uc124\uc815\ub418\uc9c0 \uc54a\uc740 element\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"ElementFlagFilter \uc0ac\uc6a9 \uc608\uc81c"},{"location":"arcus-java-client/7.-btree-API/#elementmultiflagsfilter","text":"Eflag\uc5d0 \ub300\ud574 \uc544\ub798\uc640 \uac19\uc740 IN \uc5f0\uc0b0\uacfc NOT IN \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c filter\uc774\ub2e4. IN \uc5f0\uc0b0 : eflag \uac12\uc774 \uc5ec\ub7ec compare values \uc911 \ud558\ub098\uc640 \ub3d9\uc77c\ud55c \uc9c0\ub97c \uac80\uc0ac NOT IN \uc5f0\uc0b0 : eflags \uac12\uc774 \uc5ec\ub7ec compare values\uc640 \ubaa8\ub450 \ub2e4\ub978 \uc9c0\ub97c \uac80\uc0ac ElementMultiFlagsFilter\ub294 \uc5ec\ub7ec compare value\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uace0, \uc544\ub798 \ub450 \uac1c\uc758 compare \uc5f0\uc0b0\uc790\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - ElementFlagFilter.CompOperands.Equal - ElementFlagFilter.CompOperands.NotEqual ElementMultiFlagsFilter \uc0ac\uc6a9 \uc608\ub85c, \uc544\ub798\ub294 b+tree\uc758 \uc804\uccb4 element\ub4e4 \uc911\uc5d0 eflag\uc758 \uac12\uc774 0x0102 \ub610\ub294 0x0104\uc5d0 \uc77c\uce58\ud558\ub294 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. \uc989, IN \uc5f0\uc0b0\uc758 filtering\uc744 \uc218\ud589\ud55c\ub2e4. mentMultiFlagsFilter filter = new ElementMultiFlagsFilter(CompOperands.Equal); // (1) filter.addCompValue(new byte[] { 1, 2 }); // (2) filter.addCompValue(new byte[] { 1, 4 }); // (3) CollectionFuture<Integer> future = mc.asyncBopGetItemCount(KEY, MIN_BKEY, MAX_BKEY, filter); Integer count = future.get(); filter\ub97c \uc0dd\uc131\ud55c\ub2e4. \uc77c\uce58 \uc5ec\ubd80 \ud310\ub2e8\uc744 \uc704\ud55c \uac12 0x0102 \ub4f1\ub85d \uc77c\uce58 \uc5ec\ubd80 \ud310\ub2e8\uc744 \uc704\ud55c \uac12 0x0104 \ub4f1\ub85d ElementMultiFlagsFilter\ub85c \ucd5c\ub300 100\uac1c compare value\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc73c\uba70, asyncBopGet, asyncBopCount, asyncBopDelete, asyncBopSortMergeGet \uc5d0\uc11c\ub9cc \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4.","title":"ElementMultiFlagsFilter"},{"location":"arcus-java-client/7.-btree-API/#element-flag-update","text":"Eflag\uc758 \uc804\uccb4 \ub610\ub294 \ubd80\ubd84 \uac12\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \uc774\ub97c \uc704\ud55c ElementFlagUpdate \uc0dd\uc131\uc790 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ElementFlagUpdate(byte[] elementFlag) Eflag\uc758 \uc804\uccb4 \uac12\uc744 \uc0c8\ub85c\uc6b4 elementFlag\ub85c \uad50\uccb4\ud55c\ub2e4. ElementFlagUpdate(int elementFlagOffset, BitWiseOperands bitOp, byte[] elementFlag) Eflag\uc758 \ubd80\ubd84 \uac12\uc744 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c \uacb0\uacfc\ub85c \uad50\uccb4\ud55c\ub2e4. Eflag\uc5d0\uc11c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 \ubd80\ubd84 \uac12\uc758 offset\uacfc length\ub294 \uac01\uac01 elementFlagOffset\uacfc elementFlag \uac12\uc758 \uae38\uc774\ub85c \uacb0\uc815\ub41c\ub2e4. Eflag \uc804\uccb4 \uac12\uc744 \uad50\uccb4\ud558\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. byte[] flag = new byte[] { 1, 0, 1, 0 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null); Eflag \ubd80\ubd84 \uac12\uc744 \uad50\uccb4\ud558\ub294 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. int eFlagOffset = 1; BitWiseOperands bitOp = BitWiseOperands.AND; byte[] flag = new byte[] { 1 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(eFlagOffset, bitOp, flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null);","title":"Element Flag Update \uac1d\uccb4"},{"location":"arcus-java-client/7.-btree-API/#7-2-btree-item","text":"\uc0c8\ub85c\uc6b4 empty b+tree item\uc744 \uc0dd\uc131\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopCreate(String key, ElementValueType valueType, CollectionAttributes attributes) key: \uc0dd\uc131\ud560 b+tree item\uc758 key valueType: b+tree\uc5d0 \uc800\uc7a5\ud560 value\uc758 \uc720\ud615\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc544\ub798\uc758 \uc720\ud615\uc774 \uc788\ub2e4. ElementValueType.STRING ElementValueType.LONG ElementValueType.INTEGER ElementValueType.BOOLEAN ElementValueType.DATE ElementValueType.BYTE ElementValueType.FLOAT ElementValueType.DOUBLE ElementValueType.BYTEARRAY ElementValueType.OTHERS : for example, user defined class attributes: b+tree item\uc758 \uc18d\uc131\ub4e4\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.CREATED \uc0dd\uc131 \uc131\uacf5 False CollectionResponse.EXISTS \ub3d9\uc77c key\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 B+tree item\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Sample:EmptyBTree\"; CollectionFuture<Boolean> future = null; CollectionAttributes attribute = new CollectionAttributes(); // (1) attribute.setExpireTime(60); // (1) try { future = client.asyncBopCreate(key, ElementValueType.STRING, attribute); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (4) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } B+tree\uc758 expire time\uc744 60\ucd08\ub85c \uc9c0\uc815\ud558\uc600\ub2e4. CollectionAttributes\uc758 \uc790\uc138\ud55c \uc0ac\uc6a9\ubc29\ubc95\uc740 [[Manual:Java_Client/Attribute_\uc0ac\uc6a9|Attribute_\uc0ac\uc6a9]] \uc7a5\uc5d0\uc11c \uc790\uc138\ud788 \ub2e4\ub8ec\ub2e4. Empty b+tree\ub97c \uc0dd\uc131\ud560 \ub54c\uc5d0\ub294 b+tree\uc5d0 \uc5b4\ub5a4 \ud0c0\uc785\uc758 element\ub97c \uc800\uc7a5\ud560 \uac83\uc778\uc9c0\ub97c \ubbf8\ub9ac \uc9c0\uc815\ud574 \ub450\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub807\uac8c \ud574\uc57c \ud558\ub294 \uc774\uc720\ub294 Java client\uc5d0\uc11c value\ub97c encoding/decoding\ud558\ub294 \uba54\ucee4\ub2c8\uc998 \ub54c\ubb38\uc774\ub2e4. \uc704 \uc608\uc81c\ub294 String \ud0c0\uc785\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 empty b+tree\ub97c \uc0dd\uc131\ud55c\ub2e4. \ub9cc\uc57d\uc5d0 empty b+tree\ub97c \uc0dd\uc131\ud560 \ub54c \uc9c0\uc815\ud55c element type\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uac12\uc744 b+tree\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uba74 \uc800\uc7a5\uc740 \uc131\uacf5\ud558\uaca0\uc9c0\ub9cc \uc870\ud68c\ud560 \ub54c \uc5c9\ub6b1\ud55c \uac12\uc774 \uc870\ud68c\ub41c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc0dd\uc131\uc5d0 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0dd\uc131 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc0dd\uc131 \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4.","title":"7-2. B+Tree Item \uc0dd\uc131"},{"location":"arcus-java-client/7.-btree-API/#7-3-btree-element","text":"B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. \uc804\uc790\ub294 long \ud0c0\uc785\uc758 bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array \ud0c0\uc785\uc758 bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopInsert(String key, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) CollectionFuture<Boolean> asyncBopInsert(String key, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 b+tree\uc758 key bkey: \uc0bd\uc785\ud560 element\uc758 bkey(b+tree key) eflag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag), that is optional. value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED B+tree collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.ELEMENT_EXISTS \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 False CollectionResponse.OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 bkey\uac00 b+tree trimmed \uc601\uc5ed\uc5d0 \ud574\ub2f9\ub428 B+tree element\ub97c \uc0bd\uc785\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTreeKey\"; long bkey = 1L; String value = \"This is a value.\"; byte[] eflag = new byte[] { 1, 1, 1, 1 }; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncBopInsert(key, bkey, eflag, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 b+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate\uc18d\uc131\uc744 \uac00\uc9c4 b+tree\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc800\uc7a5\ud55c\ub2e4. \ub9cc\uc57d key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud669\uc5d0\uc11c attributesForCreate\uac12\uc774 null\uc774\uba74 insert\uc5d0 \uc2e4\ud328\ud55c\ub2e4. \uc704 \uc608\uc81c\ub294 \ub514\ud3f4\ud2b8 CollectionAttributes\ub97c \uc0ac\uc6a9\ud558\uba70, \uae30\ubcf8 expire time\uc740 0\uc73c\ub85c \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. Insert\uac00 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Insert\uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 future.getOperationStatus().getResponse()\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc544\ucee4\uc2a4\uc5d0\uc11c B+tree\ub294 \uac00\uc9c8 \uc218 \uc788\ub294 \ucd5c\ub300 \uc5d8\ub9ac\uba3c\ud2b8 \uac1c\uc218\uac00 \uc81c\ud55c\ub418\uc5b4 \uc788\ub2e4. \uc774 \uc81c\ud55c \ubc94\uc704 \uc548\uc5d0\uc11c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 B+tree \ud06c\uae30\ub97c \uc9c0\uc815\ud560 \uc218\ub3c4 \uc788\ub294\ub370(maxcount), \uc774\ub7ec\ud55c \uc81c\uc57d\uc870\uac74 \ub54c\ubb38\uc5d0 \uac00\ub4dd \ucc2c B+tree\uc5d0 \uc0c8\ub85c\uc6b4 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825\ud558\uba74 \uc124\uc815\uc5d0 \ub530\ub77c \uae30\uc874\uc758 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc0ad\uc81c\ub420 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c \uc554\ubb35\uc801\uc73c\ub85c \uc0ad\uc81c\ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc785\ub825(insert, upsert)\uc2dc\uc810\uc5d0 \ud68d\ub4dd\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. BTreeStoreAndGetFuture<Boolean, Object> asyncBopInsertAndGetTrimmed(String key, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) BTreeStoreAndGetFuture<Boolean, Object> asyncBopInsertAndGetTrimmed(String key, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) B+tree\uc5d0 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub97c insert \ud558\uac70\ub098 upsert \ud560 \ub54c \uc0ad\uc81c(trim) \ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc788\uc744 \uacbd\uc6b0 \uadf8 \uac12\uc744 \uc870\ud68c\ud55c\ub2e4. key: b+tree item\uc758 key bkey: \uc0bd\uc785\ud560 element\uc758 bkey(b+tree key) bkey\ub294 element\uc758 key\ub85c long\ub610\ub294 byte[1~31] \uc720\ud615\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. 0\uc774\uc0c1\uc758 \uac12\uc73c\ub85c\ub9cc \uc9c0\uc815\ud560 \uc218 \uc788\uace0. key\uac00 \uc874\uc7ac\ud558\ub294 \uc0c1\ud0dc\uc5d0\uc11c bkey\uc640 value\uac00 \uc800\uc7a5\ub41c\ub2e4 \ud558\ub354\ub77c\ub3c4 key\uc5d0 \uc124\uc815\ub41c expire time\uc740 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. eflag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag) value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED B+tree collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 True CollectionResponse.REPLACED Element\uac00 \uad50\uccb4\ub428 True CollectionResponse.TRIMMED element\uac00 \uc0bd\uc785\ub418\uace0, \uc0bd\uc785\uc73c\ub85c trimmed element\uac00 \uc870\ud68c\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.ELEMENT_EXISTS \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc774\ubbf8 \uc874\uc7ac\ud568 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 False CollectionResponse.OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 bkey\uac00 b+tree trimmed \uc601\uc5ed\uc5d0 \ud574\ub2f9\ub428 future.getElement()\uac1d\uccb4\ub97c \ud1b5\ud574 \uc0ad\uc81c(trim) \ub418\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 future.getElement() \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getValue() Object element\uc758 \uac12 getByteArrayBkey() byte[] element bkey \uac12(byte[]) getLongBkey() long element bkey \uac12(long) isByteArrayBkey() boolean element bkey byte array \uc5ec\ubd80 getFlag() byte[] element flag\uac12(byte[]) B+tree\uc5d0 element \uc0bd\uc785\ud558\uba74\uc11c \uc554\ubb35\uc801\uc73c\ub85c trim\ub418\ub294 element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. private String key = \"BopStoreAndGetTest\"; private long[] longBkeys = { 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, public void testInsertAndGetTrimmedLongBKey() throws Exception { // insert test data CollectionAttributes attrs = new CollectionAttributes(); attrs.setMaxCount(10); attrs.setOverflowAction(CollectionOverflowAction.smallest_trim); for (long each : longBkeys) { mc.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // cause an overflow assertTrue(mc.asyncBopInsert(key, 1000, null, \"val\", null).get()); // expecting that bkey 10 was trimmed out and the first bkey is 11 Map<Integer, Element<Object>> posMap = mc.asyncBopGetByPosition(key, BTreeOrder.ASC, 0).get(); assertNotNull(posMap); assertNotNull(posMap.get(0)); // the first element assertEquals(11L, posMap.get(0).getLongBkey()); // then cause an overflow again and get a trimmed object // it would be a bkey(11) BTreeStoreAndGetFuture<Boolean, Object> f = mc.asyncBopInsertAndGetTrimmed(key, 2000, null, \"val\", null); boolean succeeded = f.get(); Element<Object> element = f.getElement(); assertTrue(succeeded); assertNotNull(element); assertEquals(11L, element.getLongBkey()); System.out.println(\"The insertion was succeeded and an element \" + f.getElement() + \" was trimmed out\"); // finally check the first bkey which is expected to be 12 posMap = mc.asyncBopGetByPosition(key, BTreeOrder.ASC, 0).get(); assertNotNull(posMap); assertNotNull(posMap.get(0)); // the first element assertEquals(12L, posMap.get(0).getLongBkey()); }","title":"7-3. B+Tree Element \uc0bd\uc785"},{"location":"arcus-java-client/7.-btree-API/#7-4-btree-element-upsert","text":"B+Tree\uc5d0 \ud558\ub098\uc758 element\ub97c upsert\ud558\ub294 \ud568\uc218\ub4e4\uc774\ub2e4. Upsert \uc5f0\uc0b0\uc740 \ud574\ub2f9 element\uac00 \uc5c6\uc73c\uba74 insert\ud558\uace0, \uc788\uc73c\uba74 update\ud558\ub294 \uc5f0\uc0b0\uc774\ub2e4. \uc804\uc790\ub294 long bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopUpsert(String key, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) CollectionFuture<Boolean> asyncBopUpsert(String key, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) key: upsert \ub300\uc0c1 b+tree\uc758 key bkey: upsert\ud560 element\uc758 bkey(b+tree key) eflag: upsert\ud560 element\uc758 eflag(element flag), that is optional value: upsert\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: upsert \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.STORED Element\ub9cc \uc0bd\uc785\ud568 True CollectionResponse.CREATED_STORED B+tree collection \uc0dd\uc131\ud558\uace0 element\ub97c \uc0bd\uc785\ud568 True CollectionResponse.REPLACED Element\uac00 \uad50\uccb4\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 False CollectionResponse.OUT_OF_RANGE \uc8fc\uc5b4\uc9c4 bkey\uac00 b+tree trimmed \uc601\uc5ed\uc5d0 \ud574\ub2f9\ub428 B+tree element\ub97c upsert\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTreeKey\"; long bkey = 1L; String value = \"This is a value.\"; byte[] eflag = new byte[] { 1, 1, 1, 1 }; CollectionAttributes attributesForCreate = new CollectionAttributes(); CollectionFuture<Boolean> future = null; try { future = client.asyncBopUpsert(key, bkey, eflag, value, attributesForCreate); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } B+tree\uc5d0 element\ub97c update\ub610\ub294 insert\ud55c\ub2e4. attributesForCreate\uac12\uc774 null\uc774 \uc544\ub2c8\uba74 b+tree\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c attributesForCreate\uc18d\uc131\uc744 \uac00\uc9c4 b+tree\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c \ub2e4\uc74c element\ub97c \uc800\uc7a5\ud55c\ub2e4. \ub9cc\uc57d key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud669\uc5d0\uc11c attributesForCreate\uac12\uc774 null\uc774\uba74 insert\uc5d0 \uc2e4\ud328\ud55c\ub2e4. Key\uac00 \uc0c8\ub85c \uc0dd\uc131\ub420 \ub54c \uc9c0\uc815\ud558\ub294 attributesForCreate\uc5d0 expire time\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74 \uae30\ubcf8\uac12\uc778 0\uc73c\ub85c \uc124\uc815\ub418\uba70 \uc774\ub294 b+tree\uac00 \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \ub73b\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. Upsert\uac00 \uc131\uacf5\ud558\uba74 future\ub294 true\ub97c \ubc18\ud658\ud55c\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 upsert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Upsert \uacb0\uacfc\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 future.getOperationStatus().getResponse()\ub97c \uc0ac\uc6a9\ud55c\ub2e4.","title":"7-4. B+Tree Element Upsert"},{"location":"arcus-java-client/7.-btree-API/#7-5-btree-element","text":"B+Tree\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. Element\uc758 eflag \uadf8\ub9ac\uace0/\ub610\ub294 value\ub97c \ubcc0\uacbd\ud55c\ub2e4. \uc804\uc790\ub294 long bkey\ub97c, \ud6c4\uc790\ub294 \ucd5c\ub300 31 \ud06c\uae30\uc758 byte array bkey\ub97c \uc0ac\uc6a9\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopUpdate(String key, long bkey, ElementFlagUpdate eFlagUpdate, Object value) CollectionFuture<Boolean> asyncBopUpdate(String key, byte[] bkey, ElementFlagUpdate eFlagUpdate, Object value) key: \ubcc0\uacbd \ub300\uc0c1 b+tree\uc758 key bkey: \ubcc0\uacbd \ub300\uc0c1 element\uc758 bkey(b+tree key) eFlagUpate: element\uc758 eflag \ubcc0\uacbd\ud560 \ub0b4\uc6a9 eflag\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc73c\ub824\uba74 null\uc744 \uc9c0\uc815\ud55c\ub2e4. eflag\ub97c \uc0ad\uc81c\ud558\ub824\uba74 ElementFlagUpdate.RESET_FLAG\ub97c \uc9c0\uc815\ud55c\ub2e4. value: element\uc758 new value value\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc73c\ub824\uba74 null\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.UPDATED Element\uac00 \ubcc0\uacbd\ub428 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 False CollectionResponse.EFLAG_MISMATCH \uc8fc\uc5b4\uc9c4 eFlagUpate\uac00 \ud574\ub2f9 element\uc758 eflag \ub370\uc774\ud130\uc640 \ubd88\uc77c\uce58 \ud2b9\uc815 element\uc758 eflag\ub294 \uadf8\ub300\ub85c \ub450\uace0 value\ub9cc \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, null, value); \ud2b9\uc815 element\uc758 eflag\ub294 0x01000100\ub85c \ubcc0\uacbd\ud558\uace0 value\ub294 \uadf8\ub300\ub85c \ub454\ub2e4. byte[] flag = new byte[] { 1, 0, 1, 0 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null); \ud2b9\uc815 element\uc758 eflag\ub97c \uc0ad\uc81c\ud558\uace0 value\ub294 \uadf8\ub300\ub85c \ub454\ub2e4. CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, ElementFlagUpdate.RESET_FLAG, null); \ud2b9\uc815 element\uc758 elfag\uc5d0\uc11c \ud2b9\uc815 byte\ub97c bitwise \uc5f0\uc0b0\ud558\uc5ec \ubcc0\uacbd\ud558\ub294 \uc608\uc81c\uc774\ub2e4. \uc544\ub798 \uc608\uc81c\ub294 eflag\uc758 \ub450\ubc88\uc9f8 byte\ub97c 0x01\uacfc bitwise AND \uc5f0\uc0b0\ud55c \uacb0\uacfc\ub85c \ubcc0\uacbd\ud55c\ub2e4. \ub9cc\uc57d, \ud574\ub2f9 element\uc5d0 eflag\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 offset\uc774 \uac00\ub9ac\ud0a4\ub294 byte\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ubcc0\uacbd \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud55c\ub2e4. int eFlagOffset = 1; BitWiseOperands bitOp = BitWiseOperands.AND; byte[] flag = new byte[] { 1 }; ElementFlagUpdate eflagUpdate = new ElementFlagUpdate(eFlagOffset, bitOp, flag); CollectionFuture<Boolean> future = mc.asyncBopUpdate(KEY, BKEY, eflagUpdate, null); Element \uc218\uc815\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc218\ud589 \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"7-5. B+Tree Element \ubcc0\uacbd"},{"location":"arcus-java-client/7.-btree-API/#7-6-btree-element","text":"B+tree\uc5d0\uc11c element\ub97c \uc0ad\uc81c\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c0\uba74\uc11c eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopDelete(String key, long bkey, ElementFlagFilter eFlagFilter, boolean dropIfEmpty) CollectionFuture<Boolean> asyncBopDelete(String key, byte[] bkey, ElementFlagFilter eFlagFilter, boolean dropIfEmpty) \ub458\uc9f8, B+tree\uc5d0\uc11c from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 elements\ub97c \ud0d0\uc0c9\ud558\uba74\uc11c eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\ub97c \uc0ad\uc81c\ud55c\ub2e4. count\uac00 0\uc774\uba74 bkey range\uc5d0\uc11c eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ubaa8\ub4e0 element\ub97c \uc0ad\uc81c\ud558\uace0 0\ubcf4\ub2e4 \ud06c\uba74, count \uac1c\uc758 elements\ub9cc \uc0ad\uc81c\ud55c\ub2e4. CollectionFuture<Boolean> asyncBopDelete(String key, long from, long to, ElementFlagFilter eFlagFilter, int count, boolean dropIfEmpty) CollectionFuture<Boolean> asyncBopDelete(String key, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int count, boolean dropIfEmpty) key: \uc0ad\uc81c \ub300\uc0c1 b+tree\uc758 key bkey \ub610\ub294 \\<from, to>: \uc0ad\uc81c\ud560 element\uc758 bkey(b+tree key) \ub610\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 count: \uc0ad\uc81c\ud560 element \uac1c\uc218\ub97c \uc9c0\uc815, 0\uc774\uba74 \uc870\uac74 \ub9cc\uc871\ud558\ub294 \ubaa8\ub4e0 element \uc0ad\uc81c dropIfEmpty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub418\uba74, \uadf8 b+tree \uc790\uccb4\ub97c \uc0ad\uc81c\ud560 \uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 True CollectionResponse.DELETED Element\ub9cc \uc0ad\uc81c\ud568 True CollectionResponse.DELETED_DROPPED Element \uc0ad\uc81c\ud558\uace0 B+tree \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud568 False CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) False CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c False CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 False CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 \ub2e4\uc74c\uc740 b+tree\uc5d0\uc11c bkey\uac00 1\uc778 element\ub97c \uc0ad\uc81c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Prefix:BTreeKey\"; long bkey = 1L; boolean dropIfEmpty = true; CollectionFuture<Boolean> future = null; try { future = client.asyncBopDelete(key, bkey, ElementFlagFilter.DO_NOT_FILTER, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) System.out.println(response); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } B+tree\uc5d0\uc11c bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. dropIfEmpty\uac12\uc774 true\uc774\uba74 element\ub97c \uc0ad\uc81c\ud558\uace0 b+tree\uac00 \ube44\uc5b4\uc788\uac8c \ub418\uc5c8\uc744 \ub54c b+tree\ub3c4 \ud568\uaed8 \uc0ad\uc81c\ud55c\ub2e4. \uc608\uc81c\uc5d0\uc11c filter\uc870\uac74\uc740 \u201cfilter\ud558\uc9c0 \uc54a\uc74c\u201d\uc73c\ub85c \uc9c0\uc815\ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4 \uc0ad\uc81c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4.","title":"7-6. B+Tree Element \uc0ad\uc81c"},{"location":"arcus-java-client/7.-btree-API/#7-7-btree-element","text":"B+tree element\uc758 \uac12\uc744 \uc99d\uac00/\uac10\uc18c \uc2dc\ud0a4\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Element\uc758 \uac12\uc740 String \ud615\uc758 \uc22b\uc790\uc774\uc5b4\uc57c \ud55c\ub2e4. CollectionFuture<Long> asyncBopIncr(String key, long bkey, int by) CollectionFuture<Long> asyncBopDecr(String key, long bkey, int by) CollectionFuture<Long> asyncBopIncr(String key, Byte[] bkey, int by) CollectionFuture<Long> asyncBopDecr(String key, Byte[] bkey, int by) CollectionFuture<Long> asyncBopIncr(String key, long subkey, int by, long initial, byte[] eFlag); CollectionFuture<Long> asyncBopDecr(String key, long subkey, int by, long initial, byte[] eFlag); CollectionFuture<Long> asyncBopIncr(String key, byte[] subkey, int by, long initial, byte[] eFlag); CollectionFuture<Long> asyncBopDecr(String key, byte[] subkey, int by, long initial, byte[] eFlag); key: b+tree item\uc758 key bkey: \ub300\uc0c1 element\uc758 bkey by: \uc99d\uac10\uc2dc\ud0ac \uac12 (1 \uc774\uc0c1\uc758 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d \uac10\uc18c\uc2dc\ud0ac \uac12\uc774 element \uac12\ubcf4\ub2e4 \ud06c\uba74, \uac10\uc18c \ud6c4\uc758 \uacb0\uacfc\uac12\uc740 0\uc73c\ub85c \uc800\uc7a5\ub41c\ub2e4) \uc544\ub798 \uac12\ub4e4\uc740 \ub300\uc0c1 element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \ub54c \uc0c8\ub86d\uac8c \uc0bd\uc785\ub418\ub294 \uac12\ub4e4\uc774\ub2e4. (optional) - initial: \uc0bd\uc785\ud560 element\uc758 value (0 \uc774\uc0c1\uc758 \uac12[64bit unsigned integer]\uc774\uc5b4\uc57c \ud55c\ub2e4) - eFlag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag) \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 element \uac12 CollectionResponse.END \uc99d\uac10 \uc815\uc0c1 \uc218\ud589 null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) null CollectionResponse.OVERFLOWED \ucd5c\ub300 \uc800\uc7a5\uac00\ub2a5\ud55c \uac1c\uc218\ub9cc\ud07c element\ub4e4\uc774 \uc874\uc7ac\ud568 null CollectionResponse.OUT_OF_RANGE \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c B+tree element \uac12\uc744 \uc99d\uac00\uc2dc\ud0a4\ub294 \uc608\uc81c\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. String key = \"Prefix:BTree\"; long bkey = 0L; CollectionFuture<Long> future = null; try { future = mc.asyncBopIncr(key, bkey, (int) 2); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Long result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc774 \uc608\uc81c\ub294 b+tree\uc5d0 \uc800\uc7a5\ub41c element\uc758 \uac12\uc744 2 \ub9cc\ud07c increment \ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Element increment \ud6c4 \uc870\ud68c\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"7-7. B+tree Element \uac12\uc758 \uc99d\uac10"},{"location":"arcus-java-client/7.-btree-API/#7-8-btree-element","text":"B+tree\uc5d0\uc11c from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 element\ub4e4 \uc911 eFlagFilter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Integer> asyncBopGetItemCount(String key, long from, long to, ElementFlagFilter eFlagFilter) CollectionFuture<Integer> asyncBopGetItemCount(String key, byte[] from, byte[] to, ElementFlagFilter eFlagFilter) key: b+tree item\uc758 key \\<from, to>: element \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 element \uac1c\uc218 CollectionResponse.END Element count\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 set\uc774 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) B+tree element \uac1c\uc218\ub97c \ud655\uc778\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTree\"; long bkeyFrom = 0L; long bkeyTo = 100L; CollectionFuture<Integer> future = null; try { future = mc.asyncBopGetItemCount(key, bkeyFrom, bkeyTo, ElementFlagFilter.DO_NOT_FILTER); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Integer result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(future.getOperationStatus().getResponse()); // (3) } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc774 \uc608\uc81c\ub294 b+ tree\uc5d0 \uc800\uc7a5\ub41c element\uc911 bkey\uac00 bkeyFrom\ubd80\ud130 bkeyTo\uae4c\uc9c0 \uc778 element\uc758 \uac1c\uc218\ub97c \uc870\ud68c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. element\uac1c\uc218 \uc870\ud68c\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"7-8. B+Tree Element \uac1c\uc218 \uacc4\uc0b0"},{"location":"arcus-java-client/7.-btree-API/#7-9-btree-element","text":"B+tree element\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c0\uace0 eFlagFilter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<Long, Element<Object>>> asyncBopGet(String key, long bkey, ElementFlagFilter eFlagFilter, boolean withDelete, Boolean dropIfEmpty) CollectionFuture<Map<ByteArrayBKey, Element<Object>>> asyncBopGet(String key, byte[] bkey, ElementFlagFilter eFlagFilter, boolean withDelete, Boolean dropIfEmpty) \ub458\uc9f8, B+tree\uc5d0\uc11c from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 elements\ub97c \ud0d0\uc0c9\ud558\uba74\uc11c eFlagFilter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc911 offset \ubc88\uc9f8 element\ubd80\ud130 count\uac1c\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<Long, Element<Object>>> asyncBopGet(String key, long from, long to, ElementFlagFilter eFlagFilter, int offset, int count, boolean withDelete, boolean dropIfEmpty) CollectionFuture<Map<ByteArrayBKey, Element<Object>>> asyncBopGet(String key, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int offset, int count, boolean withDelete, Boolean dropIfEmpty) key: b+tree item\uc758 key bkey \ub610\ub294 \\<from, to>: element \uc870\ud68c \ub300\uc0c1\uc774 \ub418\ub294 bkey \ub610\ub294 \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 withDelete: element \uc870\ud68c\uc640 \ud568\uaed8 \uadf8 element\ub97c \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 dropIfEmpty: element \uc0ad\uc81c\ub85c empty b+tree\uac00 \ub418\uba74, \uadf8 b+tree \uc790\uccb4\ub3c4 \uc0ad\uc81c\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub9cc \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc5c6\uc74c not null CollectionResponse.TRIMMED Element\ub9cc \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c not null CollectionResponse.DELETED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc not null CollectionResponse.DELETED_DROPPED Element\ub97c \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \ub2e4\uc74c b+tree\ub97c drop\ud55c \uc0c1\ud0dc null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree \uc601\uc5ed \uc5c6\uc74c null CollectionResponse.OUT_OF_RANGE \uc870\ud68c\ub41c element\uac00 \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) \uacb0\uacfc\ub85c \ubc18\ud658\ub41c result(Map\\<Long, Element\\<Object>>) \uac1d\uccb4\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 result \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() Long btree\ub0b4\uc758 position getValue().getValue() Object element\uc758 \uac12 getValue().getByteArrayBkey() byte[] element bkey \uac12(byte[]) getValue().getLongBkey() long element bkey \uac12long) getValue().isByteArrayBkey() boolean element bkey \uac12 byte array \uc5ec\ubd80 getValue().getFlag() byte[] element flag \uac12(byte[]) B+tree element\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"Prefix:BTreeKey\"; long from = 1L; long to = 6L; int offset = 2; int count = 3; boolean withDelete = false; boolean dropIfEmpty = false; ElementFlagFilter filter = new ElementFlagFilter(CompOperands.Equal, new byte[] { 1, 1 }); CollectionFuture<Map<Long, Element<Object>>> future = null; try { future = client.asyncBopGet(key, from, to, filter, offset, count, withDelete, dropIfEmpty); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Long, Element<Object>> result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) System.out.println(result); CollectionResponse response = future.getOperationStatus().getResponse(); // (3) if (response.equals(CollectionResponse.NOT_FOUND)) { System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.(Key\uc5d0 \uc800\uc7a5\ub41c B+ tree\uac00 \uc5c6\uc74c.\"); } else if (response.equals(CollectionResponse.NOT_FOUND_ELEMENT)) { System.out.println(\"Key\uc5d0 B+ tree\ub294 \uc874\uc7ac\ud558\uc9c0\ub9cc \uc800\uc7a5\ub41c \uac12 \uc911 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc5c6\uc74c.\"); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } bkey\uac00 1\ubd80\ud130 6\uc0ac\uc774\uc5d0 \uc788\uace0 filter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub4e4 \uc911\uc5d0\uc11c 3\ubc88\uc9f8 \uc704\uce58\ud558\ub294 \uac12\ubd80\ud130 3\uac1c\ub97c \uc870\ud68c\ud55c\ub2e4. \uc774 \uc608\uc81c\uc5d0\uc11c eflag filter \uc870\uac74\uc740 eflag \uac12\uc774 0x0101\uacfc \uac19\uc740\uc9c0\ub97c \uac80\uc0ac\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubc18\ud658\ub418\ub294 Map \uc778\ud130\ud398\uc774\uc2a4\uc758 \uad6c\ud604\uccb4\ub294 TreeMap\uc774\uba70, \uadf8 \uacb0\uacfc\ub294 \ub2e4\uc74c \uc911\uc758 \ud558\ub098\uc774\ub2e4. key \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c : null \ubc18\ud658 key \uc874\uc7ac\ud558\uc9c0\ub9cc \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc5c6\uc74c: empty map \ubc18\ud658 key \uc874\uc7ac\ud558\uace0 \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc788\uc74c: non-empty map \ubc18\ud658 \uc870\ud68c \uacb0\uacfc\uc5d0 \ub300\ud55c \uc0c1\uc138 \uc815\ubcf4\ub294 future.getOperationStatus().getResponse()\uc73c\ub85c \ud655\uc778\ud55c\ub2e4.","title":"7-9. B+Tree Element \uc870\ud68c"},{"location":"arcus-java-client/7.-btree-API/#7-10-btree-element","text":"B+tree\uc5d0 \uc5ec\ub7ec element\ub97c \ud55c\ubc88\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\ub294 \ub450 \uc720\ud615\uc774 \uc788\ub2e4. \uccab\uc9f8, \ud558\ub098\uc758 key\uac00 \uac00\ub9ac\ud0a4\ub294 b+tree\uc5d0 \ub2e4\uc218\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncBopPipedInsertBulk(String key, List<Element<Object>> elements, CollectionAttributes attributesForCreate) CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncBopPipedInsertBulk(String key, Map<Long, Object> elements, CollectionAttributes attributesForCreate) key: \uc0bd\uc785 \ub300\uc0c1 b+tree\uc758 key elements: \uc0bd\uc785\ud560 element\ub4e4 List\\<Element\\<Object>> \uc720\ud615 Map\\<Long, Object> \uc720\ud615 attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ub458\uc9f8, \uc5ec\ub7ec key\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 b+tree\ub4e4\uc5d0 \uac01\uac01 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 \ud568\uc218\uc774\ub2e4. Future<Map<String, CollectionOperationStatus>> asyncBopInsertBulk(List<String> keyList, long bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) Future<Map<String, CollectionOperationStatus>> asyncBopInsertBulk(List<String> keyList, byte[] bkey, byte[] eFlag, Object value, CollectionAttributes attributesForCreate) keyList: \uc0bd\uc785 \ub300\uc0c1 b+tree\ub4e4\uc758 key list bkey: \uc0bd\uc785\ud560 element\uc758 bkey(b+tree key) eflag: \uc0bd\uc785\ud560 element\uc758 eflag(element flag) value: \uc0bd\uc785\ud560 element\uc758 value attributesForCreate: \ub300\uc0c1 b+tree\uac00 \uc5c6\uc744 \uc2dc, \ub3d9\uc791\uc744 \uc9c0\uc815\ud55c\ub2e4. null: element \uc0bd\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4. attributes: \uc8fc\uc5b4\uc9c4 attributes\ub97c \uac00\uc9c4 empty b+tree item \uc0dd\uc131 \ud6c4\uc5d0 element \uc0bd\uc785\ud55c\ub2e4. \ud558\ub098\uc758 b+tree\uc5d0 \uc5ec\ub7ec \uac1c\uc758 elements\uc744 bulk insert\ud558\uace0 \uac01\uac01\uc758 element\uc5d0 \ub300\ud574 insert \uacb0\uacfc\ub97c \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. String key = \"Sample:BTreeBulk\"; List<Element<Object>> elements = new ArrayList<Element<Object>>(); elements.add(new Element<Object>(1L, \"VALUE1\", new byte[] { 1, 1 })); elements.add(new Element<Object>(2L, \"VALUE2\", new byte[] { 1, 1 })); elements.add(new Element<Object>(3L, \"VALUE3\", new byte[] { 1, 1 })); boolean createKeyIfNotExists = true; if (elements.size() > mc.getMaxPipedItemCount()) { // (1) System.out.println(\"insert \ud560 \uc544\uc774\ud15c \uac1c\uc218\ub294 mc.getMaxPipedItemCount\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\"); return; } CollectionFuture<Map<Integer, CollectionOperationStatus>> future = null; try { future = mc.asyncBopPipedInsertBulk(key, elements, new CollectionAttributes()); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Map<Integer, CollectionOperationStatus> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) if (!result.isEmpty()) { // (4) System.out.println(\"\uc77c\ubd80 item\uc774 insert \uc2e4\ud328 \ud558\uc600\uc74c.\"); for (Map.Entry<Integer, CollectionOperationStatus> entry : result.entrySet()) { System.out.print(\"\uc2e4\ud328\ud55c \uc544\uc774\ud15c=\" + elements.get(entry.getKey())); System.out.println(\", \uc2e4\ud328\uc6d0\uc778=\" + entry.getValue().getResponse()); } } else { System.out.println(\"\ubaa8\ub450 insert \uc131\uacf5\ud568.\"); } } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \ud55c\uaebc\ubc88\uc5d0 insert\ud560 \uc544\uc774\ud15c\uc740 client.getMaxPipedItemCount()\uac1c\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4. (\uae30\ubcf8\uac12\uc740 500\uac1c \uc774\ub2e4.) \ub9cc\uc57d \uac1c\uc218\ub97c \ucd08\uacfc\ud558\uba74 IllegalArguementException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uc5d0 \uc800\uc7a5\ub41c b+ tree\uc5d0 bulkData\ub97c \ud55c\uaebc\ubc88\uc5d0 insert\ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ub2f4\uc740 future\uac1d\uccb4\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 future\ub85c\ubd80\ud130 \uac01 \uc544\uc774\ud15c\uc758 insert\uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 attributesForCreate\uac12\uc744 \uc9c0\uc815\ud558\uc5ec bulk insert\ud558\uae30 \uc804\uc5d0 key\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\ud558\uace0 element\ub97c insert\ub418\ub3c4\ub85d \ud558\uc600\ub2e4. delete timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \ubaa8\ub4e0 \uc544\uc774\ud15c\uc758 insert \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \ubaa8\ub4e0 \uc544\uc774\ud15c\uc774 insert\uc5d0 \uc131\uacf5\ud558\uba74 empty map\uc774 \ubc18\ud658\ub41c\ub2e4. \ubc18\ud658\ub41c Map\uc758 Key= insert\ud55c \uac12(bulkData)\ub97c iteration\ud588\uc744 \ub54c\uc758 index\uac12. \ubc18\ud658\ub41c Map\uc758 Value= insert\uc2e4\ud328\uc0ac\uc720 \uc77c\ubd80 \uc2e4\ud328\ud55c \uc544\uc774\ud15c\uc758 \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\ub824\uba74 insert\ud560 \ub54c \uc0ac\uc6a9\ub41c \uac12(bulkData)\uc758 iteration \uc21c\uc11c\uc5d0 \ub530\ub77c \uacb0\uacfc Map\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4. Future\ub85c\ubd80\ud130 \uc5bb\uc740 Map\uc758 Key\uac00 \uc785\ub825\ub41c \uac12(bulkData)\uc758 index\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc2e4\ud328 \uc6d0\uc778\uc744 \uc870\ud68c\ud558\uba74 \ub41c\ub2e4.","title":"7-10. B+Tree Element \uc77c\uad04 \uc0bd\uc785"},{"location":"arcus-java-client/7.-btree-API/#7-11-btree-element","text":"B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 elements\uc5d0 \ud574\ub2f9\ud558\ub294 \ubaa8\ub4e0 element\uc758 value \uadf8\ub9ac\uace0/\ub610\ub294 element flag\ub97c \uc77c\uad04 \ubcc0\uacbd\ud55c\ub2e4. CollectionFuture<Map<Integer, CollectionOperationStatus>> asyncBopPipedUpdateBulk(String key, List<Element<Object>> elements) key: \ubcc0\uacbd \ub300\uc0c1 b+tree\uc758 key elements: \ubcc0\uacbd \ub300\uc0c1 elements\uc5d0 \ub300\ud574 bkey\uc640 eFlagUpate, new value\ub97c \uac00\uc9c4\ub2e4.","title":"7-.11. B+Tree Element \uc77c\uad04 \ubcc0\uacbd"},{"location":"arcus-java-client/7.-btree-API/#7-12-btree-element","text":"\ub2e4\uc218\uc758 b+tree\ub4e4 \uac01\uac01\uc5d0 \ub300\ud574 from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c4 elements\ub97c \ud0d0\uc0c9\ud558\uba74\uc11c, eFlagFilter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uc911 offset \uc704\uce58\ubd80\ud130 count \uac1c\uc218\ub9cc\ud07c \uc870\ud68c\ud55c\ub2e4. CollectionFuture<Map<String, BTreeGetResult<Long, Object>>> asyncBopGetBulk(List<String> keyList, long from, long to, ElementFlagFilter eFlagFilter, int offset, int count) CollectionFuture<Map<String, BTreeGetResult<ByteArrayBKey, Object>>> asyncBopGetBulk(List<String> keyList, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int offset, int count) keyList: b+tree items\uc758 key list bkey \ub610\ub294 \\<from, to>: element \uc870\ud68c \ub300\uc0c1\uc774 \ub418\ub294 bkey \ub610\ub294 \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 eflag filter \uc870\uac74\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\ub824\uba74, ElementFlagFilter.DO_NOT_FILTER\ub97c \uc785\ub825\ud55c\ub2e4. offset, count: bkey range\uc640 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c \uc2e4\uc81c \uc870\ud68c\ud560 element\uc758 offset\uacfc count \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 Map\\<Stirng, BTreeGetResult\\<Bkey, Object>>\uc744 \uc5bb\uc73c\uba70, \uc774\ub7ec\ud55c Map\uc740 \uac1c\ubcc4 b+tree item\uc758 key\uc640 \uadf8 b+tree\uc5d0\uc11c \uc870\ud68c\ud55c \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub294 BTreeGetResult \uac1d\uccb4\uc774\ub2e4. BTreeGetResult \uac1d\uccb4\ub97c \ud1b5\ud574 \uac1c\ubcc4 \uc870\ud68c \uacb0\uacfc\ub97c \uc544\ub798\uc640 \uac19\uc774 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. BTreeGetResult.getElements() BtreeGetResult.getCollectionResponse() \uc124\uba85 not null CollectionResponse.OK Element \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc5c6\uc74c not null CollectionResponse.TRIMMED Element \uc870\ud68c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT \uc870\ud68c\ub41c element \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc5c6\uc74c null CollectionResponse.OUT_OF_RANGE \uc870\ud68c\ub41c element \uc5c6\uc74c, \uc870\ud68c \ubc94\uc704\uc5d0 b+tree trim \uc601\uc5ed \uc788\uc74c null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\ub97c \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc784. (unreadable item\uc0c1\ud0dc) BTreeGetResult.getElements()\ub85c \uc870\ud68c\ud55c BTreeElement \uac1d\uccb4\ub85c\ubd80\ud130 \uac1c\ubcc4 element\uc758 bkey, eflag, value\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. BTreeElement \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() long \ub610\ub294 byte[] element\uc758 bkey getEFlag() byte[] element flag getValue() Object element\uc758 \uac12 B+tree element \uc77c\uad04 \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. final List<String> keyList = new ArrayList<String>() { { add(\"Prefix:BTree1\"); add(\"Prefix:BTree2\"); add(\"Prefix:BTree3\"); } }; ElementFlagFilter filter = ElementFlagFilter.DO_NOT_FILTER; long bkeyFrom = 0L; long bkeyTo = 100L; int queryCount = 10; int offset = 0; CollectionGetBulkFuture<Map<String, BTreeGetResult<Long, Object>>> future = null; Map<String, BTreeGetResult<Long, Object>> results = null; try { future = mc.asyncBopGetBulk(keyList, from, to, filter, offset, count); // (1) results = future.get(1000L, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } if (results == null) return; for(Entry<String, BTreeGetResult<Long, Object>> entry : results.entrySet()) { // (2) System.out.println(\"key=\" + entry.getKey()); System.out.println(\"result code=\" + entry.getValue().getCollectionResponse().getMessage()); // (3) if (entry.getValue().getElements() != null) { // (4) for(Entry<Long, BTreeElement<Long, Object>> el : entry.getValue().getElements().entrySet()) { System.out.println(\"bkey=\" + el.getKey()); System.out.println(\"eflag=\" + Arrays.toString(el.getValue().getEflag()); System.out.println(\"value=\" + el.getValue().getValue()); } } } keyList\ub85c \uc8fc\uc5b4\uc9c4 b+tree\uc5d0 \uc800\uc7a5\ub41c element \uc911 bkey\uac00 from\ubd80\ud130 to\uc0ac\uc774\uc5d0 \uc788\uace0 eflag filter\ub97c \ub9cc\uc871\ud558\ub294 elements \uc911 offset \ubc88\uc9f8\ubd80\ud130 count \uac1c element\ub97c \uc870\ud68c\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\ub294 Map\uc73c\ub85c \ubc18\ud658\ub418\ub294\ub370 Key\ub294 b+tree\uc758 key\uac00 \ub418\uace0 Map\uc758 value\ub294 \uac01 key\uc5d0 \uc800\uc7a5\ub41c element\ub4e4\uc774\ub2e4. \uc870\ud68c \uacb0\uacfc map\uc5d0\uc11c key\ubcc4\ub85c \uc870\ud68c\ud55c BTreeGetResult\uac1d\uccb4\ub294 \uc870\ud68c \uacb0\uacfc\ucf54\ub4dc\uc640 \ud574\ub2f9 b+tree\uc5d0\uc11c \uc870\ud68c\ub41c element\ub97c \uac00\uc9c4\ub2e4. \uc870\ud68c \uacb0\uacfc\ucf54\ub4dc\uc5d0 \ub530\ub77c BTreeGetResult.getElements()\uc758 \uacb0\uacfc\ub294 null\uc77c \uc218 \uc788\ub2e4. BTreeGetResult.getElements()\ub85c \uc870\ud68c\ud55c BTreeElement\uac1d\uccb4\ub85c\ubd80\ud130 element\uc758 bkey, eflag, value\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"7-12. B+Tree Element \uc77c\uad04 \uc870\ud68c"},{"location":"arcus-java-client/7.-btree-API/#7-13-btree-element-sort-merge","text":"\ub2e4\uc218\uc758 B+tree\ub4e4\uc5d0 \ub300\ud574 element \uc870\ud68c\ub97c sort-merge \ubc29\uc2dd\uc73c\ub85c \uc218\ud589\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. \ubb3c\ub9ac\uc801\uc73c\ub85c \uc5ec\ub7ec b+tree\ub4e4\ub85c \uad6c\uc131\ub418\uc9c0\ub9cc, \uc774\ub4e4\uc774 \ub17c\ub9ac\uc801\uc73c\ub85c \ud558\ub098\uc758 \uac70\ub300\ud55c b+tree\ub77c \uac00\uc815\ud558\uace0, \uc774\ub7ec\ud55c b+tree\uc5d0 \ub300\ud574 element \uc870\ud68c\ub97c \uc218\ud589\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. smget \ub3d9\uc791\uc740 \uc870\ud68c \ubc94\uc704\uc640 \uc5b4\ub5a4 b+tree\uc758 trim \uc601\uc5ed\uacfc\uc758 \uacb9\uce68\uc5d0 \ub300\ud55c \ucc98\ub9ac\ub85c, \uc544\ub798 \ub450 \uac00\uc9c0 \ub3d9\uc791 \ubaa8\ub4dc\uac00 \uc788\ub2e4. 1) \uae30\uc874 Sort-Merge \uc870\ud68c (1.8.X \uc774\ud558 \ubc84\uc804\uc5d0\uc11c \ub3d9\uc791\ud558\ub358 \ubc29\uc2dd) - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uccab\ubc88\uc9f8 element\uac00 trim\ub41c b+tree\uac00 \ud558\ub098\ub77c\ub3c4 \uc874\uc7ac\ud558\uba74 OUT_OF_RANGE \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements \uc870\ud68c\ud55c \ud6c4\uc5d0 \uc751\uc6a9\uc5d0\uc11c sort-merge \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. - OUT_OF_RANGE\uac00 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c smget\uc744 \uc218\ud589\ud558\uba74\uc11c \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\ub97c \ub9cc\ub098\uac8c \ub418\uba74, \uadf8 \uc9c0\uc810\uae4c\uc9c0 \uc870\ud68c\ud55c elements\ub97c \ucd5c\uc885 elements \uacb0\uacfc\ub85c \ud558\uace0 smget \uc218\ud589 \uc0c1\ud0dc\ub294 TRIMMED\ub85c \ud558\uc5ec \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim \uc601\uc5ed\uc758 elements\ub97c \uc870\ud68c\ud558\uc5ec smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. 2) \uc2e0\uaddc Sort-Merge \uc870\ud68c (1.9.0 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub41c \ubc29\uc2dd) - \uae30\uc874\uc758 OUT_OF_RANGE\uc5d0 \ud574\ub2f9\ud558\ub294 b+tree\ub97c missed keys\ub85c \ubd84\ub958\ud558\uace0 \ub098\uba38\uc9c0 b+tree\ub4e4\uc5d0 \ub300\ud574 smget\uc744 \uacc4\uc18d \uc218\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 missed keys\uc5d0 \ud55c\ud574\uc11c\ub9cc \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\uac00 \uc874\uc7ac\ud558\ub354\ub77c\ub3c4, \uadf8 \uc9c0\uc810\uc5d0\uc11c smget\uc744 \uc911\uc9c0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uadf8\ub7ec\ud55c b+tree\ub97c trimmed keys\ub85c \ubd84\ub958\ud558\uace0 \uc6d0\ud558\ub294 \uac1c\uc218\uc758 elements\ub97c \ucc3e\uc744 \ub54c\uae4c\uc9c0 smget\uc744 \uacc4\uc18d \uc9c4\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 trimmed keys\uc5d0 \ud55c\ud558\uc5ec \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim\ub41c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - bkey\uc5d0 \ub300\ud55c unique \uc870\ud68c \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\ub294 duplcate \uc870\ud68c \uc678\uc5d0 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uace0 unique bkey\ub9cc\uc744 \uc870\ud68c\ud558\ub294 unique \uc870\ud68c\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - \uc870\ud68c \uc870\uac74\uc5d0 offset \uae30\ub2a5\uc744 \uc81c\uac70\ud55c\ub2e4. \uae30\uc874 smget \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4, offset \uac12\uc740 \ud56d\uc0c1 0\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\uace0\ud55c\ub2e4. \uc591\uc218\uc758 offset\uc744 \uc0ac\uc6a9\ud558\ub294 smget\uc5d0\uc11c missed keys\uac00 \uc874\uc7ac\ud558\uace0 missed keys\uc5d0 \ub300\ud55c DB \uc870\ud68c\uac00 offset\uc73c\ub85c skip\ub41c element\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0, \uc751\uc6a9\uc5d0\uc11c \uc815\ud655\ud55c offset \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud574\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\uc804\uc758 \uc870\ud68c \uacb0\uacfc\uc5d0 \uc774\uc5b4\uc11c \ucd94\uac00\ub85c \uc870\ud68c\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, \uc774\uc804\uc5d0 \uc870\ud68c\ub41c bkey \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c bkey range\ub97c \uc7ac\uc870\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc5ec\ub7ec b+tree\ub4e4\uc5d0 \ub300\ud574 sort-merge get\uc744 \uc218\ud589\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uc5ec\ub7ec b+tree\ub4e4\ub85c \ubd80\ud130 from\ubd80\ud130 to\uae4c\uc9c0\uc758 bkey\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba74\uc11c eflag filter\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub97c \ucc3e\uc544 sort merge\ud558\uba74\uc11c, count\uac1c\uc758 element\ub97c \uc870\ud68c\ud55c\ub2e4. SMGetFuture<List<SMGetElement<Object>>> asyncBopSortMergeGet(List<String> keyList, long from, long to, ElementFlagFilter eFlagFilter, int count, SMGetMode smgetMode) SMGetFuture<List<SMGetElement<Object>>> asyncBopSortMergeGet(List<String> keyList, byte[] from, byte[] to, ElementFlagFilter eFlagFilter, int count, SMGetMode smgetMode) keyList: b+tree items\uc758 key list \\<from, to>: \uc870\ud68c \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 bkey range eFlagFilter: eflag\uc5d0 \ub300\ud55c filter \uc870\uac74 eflag filter \uc870\uac74\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\ub824\uba74, ElementFlagFilter.DO_NOT_FILTER\ub97c \uc785\ub825\ud55c\ub2e4. count: bkey range\uc640 eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c \uc2e4\uc81c \uc870\ud68c\ud560 element\uc758 count \uc9c0\uc815 \uc81c\uc57d \uc870\uac74\uc73c\ub85c 1000\uc774\ud558\uc774\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub294 sort-merge get \uc5f0\uc0b0\uc774 \ubd80\ub2f4\uc774 \ub108\ubb34 \ud06c\uc9c0 \uc54a\uc740 \uc5f0\uc0b0\uc73c\ub85c \uc81c\ud55c\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. smgetMode: smget\uc5d0 \ub300\ud574\uc11c mode\ub97c \uc9c0\uc815\ud558\ub294 flag unique \uc870\ud68c \ub610\ub294 duplicate \uc870\ud68c\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element \uc870\ud68c, No duplicate bkey not null CollectionResponse.DUPLICATED Element \uc870\ud68c, Duplicate bkey \uc874\uc7ac null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 key\uac00 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.ATTR_MISMATCH sort-merge get\uc5d0 \ucc38\uc5ec\ud55c b+tree\uc758 \uc18d\uc131\uc774 \uc11c\ub85c \ub2e4\ub984, arcus-memcached 1.11.3 \uc774\ud6c4 \uc18d\uc131 \uc81c\uc57d\uc774 \uc0ac\ub77c\uc9d0 B+tree element sort-merge \uc870\ud68c\ud558\ub294 \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. List<String> keyList = new ArrayList<String>() {{ add(\"Prefix:KeyA\"); add(\"Prefix:KeyB\"); add(\"Prefix:KeyC\"); }}; long bkeyFrom = 0L; // (1) long bkeyTo = 100L; int queryCount = 10; SMGetMode smgetMode = SMGetMode.DUPLICATE; SMGetFuture<List<SMGetElement<Object>>> future = null; try { future = mc.asyncBopSortMergeGet(keyList, bkeyFrom, bkeyTo, ElementFlagFilter.DO_NOT_FILTER, queryCount, smgetMode); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { List<SMGetElement<Object>> result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) for (SMGetElement<Object> element : result) { // (4) System.out.println(element.getKey()); System.out.println(element.getBkey()); System.out.println(element.getValue()); } for (Map.Entry<String, CollectionOperationStatus> m : future.getMissedKeys().entrySet()) { // (5) System.out.print(\"Missed key : \" + m.getKey()); System.out.println(\", response : \" + m.getValue().getResponse()); } for (SMGetTrimKey e : future.getTrimmedKeys()) { // (6) System.out.println(\"Trimmed key : \" + e.getKey() + \", bkey : \" + e.getBkey()); } } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc608\uc81c\ub294 \u201cKeyA\u201d, \u201cKeyB\u201d, \u201cKeyC\u201d\uc5d0 \uc800\uc7a5\ub41c element\ub4e4 \uc911 bkey\uac00 0\ubd80\ud130 100\uae4c\uc9c0 \ud574\ub2f9\ud558\ub294 element\ub4e4 10\uac1c\ub97c \uc870\ud68c\ud55c\ub2e4. \uc8fc\uc758\ud560 \uc810\uc740 key\ub85c \uc8fc\uc5b4\uc9c4 b+tree\uc758 attribute\uc124\uc815\uc740 \ubaa8\ub450 \uac19\uc544\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. ElementFlagFilter\ub294 bkey\uc5d0 \uc9c0\uc815\ub41c eflag\uac00 elementFlagFIlter\ub85c \uc9c0\uc815\ub41c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\ub4e4\ub9cc \uc870\ud68c\ud558\ub294 \uc870\uac74\uc774\ub2e4 \uc608\uc81c\uc5d0\uc11c\ub294 eflag filter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c \uc870\ud68c\ud558\uc600\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc870\ud68c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc870\ud68c\ub41c \uac12\uc740 List\\<SMGetElement>\ud615\ud0dc\ub85c \ubc18\ud658\ub41c\ub2e4. \uc774\ub85c\ubd80\ud130 \uc870\ud68c\ub41c element\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc870\ud68c \uacb0\uacfc\uc5d0 \ub3d9\uc77c\ud55c bkey\uac00 \uc874\uc7ac\ud558\uba74 key\ub97c \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub418\uc5b4 \ubc18\ud658\ub41c\ub2e4. \uc870\ud68c\ud560 \ub54c \uc9c0\uc815\ud55c key\ub4e4 \uc911\uc5d0 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 key\ub4e4\uc740 future.getMissedKeys()\ub97c \ud1b5\ud574 Map \ud615\ud0dc\ub85c \uc2e4\ud328 \uc6d0\uc778\uacfc \ud568\uaed8 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc2e4\ud328\uc6d0\uc778\uc740 cache miss(NOT_FOUND), unreadable \uc0c1\ud0dc(UNREADABLE), bkey \ubc94\uc704 \uc870\ud68c\ub97c \ub9cc\uc871\ud558\ub294 \ucc98\uc74c bkey\uac00 trim\ub41c \uc0c1\ud0dc(OUT_OF_RANGE) \uc911 \ud558\ub098\uc774\ub2e4. \uc751\uc6a9\uc740 \uc774\ub4e4 \ud0a4\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 back-end storage\uc778 DB\uc5d0\uc11c \ub3d9\uc77c \uc870\ud68c \uc870\uac74\uc73c\ub85c elements\ub97c \uac80\uc0c9\ud558\uc5ec sort-merge \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. bkey \uc870\ud68c \ubc94\uc704\uc758 \ucc98\uc74c bkey\uac00 \uc874\uc7ac\ud558\uc9c0\ub9cc bkey \ubc94\uc704\uc758 \ub05d\uc5d0 \ub2e4\ub2e4\ub974\uae30 \uc804\uc5d0 trim\uc774 \ubc1c\uc0dd\ud55c key\uc640 trim \uc9c1\uc804\uc5d0 cache\uc5d0 \uc788\ub294 \ub9c8\uc9c0\ub9c9 bkey\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \uc751\uc6a9\uc740 \uc774\ub4e4 \ud0a4\ub4e4\uc5d0 \ub300\ud574 trim \uc9c1\uc804 \ub9c8\uc9c0\ub9c9 bkey \uc774\ud6c4\uc5d0 trim\ub41c bkey\ub4e4\uc744 back-end storage\uc778 DB\uc5d0\uc11c \uc870\ud68c\ud558\uc5ec sort-merge \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. Sort merge get\uc758 \ucd5c\uc885 \uc218 \uacb0\uacfc\ub294 future.getOperationStatus().getResponse()\ub97c \ud1b5\ud574 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.","title":"7-13. B+Tree Element Sort-Merge \uc870\ud68c"},{"location":"arcus-java-client/7.-btree-API/#7-14-btree-position","text":"B+tree\uc758 \uac80\uc0c9 \uc870\uac74\uc73c\ub85c \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc704\uce58(position) \uc815\ubcf4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c \uc704\uce58\ub780 B+tree \uc548\uc5d0\uc11c bkey\ub97c \ud1b5\ud574 \uc77c\ub82c\ub85c \uc815\ub82c\ub418\uc5b4 \uc788\ub294 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc778\ub371\uc2a4\ub97c \ub73b\ud558\uba70, 0\ubd80\ud130 count-1 \uae4c\uc9c0 \uc21c\uc11c\ub300\ub85c \ub9e4\uaca8\uc9c4\ub2e4. \uc21c\uc11c\uc5d0 \ub300\ud55c \uae30\uc900\uc73c\ub85c \uc624\ub984\ucc28\uc21c(ASC)\uacfc \ub0b4\ub9bc\ucc28\uc21c(DESC)\uc774 \uc9c0\uc6d0\ub41c\ub2e4. B+tree\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc8fc\uc5b4\uc9c4 order\uc5d0 \ub530\ub77c \uc5b4\ub5a4 \uc704\uce58(position)\uc5d0 \uc788\ub294\uc9c0 \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CollectionFuture<Integer> asyncBopFindPosition(String key, long bkey, BTreeOrder order) CollectionFuture<Integer> asyncBopFindPosition(String key, byte[] bkey, BTreeOrder order) key: b+tree item\uc758 key bkey: \uc870\ud68c\ud560 element\uc758 bkey(b+tree bkey) order: \uc704\uce58(position) \uae30\uc900\uc744 \uc815\uc758\ud55c\ub2e4. (\uc624\ub984\ucc28\uc21c : BTreeOrder.ASC, \ub0b4\ub9bc\ucc28\uc21c : BTreeOrder.DESC) \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 element position CollectionResponse.OK Element \uc704\uce58\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element miss null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\uac00 unreadable\uc0c1\ud0dc\uc784 B+tree position \uc870\ud68c \uc608\uc81c\ub294 \uc544\ub798\uc640 \uac19\ub2e4. String key = \"BopFindPositionTest\"; long[] longBkeys = { 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L }; public void testLongBKeyAsc() throws Exception { // insert CollectionAttributes attrs = new CollectionAttributes(); for (long each : longBkeys) { arcusClient.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // bop position for (int i=0; i<longBkeys.length; i++) { CollectionFuture<Integer> f = arcusClient.asyncBopFindPosition(key, longBkeys[i], BTreeOrder.ASC); Integer position = f.get(); assertNotNull(position); assertEquals(CollectionResponse.OK, f.getOperationStatus().getResponse()); assertEquals(i, position.intValue()); } } public void testLongBKeyDesc() throws Exception { // insert CollectionAttributes attrs = new CollectionAttributes(); for (long each : longBkeys) { arcusClient.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // bop position for (int i=0; i<longBkeys.length; i++) { CollectionFuture<Integer> f = arcusClient.asyncBopFindPosition(key, longBkeys[i], BTreeOrder.DESC); Integer position = f.get(); assertNotNull(position); assertEquals(CollectionResponse.OK, f.getOperationStatus().getResponse()); assertEquals(\"invalid position\", longBkeys.length-i-1, position.intValue()); } }","title":"7-14. B+Tree Position \uc870\ud68c"},{"location":"arcus-java-client/7.-btree-API/#7-15-btree-position-element","text":"B+tree\uc5d0\uc11c \ud558\ub098\uc758 position \ub610\ub294 position range\uc5d0 \ud574\ub2f9\ud558\ub294 elements\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture<Map<Integer, Element<Object>>> asyncBopGetByPosition(String key, BTreeOrder order, int pos) CollectionFuture<Map<Integer, Element<Object>>> asyncBopGetByPosition(String key, BTreeOrder order, int from, int to) key: b+tree item\uc758 key order: \uc704\uce58(position) \uae30\uc900\uc744 \uc815\uc758\ud55c\ub2e4. (\uc624\ub984\ucc28\uc21c : BTreeOrder.ASC, \ub0b4\ub9bc\ucc28\uc21c : BTreeOrder.DESC) pos or \\<from, to>: \uc704\uce58(position)\ub97c \ud558\ub098\ub9cc \uc9c0\uc815\ud558\uac70\ub098 \ubc94\uc704\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element miss null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\uac00 unreadable\uc0c1\ud0dc\uc784 B+tree\uc5d0\uc11c position \uae30\ubc18\uc758 element \uc870\ud68c \uc608\uc81c\uc774\ub2e4. String key = \"BopGetByPositionTest\"; long[] longBkeys = { 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L }; public void testLongBKeyMultiple() throws Exception { // 10\uac1c\uc758 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c insert \ud55c\ub2e4. CollectionAttributes attrs = new CollectionAttributes(); for (long each : longBkeys) { arcusClient.asyncBopInsert(key, each, null, \"val\", attrs).get(); } // \ud14c\uc2a4\ud2b8 : 5 \ubd80\ud130 8 \uc704\uce58\uc758 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc870\ud68c\ud55c\ub2e4. int posFrom = 5; int posTo = 8; CollectionFuture<Map<Integer, Element<Object>>> f = arcusClient .asyncBopGetByPosition(key, BTreeOrder.ASC, posFrom, posTo); Map<Integer, Element<Object>> result = f.get(1000, TimeUnit.MILLISECONDS); assertEquals(4, result.size()); assertEquals(CollectionResponse.END, f.getOperationStatus().getResponse()); int count = 0; for (Entry<Integer, Element<Object>> each : result.entrySet()) { int currPos = posFrom + count++; assertEquals(\"invalid index\", currPos, each.getKey().intValue()); assertEquals(\"invalid bkey\", longBkeys[currPos], each.getValue().getLongBkey()); assertEquals(\"invalid value\", \"val\", each.getValue().getValue()); } }","title":"7-15. B+Tree Position \uae30\ubc18\uc758 Element \uc870\ud68c"},{"location":"arcus-java-client/7.-btree-API/#7-16-btree-position-element","text":"B+tree\uc758 \uac80\uc0c9 \uc870\uac74\uc73c\ub85c \ud2b9\uc815 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc704\uce58(position) \ub97c \uae30\uc900\uc73c\ub85c \uc8fc\ubcc0(\uc55e/\ub4a4 position) \uc5d8\ub9ac\uba3c\ud2b8\ub4e4\uc744 \uc870\ud68c \ud560 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c \uc704\uce58\ub780 B+tree\uc548\uc5d0\uc11c bkey\ub97c \ud1b5\ud574 \uc77c\ub82c\ub85c \uc815\ub82c\ub418\uc5b4 \uc788\ub294 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc778\ub371\uc2a4\ub97c \ub73b\ud558\uba70, 0\ubd80\ud130 count-1\uae4c\uc9c0 \uc21c\uc11c\ub300\ub85c \ub9e4\uaca8\uc9c4\ub2e4. \uc21c\uc11c\uc5d0 \ub300\ud55c \uae30\uc900\uc73c\ub85c \uc624\ub984\ucc28\uc21c(ASC)\uacfc \ub0b4\ub9bc\ucc28\uc21c(DESC)\uc774 \uc9c0\uc6d0\ub41c\ub2e4. B+tree\uc5d0\uc11c bkey\uc5d0 \ud574\ub2f9\ud558\ub294 position\uc744 \uae30\uc900\uc73c\ub85c count\ub9cc\ud07c\uc758 element\ub97c \uc8fc\uc5b4\uc9c4 order\uc5d0 \ub530\ub77c\uc11c \uc870\ud68c\ud558\ub294 \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CollectionFuture<Map<Integer, Element<Object>>> asyncBopFindPositionWithGet(String key, long longBKey, BTreeOrder order, int count) CollectionFuture<Map<Integer, Element<Object>>> asyncBopFindPositionWithGet(String key, byte[] byteArrayBKey, BTreeOrder order, int count) key: b+tree item\uc758 key longBKey: \uc870\ud68c\ud560 element\uc758 bkey(b+tree bkey) order: longBKey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uc758 \uc704\uce58(position) \uae30\uc900\uc73c\ub85c \uacb0\uacfc\ub97c \ub2f4\uc744 \uc21c\uc11c\ub97c \uc815\uc758\ud55c\ub2e4. (\uc624\ub984\ucc28\uc21c: BTreeOrder.ASC, \ub0b4\ub9bc\ucc28\uc21c: BTreeOrder.DESC) count: longBKey\uc5d0 \ud574\ub2f9\ud558\ub294 element\uc758 \uc704\uce58(position) \uae30\uc900\uc73c\ub85c \uc870\ud68c\ud560 \uc8fc\ubcc0(\uc55e/\ub4a4 position) element \uac1c\uc218\ub97c \uc9c0\uc815 \uc218\ud589 \uacb0\uacfc\ub294 future \uac1d\uccb4\ub97c \ud1b5\ud574 \uc5bb\ub294\ub2e4. future.get() future.operationStatus().getResponse() \uc124\uba85 not null CollectionResponse.END Element\ub97c \uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c null CollectionResponse.NOT_FOUND Key miss (\uc8fc\uc5b4\uc9c4 key\uc5d0 \ud574\ub2f9\ud558\ub294 item\uc774 \uc5c6\uc74c) null CollectionResponse.NOT_FOUND_ELEMENT Element miss null CollectionResponse.TYPE_MISMATCH \ud574\ub2f9 item\uc774 b+tree\uac00 \uc544\ub2d8 null CollectionResponse.BKEY_MISMATCH \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uc774 \uae30\uc874 bkey \uc720\ud615\uacfc \ub2e4\ub984 null CollectionResponse.UNREADABLE \ud574\ub2f9 key\uac00 unreadable\uc0c1\ud0dc\uc784 \uacb0\uacfc\ub85c \ubc18\ud658\ub41c result(Map\\<Integer, Element\\<Object>>) \uac1d\uccb4\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 result \uac1d\uccb4\uc758 Method \uc790\ub8cc\ud615 \uc124\uba85 getKey() integer btree\ub0b4\uc758 position getValue().getValue() Object element\uc758 \uac12 getValue().getByteArrayBkey() byte[] element bkey \uac12(byte[]) getValue().getLongBkey() long element bkey \uac12(long) getValue().isByteArrayBkey() boolean element bkey \uac12 byte array \uc5ec\ubd80 getValue().getFlag() byte[] element flag \uac12(byte[]) B+tree\uc5d0\uc11c position\uacfc element \ub3d9\uc2dc \uc870\ud68c \uc608\uc81c\uc774\ub2e4. String key = \"BopFindPositionWithGetTest\"; public void testLongBKey() throws Exception { long longBkey, resultBkey; int totCount = 100; int pwgCount = 10; int rstCount; int position, i; // totCount\uac1c\uc758 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c insert\ud55c\ub2e4. CollectionAttributes attrs = new CollectionAttributes(); for (i = 0; i < totCount; i++) { longBkey = (long)i; arcusClient.asyncBopInsert(key, longBkey, null, \"val\", attrs).get(); } for (i = 0; i < totCount; i++) { // longBkey\ub97c bkey\ub85c \uac00\uc9c0\ub294 element\uc758 position\uc744 \uae30\uc900\uc73c\ub85c \uc8fc\ubcc0(\uc55e/\ub4a4 position) element\ub4e4\uc744 pwgCount\ub9cc\ud07c \uc870\ud68c longBkey = (long)i; CollectionFuture<Map<Integer, Element<Object>>> f = arcusClient .asyncBopFindPositionWithGet(key, longBkey, BTreeOrder.ASC, pwgCount); Map<Integer, Element<Object>> result = f.get(1000, TimeUnit.MILLISECONDS); if (i >= pwgCount && i < (totCount-pwgCount)) { rstCount = pwgCount + 1 + pwgCount; } else { if (i < pwgCount) rstCount = i + 1 + pwgCount; else rstCount = pwgCount + 1 + ((totCount-1)-i); } assertEquals(rstCount, result.size()); assertEquals(CollectionResponse.END, f.getOperationStatus().getResponse()); if (i < pwgCount) { position = 0; } else { position = i - pwgCount; } resultBkey = position; for (Entry<Integer, Element<Object>> each : result.entrySet()) { assertEquals(\"invalid position\", position, each.getKey().intValue()); assertEquals(\"invalid bkey\", resultBkey, each.getValue().getLongBkey()); assertEquals(\"invalid value\", \"val\", each.getValue().getValue()); position++; resultBkey++; } } }","title":"7-16. B+Tree Position\uacfc Element \ub3d9\uc2dc \uc870\ud68c"},{"location":"arcus-java-client/8.-attribute-API/","text":"Item attributes\ub294 \uac01 cache item\uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc758\ubbf8\ud55c\ub2e4. Item attributes\uc758 \uae30\ubcf8 \uc124\uba85\uc740 Arcus cache server\uc758 item attributes \ubd80\ubd84 \uc744 \ucc38\uace0 \ud558\uae38 \ubc14\ub780\ub2e4. Item attributes\ub97c \ubcc0\uacbd\ud558\uac70\ub098 \uc870\ud68c\ud558\ub294 \ud568\uc218\ub4e4\uc744 \uc124\uba85\ud55c\ub2e4. 8-1. Attribute \ubcc0\uacbd \uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <Boolean> asyncSetAttr(String key, Attributes attr) \uc5b4\ub5a4 collection\uc5d0 \ubaa8\ub4e0 element\ub97c \uc0bd\uc785\ud558\uae30 \uc804 \uae4c\uc9c0\ub294 \ub2e4\ub978 \uc5ec\ub7ec thread\uc5d0\uc11c \uadf8 collection\uc758 element\ub97c \uc870\ud68c\ud558\uc5ec\uc11c\ub294 \uc548\ub41c\ub2e4. \uc774\ub97c \uc704\ud574, READABLE \uc18d\uc131\uc744 false\ub85c \uc124\uc815\ud574 \ud574\ub2f9 collection\uc744 \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uc5b4\ub450\uace0 \ubaa8\ub4e0 element\ub97c \uc0bd\uc785\ud55c \ud6c4\uc5d0 \ub2e4\uc2dc readable \uc18d\uc131\uc744 true\ud558\ub294 \uc608\uc81c\uc774\ub2e4. // Unreadable list\ub97c \uc0dd\uc131\ud55c\ub2e4. CollectionAttributes attribute = new CollectionAttributes(); attribute.setReadable(false); CollectionFuture<Boolean> createFuture = mc.asyncLopCreate(KEY, ElementValueType.STRING, attribute); try { createFuture.get(300L, TimeUnit.MILLISECONDS); } catch (Exception e) { createFuture.cancel(true); // throw an exception or logging. } // \uc5ec\uae30\uc5d0\uc11c List\ub97c \uac31\uc2e0\ud55c\ub2e4. \uc774 \uc0c1\ud0dc\uc5d0\uc11c\ub294 collection\uc744 \uc77d\uc744 \uc218 \uc5c6\ub2e4. \uc4f0\uae30, \uc218\uc815, \uc0ad\uc81c\ub9cc \uac00\ub2a5\ud558\ub2e4. // List\ub97c Readable\uc0c1\ud0dc\ub85c \ub9cc\ub4e0\ub2e4. CollectionAttributes attrs = new CollectionAttributes(); attrs.setReadable(true); CollectionFuture<Boolean> setAttrFuture = mc.asyncSetAttr(KEY, attrs); try { setAttrFuture.get(300L, TimeUnit.MILLISECONDS); } catch (Exception e) { setAttrFuture.cancel(true); // throw an exception or logging. } // \uc774\uc81c collection\uc744 \uc77d\uc744 \uc218 \uc788\ub2e4. \ub450\ubc88\uc9f8 \uc608\uc81c\ub294 expiretime \uc18d\uc131\uc744 \ubcc0\uacbd\ud55c\ub2e4. String key = \"Sample:Object\"; CollectionFuture<Boolean> future = null; try { Attributes attrs = new Attributes(); // (1) attrs.setExpireTime(1); future = client.asyncSetAttr(key, attrs); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) System.out.println(result); } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Attribute\uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc5ec expire time\uc744 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4 asyncSetAttr\uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 key\uc758 attribute\ub97c \ubcc0\uacbd\ud55c\ub2e4. \uc774\ub807\uac8c \ud558\uba74 key\uc758 expire time\uc774 attribute\uc5d0 \uc9c0\uc815\ub41c 1\ucd08 \uc774\ud6c4\ub85c \uc7ac\uc124\uc815 \ub41c\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c key\uc758 expire time\uc740 asyncSetAttr\uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 Attribute\uac00 \uc801\uc6a9\ub41c 1\ucd08 \ud6c4\ub85c \uc124\uc815\ub418\ub294 \uac83\uc774\ub2e4. Attribute\uac00 key\uc5d0 \uc815\uc0c1\uc801\uc73c\ub85c \ubc18\uc601\ub418\uba74 true\ub97c \ubc18\ud658\ud55c\ub2e4. 8-2. Attribute \uc870\ud68c \uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <CollectionAttributes> asyncGetAttr(String key) Colleciton\uc5d0 \uc800\uc7a5\ub41c element \uac1c\uc218\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Sample:List\"; CollectionFuture<CollectionAttributes> future = null; try { future = client.asyncGetAttr(key); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) { return; } try { CollectionAttributes result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) if (result == null) { // (3) System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"); return; } long totalItemCountOfBTree = result.getCount(); // (4) System.out.println(\"Item count=\" + totalItemCountOfBTree); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Key\uc758 Attribute\ub97c \uc870\ud68c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uac00 \uc5c6\uc73c\uba74 null\uc774 \ubc18\ud658\ub41c\ub2e4. \uc870\ud68c\ub41c Attribute\uac1d\uccb4\uc5d0\uc11c count\uac12\uc744 \uc870\ud68c\ud55c\ub2e4. \uc774 \uac12\uc774 key\uc5d0 \uc800\uc7a5\ub41c Collection\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \ucd1d \uac1c\uc218\uc774\ub2e4.","title":"8. attribute API"},{"location":"arcus-java-client/8.-attribute-API/#8-1-attribute","text":"\uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \ubcc0\uacbd\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <Boolean> asyncSetAttr(String key, Attributes attr) \uc5b4\ub5a4 collection\uc5d0 \ubaa8\ub4e0 element\ub97c \uc0bd\uc785\ud558\uae30 \uc804 \uae4c\uc9c0\ub294 \ub2e4\ub978 \uc5ec\ub7ec thread\uc5d0\uc11c \uadf8 collection\uc758 element\ub97c \uc870\ud68c\ud558\uc5ec\uc11c\ub294 \uc548\ub41c\ub2e4. \uc774\ub97c \uc704\ud574, READABLE \uc18d\uc131\uc744 false\ub85c \uc124\uc815\ud574 \ud574\ub2f9 collection\uc744 \uc77d\uc744 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uc5b4\ub450\uace0 \ubaa8\ub4e0 element\ub97c \uc0bd\uc785\ud55c \ud6c4\uc5d0 \ub2e4\uc2dc readable \uc18d\uc131\uc744 true\ud558\ub294 \uc608\uc81c\uc774\ub2e4. // Unreadable list\ub97c \uc0dd\uc131\ud55c\ub2e4. CollectionAttributes attribute = new CollectionAttributes(); attribute.setReadable(false); CollectionFuture<Boolean> createFuture = mc.asyncLopCreate(KEY, ElementValueType.STRING, attribute); try { createFuture.get(300L, TimeUnit.MILLISECONDS); } catch (Exception e) { createFuture.cancel(true); // throw an exception or logging. } // \uc5ec\uae30\uc5d0\uc11c List\ub97c \uac31\uc2e0\ud55c\ub2e4. \uc774 \uc0c1\ud0dc\uc5d0\uc11c\ub294 collection\uc744 \uc77d\uc744 \uc218 \uc5c6\ub2e4. \uc4f0\uae30, \uc218\uc815, \uc0ad\uc81c\ub9cc \uac00\ub2a5\ud558\ub2e4. // List\ub97c Readable\uc0c1\ud0dc\ub85c \ub9cc\ub4e0\ub2e4. CollectionAttributes attrs = new CollectionAttributes(); attrs.setReadable(true); CollectionFuture<Boolean> setAttrFuture = mc.asyncSetAttr(KEY, attrs); try { setAttrFuture.get(300L, TimeUnit.MILLISECONDS); } catch (Exception e) { setAttrFuture.cancel(true); // throw an exception or logging. } // \uc774\uc81c collection\uc744 \uc77d\uc744 \uc218 \uc788\ub2e4. \ub450\ubc88\uc9f8 \uc608\uc81c\ub294 expiretime \uc18d\uc131\uc744 \ubcc0\uacbd\ud55c\ub2e4. String key = \"Sample:Object\"; CollectionFuture<Boolean> future = null; try { Attributes attrs = new Attributes(); // (1) attrs.setExpireTime(1); future = client.asyncSetAttr(key, attrs); // (2) } catch (IllegalStateException e) { // handle exception } if (future == null) return; try { Boolean result = future.get(1000L, TimeUnit.MILLISECONDS); // (3) System.out.println(result); } catch (TimeoutException e) { future.cancel(true); } catch (InterruptedException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Attribute\uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc5ec expire time\uc744 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4 asyncSetAttr\uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 key\uc758 attribute\ub97c \ubcc0\uacbd\ud55c\ub2e4. \uc774\ub807\uac8c \ud558\uba74 key\uc758 expire time\uc774 attribute\uc5d0 \uc9c0\uc815\ub41c 1\ucd08 \uc774\ud6c4\ub85c \uc7ac\uc124\uc815 \ub41c\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c key\uc758 expire time\uc740 asyncSetAttr\uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 Attribute\uac00 \uc801\uc6a9\ub41c 1\ucd08 \ud6c4\ub85c \uc124\uc815\ub418\ub294 \uac83\uc774\ub2e4. Attribute\uac00 key\uc5d0 \uc815\uc0c1\uc801\uc73c\ub85c \ubc18\uc601\ub418\uba74 true\ub97c \ubc18\ud658\ud55c\ub2e4.","title":"8-1. Attribute \ubcc0\uacbd"},{"location":"arcus-java-client/8.-attribute-API/#8-2-attribute","text":"\uc8fc\uc5b4\uc9c4 key\uc758 attributes\ub97c \uc870\ud68c\ud558\ub294 \ud568\uc218\uc774\ub2e4. CollectionFuture <CollectionAttributes> asyncGetAttr(String key) Colleciton\uc5d0 \uc800\uc7a5\ub41c element \uac1c\uc218\ub97c \uc870\ud68c\ud558\ub294 \uc608\uc81c\uc774\ub2e4. String key = \"Sample:List\"; CollectionFuture<CollectionAttributes> future = null; try { future = client.asyncGetAttr(key); // (1) } catch (IllegalStateException e) { // handle exception } if (future == null) { return; } try { CollectionAttributes result = future.get(1000L, TimeUnit.MILLISECONDS); // (2) if (result == null) { // (3) System.out.println(\"Key\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\"); return; } long totalItemCountOfBTree = result.getCount(); // (4) System.out.println(\"Item count=\" + totalItemCountOfBTree); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } Key\uc758 Attribute\ub97c \uc870\ud68c\ud55c\ub2e4. timeout\uc740 1\ucd08\ub85c \uc9c0\uc815\ud588\ub2e4. \uc9c0\uc815\ud55c \uc2dc\uac04\uc5d0 \uc0ad\uc81c \uacb0\uacfc\uac00 \ub118\uc5b4 \uc624\uc9c0 \uc54a\uac70\ub098 JVM\uc758 \uacfc\ubd80\ud558\ub85c operation queue\uc5d0\uc11c \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc744 \uacbd\uc6b0 TimeoutException\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Key\uac00 \uc5c6\uc73c\uba74 null\uc774 \ubc18\ud658\ub41c\ub2e4. \uc870\ud68c\ub41c Attribute\uac1d\uccb4\uc5d0\uc11c count\uac12\uc744 \uc870\ud68c\ud55c\ub2e4. \uc774 \uac12\uc774 key\uc5d0 \uc800\uc7a5\ub41c Collection\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \ucd1d \uac1c\uc218\uc774\ub2e4.","title":"8-2. Attribute \uc870\ud68c"},{"location":"arcus-java-client/9.-other-API/","text":"Flush Arcus\ub294 prefix\ub2e8\uc704\ub85c flush\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uce90\uc2dc \uc11c\ubc84\uc5d0 \uc800\uc7a5\ub41c \ubaa8\ub4e0 \ub370\uc774\ud130\ub4e4 \uc911 \ud2b9\uc815 prefix\ub97c \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub4e0 key\ub4e4\uc744 \ud55c\ubc88\uc758 \uc694\uccad\uc73c\ub85c \uc0ad\uc81c\ud560 \uc218 \uc788\ub2e4. \ub2e8, Front Cache\uc758 \ub370\uc774\ud130\ub294 flush \ub418\uc9c0 \uc54a\ub294\ub2e4. OperationFuture<Boolean> flush(String prefix) \uc815\uc0c1\uc801\uc73c\ub85c prefix\uac00 \uc81c\uac70\ub418\uc5c8\uc744 \uacbd\uc6b0 true\ub97c \ubc18\ud658\ud558\uba70 \ub9cc\uc57d \ud574\ub2f9 prefix\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc544 \uc81c\uac70\uc5d0 \uc2e4\ud328\ud558\uc600\uc744 \uacbd\uc6b0 false\ub97c \ubc18\ud658\ud55c\ub2e4. \ud2b9\uc815 prefix\uc758 \ubaa8\ub4e0 item\ub4e4\uc744 \uc0ad\uc81c\ud558\ub294 \uae30\ub2a5\uc774\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uc0ac\uc6a9\uc5d0 \uc8fc\uc758\ud558\uc5ec\uc57c \ud55c\ub2e4. \ud2b9\ud788, prefix\ub97c \uc785\ub825\ud558\uc9c0 \uc54a\uc73c\uba74, cache node\uc758 \ubaa8\ub4e0 item\ub4e4\uc774 \uc0ad\uc81c\ubbc0\ub85c \uacf5\uc6a9\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 cloud\uc5d0\uc120 \uac01\ubcc4\ud788 \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. \uc544\ub798\ub294 \ud2b9\uc815 prefix\ub97c flush\ud558\ub294 \uc608\uc81c\uc774\ub2e4. OperationFuture<Boolean> future = null; try { future = client.flush(\u201cmyprefix\u201d); boolean result = future.get(1000L, TimeUnit.MILLISECONDS); System.out.println(result); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc608\ub97c \ub4e4\uc5b4, Arcus \uc11c\ubc84\uc5d0 \ub2e4\uc74c key \ub4e4\uc774 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uc790. mydata:subkey1 mydata:subkey2 yourdata:subkey3 ourdata:subkey4 theirdata:subkey5 \uc704 \ucf54\ub4dc\uc5d0\uc11c client.flush(\u201cmyprefix\u201d)\ub97c \ud638\ucd9c\ud558\uba74 \u201cmyprefix\u201d\ub97c prefix\ub85c \uc0ac\uc6a9\ud558\ub294 mydata:subkey1, mydata:subkey2 \ub450 key\uac00 Arcus\uc5d0\uc11c \uc81c\uac70\ub41c\ub2e4. \ubb3c\ub860 Arcus cloud\ub97c \uad6c\uc131\ud558\ub294 \ubaa8\ub4e0 \uc11c\ubc84\uc5d0 \ub300\ud574\uc11c \uc218\ud589\ub41c \uacb0\uacfc\uc774\uba70 \uc131\uacf5\ud588\uc744 \uacbd\uc6b0 future.get()\uc740 true\ub97c \ubc18\ud658\ud55c\ub2e4.","title":"9. other API"},{"location":"arcus-java-client/9.-other-API/#flush","text":"Arcus\ub294 prefix\ub2e8\uc704\ub85c flush\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uce90\uc2dc \uc11c\ubc84\uc5d0 \uc800\uc7a5\ub41c \ubaa8\ub4e0 \ub370\uc774\ud130\ub4e4 \uc911 \ud2b9\uc815 prefix\ub97c \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub4e0 key\ub4e4\uc744 \ud55c\ubc88\uc758 \uc694\uccad\uc73c\ub85c \uc0ad\uc81c\ud560 \uc218 \uc788\ub2e4. \ub2e8, Front Cache\uc758 \ub370\uc774\ud130\ub294 flush \ub418\uc9c0 \uc54a\ub294\ub2e4. OperationFuture<Boolean> flush(String prefix) \uc815\uc0c1\uc801\uc73c\ub85c prefix\uac00 \uc81c\uac70\ub418\uc5c8\uc744 \uacbd\uc6b0 true\ub97c \ubc18\ud658\ud558\uba70 \ub9cc\uc57d \ud574\ub2f9 prefix\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc544 \uc81c\uac70\uc5d0 \uc2e4\ud328\ud558\uc600\uc744 \uacbd\uc6b0 false\ub97c \ubc18\ud658\ud55c\ub2e4. \ud2b9\uc815 prefix\uc758 \ubaa8\ub4e0 item\ub4e4\uc744 \uc0ad\uc81c\ud558\ub294 \uae30\ub2a5\uc774\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uc0ac\uc6a9\uc5d0 \uc8fc\uc758\ud558\uc5ec\uc57c \ud55c\ub2e4. \ud2b9\ud788, prefix\ub97c \uc785\ub825\ud558\uc9c0 \uc54a\uc73c\uba74, cache node\uc758 \ubaa8\ub4e0 item\ub4e4\uc774 \uc0ad\uc81c\ubbc0\ub85c \uacf5\uc6a9\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 cloud\uc5d0\uc120 \uac01\ubcc4\ud788 \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. \uc544\ub798\ub294 \ud2b9\uc815 prefix\ub97c flush\ud558\ub294 \uc608\uc81c\uc774\ub2e4. OperationFuture<Boolean> future = null; try { future = client.flush(\u201cmyprefix\u201d); boolean result = future.get(1000L, TimeUnit.MILLISECONDS); System.out.println(result); } catch (InterruptedException e) { future.cancel(true); } catch (TimeoutException e) { future.cancel(true); } catch (ExecutionException e) { future.cancel(true); } \uc608\ub97c \ub4e4\uc5b4, Arcus \uc11c\ubc84\uc5d0 \ub2e4\uc74c key \ub4e4\uc774 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uc790. mydata:subkey1 mydata:subkey2 yourdata:subkey3 ourdata:subkey4 theirdata:subkey5 \uc704 \ucf54\ub4dc\uc5d0\uc11c client.flush(\u201cmyprefix\u201d)\ub97c \ud638\ucd9c\ud558\uba74 \u201cmyprefix\u201d\ub97c prefix\ub85c \uc0ac\uc6a9\ud558\ub294 mydata:subkey1, mydata:subkey2 \ub450 key\uac00 Arcus\uc5d0\uc11c \uc81c\uac70\ub41c\ub2e4. \ubb3c\ub860 Arcus cloud\ub97c \uad6c\uc131\ud558\ub294 \ubaa8\ub4e0 \uc11c\ubc84\uc5d0 \ub300\ud574\uc11c \uc218\ud589\ub41c \uacb0\uacfc\uc774\uba70 \uc131\uacf5\ud588\uc744 \uacbd\uc6b0 future.get()\uc740 true\ub97c \ubc18\ud658\ud55c\ub2e4.","title":"Flush"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/","text":"Arcus cache server\ub294 \ud558\ub098\uc758 \ub370\uc774\ud130\ub9cc\uc744 value\ub85c \uac00\uc9c0\ub294 simple key-value \uc678\uc5d0\ub3c4 \uc5ec\ub7ec \ub370\uc774\ud130\ub97c \uad6c\uc870\ud654\ub41c \ud615\ud0dc\ub85c \uc800\uc7a5\ud558\ub294 collection\uc744 \ud558\ub098\uc758 value\ub85c \uac00\uc9c0\ub294 \ud655\uc7a5\ub41c key-value \ub370\uc774\ud130 \ubaa8\ub378\uc744 \uc81c\uacf5\ud55c\ub2e4. 1-1. Basic Terms Arcus cache server\uc758 key-value \ubaa8\ub378\uc740 \uc544\ub798\uc758 \uae30\ubcf8 \uc81c\uc57d \uc0ac\ud56d\uc744 \uac00\uc9c4\ub2e4. \uae30\uc874 key-value \ubaa8\ub378\uc758 \uc81c\uc57d \uc0ac\ud56d Key\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 32000 character\uc774\ub2e4. (arcus-memcached 1.11 \uc774\ud6c4 \ubc84\uc804) \uae30\uc874 \ubc84\uc804\uc5d0\uc11c key \ucd5c\ub300 \ud06c\uae30\ub294 250 character\uc774\ub2e4. Value\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 1MB(trailing \ubb38\uc790\uc778 \u201c\\r\\n\u201d \ud3ec\ud568\ud55c \uae38\uc774) \uc774\ub2e4. Collection \uc81c\uc57d \uc0ac\ud56d \ud558\ub098\uc758 collection\uc5d0 \ub4e4\uc5b4\uac08 \uc218 \uc788\ub294 \ucd5c\ub300 element \uac1c\uc218\ub294 50,000\uac1c\uc774\ub2e4. Collection\uc758 \uac01 element\uac00 \uac00\uc9c0\ub294 value\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 4KB(trailing \ubb38\uc790\uc778 \u201c\\r\\n\u201d \ud3ec\ud568\ud55c \uae38\uc774) \uc774\ub2e4. \uc11c\ube44\uc2a4\ucf54\ub4dc \uc11c\ube44\uc2a4\ucf54\ub4dc(service code)\ub294 Arcus\uc5d0\uc11c cache cloud\ub97c \uad6c\ubd84\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. Arcus cache cloud \uc11c\ube44\uc2a4\ub97c \uc751\uc6a9\ub4e4\uc5d0\uac8c \uc81c\uacf5\ud55c\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c \"\uc11c\ube44\uc2a4\ucf54\ub4dc\"\ub77c\ub294 \uc6a9\uc5b4\ub97c \uc0ac\uc6a9\ud558\uac8c \ub418\uc5c8\ub2e4. \ud558\ub098\uc758 \uc751\uc6a9\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 Arcus cache cloud\ub97c \uad6c\ucd95\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Arcus java client \uac1d\uccb4\ub294 \ud558\ub098\uc758 Arcus \uc11c\ube44\uc2a4\ucf54\ub4dc\ub9cc\uc744 \uac00\uc9c0\uba70, \ud558\ub098\uc758 Arcus cache cloud\uc5d0\ub9cc \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \ud574\ub2f9 \uc751\uc6a9\uc774 \ub458 \uc774\uc0c1\uc758 Arcus cache cloud\uc5d0 \uc811\uadfc\ud574\uc57c \ud55c\ub2e4\uba74, \uac01 Arcus cache cloud\uc758 \uc11c\ube44\uc2a4\ucf54\ub4dc\ub97c \uac00\uc9c0\ub294 Arcus java client \uac1d\uccb4\ub97c \ub530\ub85c \uc0dd\uc131\ud558\uc5ec \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud55c\ub2e4. Arcus Admin Arcus admin\uc740 ZooKeeper\ub97c \uc774\uc6a9\ud558\uc5ec \uac01 \uc11c\ube44\uc2a4 \ucf54\ub4dc\uc5d0 \ud574\ub2f9\ud558\ub294 Arcus cache cloud\ub97c \uad00\ub9ac\ud55c\ub2e4. \ud2b9\uc815 \uc11c\ube44\uc2a4 \ucf54\ub4dc\uc5d0 \ub300\ud55c cache server list\ub97c \uad00\ub9ac\ud558\uba70, cache server \ucd94\uac00 \ubc0f \uc0ad\uc81c\uc5d0 \ub300\ud574 cache server list\ub97c \ucd5c\uc2e0 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ud558\uba70, \uc11c\ube44\uc2a4 \ucf54\ub4dc\uc5d0 \ub300\ud55c cache server list \uc815\ubcf4\ub97c arcus client\uc5d0\uac8c \uc804\ub2ec\ud55c\ub2e4. Arcus admin\uc740 highly available\ud558\uc5ec\uc57c \ud558\ubbc0\ub85c, \uc5ec\ub7ec ZooKeeper \uc11c\ubc84\ub4e4\uc744 \ud558\ub098\uc758 ZeeKeeper ensemble\ub85c \uad6c\uc131\ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4. Cache Key Cache key\ub294 Arcus cache server\uc5d0 \uc800\uc7a5\ud560 \ub370\uc774\ud130\ub97c \ub300\ud45c\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. Cache key \ud615\uc2dd\uc740 \uc544\ub798\uc640 \uac19\ub2e4. Cache Key : [<prefix>:]<subkey> <prefix> - Cache key\uc758 \uc55e\uc5d0 \ubd99\ub294 namespace\uc774\ub2e4. Prefix \ub2e8\uc704\ub85c cache server\uc5d0 \uc800\uc7a5\ub41c key\ub4e4\uc744 \uadf8\ub8f9\ud654\ud558\uc5ec flush\ud558\uac70\ub098 \ud1b5\uacc4 \uc815\ubcf4\ub97c \ubcfc \uc218 \uc788\ub2e4. Prefix\ub97c \uc0dd\ub7b5\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uac00\uae09\uc801 \uc0ac\uc6a9\ud558\uae38 \uad8c\ud55c\ub2e4. delimiter - Prefix\uc640 subkey\ub97c \uad6c\ubd84\ud558\ub294 \ubb38\uc790\ub85c default delimiter\ub294 \ucf5c\ub860(\u2018:\u2019)\uc774\ub2e4. <subkey> - \uc77c\ubc18\uc801\uc73c\ub85c \uc751\uc6a9\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 Key\uc774\ub2e4. Prefix\uc640 subkey\ub294 \uba85\uba85 \uaddc\uce59\uc744 \uac00\uc9c0\ubbc0\ub85c \uc8fc\uc758\ud558\uc5ec\uc57c \ud55c\ub2e4. Prefix\ub294 \uc601\ubb38 \ub300\uc18c\ubb38\uc790, \uc22b\uc790, \uc5b8\ub354\ubc14(_), \ud558\uc774\ud508(-), \ud50c\ub7ec\uc2a4(+), \uc810(.) \ubb38\uc790\ub9cc\uc73c\ub85c \uad6c\uc131\ub420 \uc218 \uc788\uc73c\uba70, \uc774 \uc911\uc5d0 \ud558\uc774\ud508(-)\uc740 prefix \uba85\uc758 \uccab\ubc88\uc9f8 \ubb38\uc790\ub85c \uc62c \uc218 \uc5c6\ub294 \uc81c\uc57d\uc774 \uc788\ub2e4. Subkey\ub294 \uacf5\ubc31\uc744 \ud3ec\ud568\ud560 \uc218 \uc5c6\uc73c\uba70, \uae30\ubcf8\uc801\uc73c\ub85c alphanumeric\ub9cc\uc744 \uc0ac\uc6a9\ud558\uae38 \uad8c\uc7a5\ud55c\ub2e4. Cache Item Arcus cache server\ub294 simple key-value \uc678\uc5d0 collection \uc9c0\uc6d0\uc73c\ub85c \ub2e4\uc591\ud55c item \uc720\ud615\uc744 \uac00\uc9c4\ub2e4. simple key-value item - \uae30\uc874 key-value item collection item list item - \ub370\uc774\ud130\ub4e4\uc758 linked list\uc744 value\uac00\uc9c0\ub294 item set item - \uc720\uc77c\ud55c \ub370\uc774\ud130\ub4e4\uc758 \uc9d1\ud569\uc744 value\ub85c \uac00\uc9c0\ub294 item map item - <field, value>\uc30d\uc73c\ub85c \uad6c\uc131\ub41c \ub370\uc774\ud130 \uc9d1\ud569\uc744 value\ub85c \uac00\uc9c0\ub294 item b+tree item - b+tree key \uae30\ubc18\uc73c\ub85c \uc815\ub82c\ub41c \ub370\uc774\ud130 \uc9d1\ud569\uc744 value\ub85c \uac00\uc9c0\ub294 item Expiration, Eviction, and Sticky \uac01 cache item\uc740 expiration time \uc18d\uc131\uc744 \uac00\uc9c0\uba70, \uc774 \uac12\uc758 \uc124\uc815\uc744 \ud1b5\ud574 expire\ub418\uc9c0 \uc54a\ub294 item \ub610\ub294 \ud2b9\uc815 \uc2dc\uac04 \uc774\ud6c4\uc5d0 \uc790\ub3d9 expire\ub420 item\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85\uc740 Item Attribute \uc124\uba85 \uc744 \ucc38\uace0 \ubc14\ub780\ub2e4. Arcus cache server\ub294 memory cache\uc774\uba70, \ud55c\uc815\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c caching\ud55c\ub2e4. \uba54\ubaa8\ub9ac \uacf5\uac04\uc774 \ubaa8\ub450 \uc0ac\uc6a9\ub41c \uc0c1\ud0dc\uc5d0\uc11c \uc0c8\ub85c\uc6b4 item \uc800\uc7a5 \uc694\uccad\uc774 \ub4e4\uc5b4\uc62c \uacbd\uc6b0, Arcus cache server\ub294 \"out of memory\" \uc624\ub958\ub97c \ub0b4\uac70\ub098 LRU \uae30\ubc18\uc758 eviction \ubc29\uc2dd \uc989, \uac00\uc7a5 \uc624\ub7ab\ub3d9\uc548 \uc811\uadfc\ub418\uc9c0 \uc54a\uc740 item\uc744 \uc81c\uac70\ud558\uace0 \uc0c8\ub85c\uc6b4 item \uc800\uc7a5\uc744 \ud5c8\uc6a9\ud558\ub294 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc791 \ubc29\uc2dd\uc740 Arcus cache server\uc758 -M \uad6c\ub3d9 \uc635\uc158\uc744 \uc9c0\uc815 \uac00\ub2a5\ud558\uba70, default\ub85c\ub294 LRU \uae30\ubc18\uc758 eviction \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \ud2b9\uc815 \uc751\uc6a9\uc5d0\uc11c\ub294 \uc5b4\ub5a4 item\uc774 expire & evict \ub300\uc0c1\uc774 \ub418\uc9c0 \uc54a\uae30\ub97c \uc6d0\ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. Arcus cache server\ub294 \uc774\ub7ec\ud55c item\uc744 sticky item\uc774\ub77c \ud558\uba70, expiration time\uc744 -1\ub85c \uc9c0\uc815\ud558\uba74, sticky item\uc73c\ub85c \uc9c0\uc6d0\ud55c\ub2e4. Sticky item\uc758 \uc0ad\uc81c\ub294 \uc804\uc801\uc73c\ub85c \uc751\uc6a9\uc5d0 \uc758\ud574 \uad00\ub9ac\ub418\uc5b4\uc57c \ud568\uc744 \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. Sticky items\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc9c0 \uc54a\uc744 \uac83\uc73c\ub85c \uc608\uc0c1\ud558\uc9c0\ub9cc, \uc751\uc6a9\uc758 \uc2e4\uc218\ub85c \uc778\ud574 sticky item\ub4e4\uc774 Arcus \uc11c\ubc84\uc758 \uc804\uccb4 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ucc28\uc9c0\ud558\uac8c \ub418\ub294 \uacbd\uc6b0\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud558\uc5ec, \uc804\uccb4 \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \uc77c\ubd80\ub9cc\uc774 sticky items\uc5d0 \uc758\ud574 \uc0ac\uc6a9\ub418\ub3c4\ub85d \uc124\uc815\ud558\ub294 -g(gummed or sticky) \uad6c\ub3d9 \uc635\uc158\uc744 \uc81c\uacf5\ud55c\ub2e4. Sticky items\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc73c\ub85c \uc0ac\uc6a9\ub420 \uba54\ubaa8\ub9ac \ube44\uc728\uc774\uba70, 0 ~ 100 \ubc94\uc704\uc758 \uac12\uc73c\ub85c \uc9c0\uc815\uac00\ub2a5\ud558\ub2e4. \ub514\ud3f4\ud2b8\uc778 0\uc740 sticky items\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774\uba70, 100\uc740 \uc804\uccb4 \uba54\ubaa8\ub9ac\ub97c sticky items \uc800\uc7a5 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4. Memory Allocator Arcus cache server\ub294 item \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \ud560\ub2f9\uacfc \ubc18\ud658\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uad00\ub9ac\ud560 \ubaa9\uc801\uc73c\ub85c \ub450 \uac00\uc9c0 memory allocator\ub97c \uc0ac\uc6a9\ud55c\ub2e4. Slab Allocator Slab allocator\ub294 \uba54\ubaa8\ub9ac \ud06c\uae30 \ubcc4\ub85c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ub098\ub204\uc5b4 \uad00\ub9ac\ud558\uae30 \uc704\ud574 slab class\ub85c \uad6c\ubd84\ud558\uace0, \uac01 slab class\uc5d0\uc11c \ub3d9\uc77c \ud06c\uae30\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\ub4e4\uc778 slab\ub4e4\uc744 free list \ud615\ud0dc\ub85c \uad00\ub9ac\ud558\uba74\uc11c \uadf8 \ud06c\uae30\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \ud560\ub2f9\uacfc \ubc18\ud658\uc744 \uc2e0\uc18d\ud788 \ucc98\ub9ac\ud574 \uc8fc\ub294 memory allocator\uc774\ub2e4. \uae30\uc874 memcached\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub358 \ub300\ud45c\uc801\uc778 memory allocator\uc774\ub2e4. \ucd5c\ub300 slab \ud06c\uae30\ub294 \ud604\uc7ac 1MB\uc774\ub2e4. \ucd5c\uc18c slab \ud06c\uae30 \uc989, \uccab \ubc88\uc9f8 slab class\uc758 slab \ud06c\uae30\uc640 \uadf8 \ub2e4\uc74c slab class\ub4e4\uc758 slab \ud06c\uae30\ub294 \uc544\ub798\uc758 Arcus cache server \uad6c\ub3d9 \uc635\uc158\uc73c\ub85c \uc124\uc815\ud55c\ub2e4. -n <bytes> : minimum space allocated from key+value+flags (default: 48) \ucd5c\uc18c \ud06c\uae30\uc758 slab \ud06c\uae30\ub97c \uacb0\uc815\ud55c\ub2e4. -f <factor> : chunk size growth factor (default: 1.25) Slab class \ubcc4\ub85c slab \ud06c\uae30\uc758 \uc99d\uac00 \uc815\ub3c4\ub97c \uc9c0\uc815\ud558\uba70, 1.0\ubcf4\ub2e4 \ud070 \uac12\uc73c\ub85c \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4. Small Memory Allocator Collection \uc9c0\uc6d0\uc73c\ub85c \uc778\ud574 \uc791\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \ud560\ub2f9\uacfc \ubc18\ud658 \uc694\uccad\uc774 \ub9ce\uc544\uc84c\ub2e4. \uc774\ub7ec\ud55c \uc791\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uae30 \uc704\ud558\uc5ec small memory allocator\ub97c \uc0c8\ub85c \uac1c\ubc1c\ud558\uc5ec \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4. 8000 \ubc14\uc774\ud2b8 \uc774\ud558\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc740 small memory allocator\uac00 \ub2f4\ub2f9\ud558\uba70, 8000 \ubc14\uc774\ud2b8 \ucd08\uacfc\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc740 \uae30\uc874 slab allocator\uac00 \ub2f4\ub2f9\ud55c\ub2e4. Slab Class \ubcc4 LRU \ub9ac\uc2a4\ud2b8 Arcus cache server\ub294 slab class \ubcc4 LRU \ub9ac\uc2a4\ud2b8\ub97c \uc720\uc9c0\ud558\uace0, eviction \ub300\uc0c1 item\uc73c\ub85c \uc624\ub7ab\ub3d9\uc548 \uc811\uadfc\ub418\uc9c0 \uc54a\uc740 item\uc774 \uc120\ud0dd\ub420 \uc218 \uc788\uac8c \ud55c\ub2e4. Small memory allocator \ucd94\uac00\ub85c \uc778\ud574, slab class \ubcc4 LRU \ub9ac\uc2a4\ud2b8\uc5d0 \ubcc0\ub3d9 \uc0ac\ud56d\uc774 \uc788\ub2e4. \ud2b9\ubcc4\ud788, 0\ubc88 slab class\ub97c \ub450\uc5b4 small memory allocator\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70, small memory allocator\ub85c \ubd80\ud130 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ud560\ub2f9\ubc1b\ub294 \uc791\uc740 \ud06c\uae30\uc758 key-value items\uacfc collection items\uc740 0\ubc88 LRU \ub9ac\uc2a4\ud2b8\uc5d0 \uc5f0\uacb0\ub41c\ub2e4. \ub530\ub77c\uc11c, 8000 \ubc14\uc774\ud2b8 \uc774\ud558\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc5d0 \ud574\ub2f9\ud558\ub294 \uae30\uc874 slab class\uc758 LRU \ub9ac\uc2a4\ud2b8\ub4e4\uc740 empty\uac00 \uc0c1\ud0dc\uac00 \ub41c\ub2e4. 1-2. Collection Concept Collection \uc720\ud615\uacfc \uadf8 \uad6c\uc870 \ubc0f \ud2b9\uc9d5\uc740 \uc544\ub798\uc640 \uac19\ub2e4. List - linked list Element\ub4e4\uc758 doubly linked list \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. Head element\uc640 tail element \uc815\ubcf4\ub97c \uc720\uc9c0\ud558\uba74\uc11c, head/tail\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec forward/backward \ubc29\ud5a5\uc73c\ub85c \ud2b9\uc815 \uc704\uce58\uc5d0 \uc788\ub294 element\ub97c \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \ub9ce\uc740 element\ub97c \uac00\uc9c4 list\uc5d0\uc11c \uc911\uac04 \uc704\uce58\uc758 \uc784\uc758 element \uc811\uadfc \uc2dc\uc5d0 \uc131\ub2a5 \uc774\uc288\uac00 \uc788\uc73c\ubbc0\ub85c, list\ub97c queue \uac1c\ub150\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\ud55c\ub2e4. Set - unordered set of unique value Set \uc790\ub8cc \uad6c\uc870\ub294 membership checking\uc5d0 \uc801\ud569\ud558\ub2e4. Unordered set of unique value \uc800\uc7a5\uc744 \uc704\ud574 \ub0b4\ubd80\uc801\uc73c\ub85c hash table \uad6c\uc870\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud558\ub098\uc758 set\uc5d0 \ub4e4\uc5b4\uac00\ub294 elements \uac1c\uc218\uc5d0 \ube44\ub840\ud558\uc5ec hash table \uc804\uccb4 \ud06c\uae30\ub97c \ub3d9\uc801\uc73c\ub85c \uc870\uc815\ud558\uae30 \uc704\ud574, \uc77c\ubc18\uc801\uc778 tree \uad6c\uc870\uc640 \uc720\uc0ac\ud558\uac8c \uc5ec\ub7ec depth\ub85c \uad6c\uc131\ub418\ub294 hash table \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. Map - unordered set of <field, value> Map \uc790\ub8cc \uad6c\uc870\ub294 <field, value> \uc30d\uc744 \uc800\uc7a5\ud55c\ub2e4. Field \uac12\uc758 \uc720\uc77c\uc131 \ubcf4\uc7a5\uacfc field \uae30\uc900\uc73c\ub85c \ud574\ub2f9 element \ud0d0\uc0c9\uc744 \ube60\ub974\uac8c \ud558\uae30 \uc704\ud55c hash table \uad6c\uc870\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud558\ub098\uc758 map\uc5d0 \ub4e4\uc5b4\uac00\ub294 elements \uac1c\uc218\uc5d0 \ube44\ub840\ud558\uc5ec hash table \uc804\uccb4 \ud06c\uae30\ub97c \ub3d9\uc801\uc73c\ub85c \uc870\uc815\ud558\uae30 \uc704\ud574, \uc77c\ubc18\uc801\uc778 tree \uad6c\uc870\uc640 \uc720\uc0ac\ud558\uac8c \uc5ec\ub7ec depth\ub85c \uad6c\uc131\ub418\ub294 hash table \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. B+tree - sorted map based on b+tree key \uac01 element \ub9c8\ub2e4 unique key\ub97c \ub450\uace0, \uc774\ub97c \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c elements \uc9d1\ud569\uc744 b+tree \uad6c\uc870\ub85c \uc800\uc7a5\ud558\uba70, \uc774\ub7ec\ud55c unique key \uae30\ubc18\uc73c\ub85c forward/backward \ubc29\ud5a5\uc758 range scan\uc744 \uc81c\uacf5\ud55c\ub2e4. Elements \uc218\uc5d0 \ube44\ub840\ud558\uc5ec \ub3d9\uc801\uc73c\ub85c depth\ub97c \uc870\uc815\ud558\ub294 b+tree \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc5ec \uba54\ubaa8\ub9ac \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud55c\ub2e4. \uadf8 \uc678\uc5d0, b+tree\uc758 nonleaf node\ub294 \uac01 \ud558\uc704 node \uc911\uc2ec\uc758 sub-tree\uc5d0 \uc800\uc7a5\ub41c element \uac1c\uc218 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub3c4\ub85d \ud574\uc11c, \ud2b9\uc815 element\uc758 position \uc870\ud68c \ubc0f position \uae30\ubc18\uc758 element \uc870\ud68c \uae30\ub2a5\ub3c4 \uc81c\uacf5\ud55c\ub2e4. Collection item\uc740 <key, \"collection meta info\"> \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. Collection meta info\ub294 collection \uc720\ud615\uc5d0 \ub530\ub978 \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\uba70, \ud574\ub2f9 collection\uc758 elements\uc5d0 \uc2e0\uc18d\ud788 \uc811\uadfc\ud558\uae30 \uc815\ubcf4\ub97c \uac00\uc9c4\ub2e4. \uc608\ub97c \ub4e4\uc5b4, list\uc758 head/tail element \uc8fc\uc18c, set\uc758 \ucd5c\uc0c1\uc704 hash table \uc8fc\uc18c, map\uc758 \ucd5c\uc0c1\uc704 hash table \uad6c\uc870, b+tree\uc758 root node \uc8fc\uc18c\uac00 \uc774\uc5d0 \ud574\ub2f9\ub41c\ub2e4. Element \uad6c\uc870 Collection \uc720\ud615\uc5d0 \ub530\ub978 element \uad6c\uc870\ub294 \uc544\ub798\uc640 \uac19\ub2e4. list/set element : < data > \uac01 element\ub294 \ud558\ub098\uc758 \ub370\uc774\ud130 \ub9cc\uc744 \uac00\uc9c4\ub2e4. map element : <field(map element key), data > map\uc5d0\uc11c \uac01 element\ub97c \uad6c\ubd84\ud558\uae30 \uc704\ud55c field\ub97c \ud544\uc218\uc801\uc73c\ub85c \uac00\uc9c0\uba70, field\ub294 \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. b+tree element : < bkey(b+tree key), eflag(element flag), data > b+tree\uc5d0\uc11c elements\ub97c \uc5b4\ub5a4 \uae30\uc900\uc73c\ub85c \uc815\ub82c\ud558\uae30 \uc704\ud55c bkey\ub97c \ud544\uc218\uc801\uc73c\ub85c \uac00\uc9c0\uba70, \uc635\uc158 \uc0ac\ud56d\uc73c\ub85c bkey \uae30\ubc18\uc758 scan \uc2dc\uc5d0 \ud2b9\uc815 element\ub97c filtering\ud558\uae30 \uc704\ud55c eflag\ub97c \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, bkey\uc5d0 \uc885\uc18d\ub418\uc5b4 \ub2e8\uc21c \uc800\uc7a5/\uc870\ud68c \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ub418\ub294 data\ub97c \uac00\uc9c4\ub2e4. BKey (B+Tree Key) B+tree collection\uc5d0\uc11c \uc0ac\uc6a9\uac00\ub2a5\ud55c bkey \ub370\uc774\ud130 \uc720\ud615\uc740 \uc544\ub798 \ub450 \uac00\uc9c0\uc774\ub2e4. 8 bytes unsigned integer 0 ~ 18446744073709551615 \ubc94\uc704\uc758 \uac12\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc720\ud615\uc774 \uc131\ub2a5 \ubc0f \uba54\ubaa8\ub9ac \uacf5\uac04 \uad00\uc810\uc5d0\uc11c hexadecimal \uc720\ud615\ubcf4\ub2e4 \uc720\ub9ac\ud558\ubbc0\ub85c, \uc774 \uc720\ud615\uc758 bkey \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud55c\ub2e4. hexadecimal \u201c0x\u201d\ub85c \uc2dc\uc791\ud558\ub294 \uc9dd\uc218 \uac1c\uc758 hexadecimal \ubb38\uc790\uc5f4\ub85c \ud45c\ud604\ud558\uba70, \ub300\uc18c\ubb38\uc790 \ubaa8\ub450 \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. Arcus cache server\ub294 \ub450 hexadecimal \ubb38\uc790\ub97c 1 byte\ub85c \uc800\uc7a5\ud558\uba70, 1 ~ 31 \uae38\uc774\uc758 variable length byte array\ub85c \uc800\uc7a5\ud55c\ub2e4. hexadecimal \ud45c\ud604\uc774 \uc62c\ubc14\ub978 \uacbd\uc6b0\uc758 \uc800\uc7a5 \ubc14\uc774\ud2b8 \uc218\uc640 \uc798\ubabb\ub41c \uacbd\uc6b0\uc758 \uc774\uc720\ub294 \uc544\ub798\uc640 \uac19\ub2e4. hexadecimal value storage bytes incorrect reason 0x34F40056 4 bytes 0xabcd00778899 6 bytes 34F40056 \uc55e\uc5d0 \"0x\"\uac00 \uc5c6\uc74c 0x34F40 \ud640\uc218 \uac1c\uc758 hexadecimal \ubb38\uc790\uc5f4 0x34F40G 'G'\uac00 hexadecimal \ubb38\uc790\uac00 \uc544\ub2d8 bkey\uc758 \ub300\uc18c \ube44\uad50\ub294 8 bytes unsigned integer \uc720\ud615\uc758 \uac12\uc774\uba74 \ub450 integer \uac12\uc758 \ub2e8\uc21c\ud55c \ube44\uad50 \uc5f0\uc0b0\uc73c\ub85c \uc218\ud589\ud558\uba70, hexadecimal \uc720\ud615\uc758 \uac12\uc774\uba74 \uc544\ub798\uc640 \uac19\uc740 lexicographical order\ub85c \ub450 \uac12\uc744 \ube44\uad50\ud55c\ub2e4. \ub450 hexadecimal\uc758 \uccab\uc9f8 \ubc14\uc774\ud2b8\ubd80\ud130 \ucc28\ub840\ub85c \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ub300\uc18c\ub97c \ube44\uad50\ud558\uc5ec, \ucc28\uc774\ub098\uba74 \ub300\uc18c \ube44\uad50\ub97c \uc885\ub8cc\ud55c\ub2e4. \ub450 hexadecimal \uc911 \uc791\uc740 \uae38\uc774\ub9cc\ud07c\uc758 \ube44\uad50\uc5d0\uc11c \ub450 \uac12\uc774 \ub3d9\uc77c\ud558\uba74, \uae34 \uae38\uc774\uc758 hexadecimal \uac12\uc774 \ud06c\ub2e4\uace0 \ud310\ub2e8\ud55c\ub2e4. \ub450 hexadecimal\uc758 \uae38\uc774\ub3c4 \uac19\uace0 \uac01 \ubc14\uc774\ud2b8\uc758 \uac12\ub3c4 \ub3d9\uc77c\ud558\uba74, \ub450 hexadecimal \uac12\uc740 \uac19\ub2e4\ub77c\uace0 \ud310\ub2e8\ud55c\ub2e4. EFlag (Element Flag) eflag\ub294 \ud604\uc7ac b+tree element\uc5d0\ub9cc \uc874\uc7ac\ud558\ub294 \ud544\ub4dc\uc774\ub2e4. eflag \ub370\uc774\ud130 \uc720\ud615\uc740 hexadecimal \uc720\ud615\ub9cc \uac00\ub2a5\ud558\uba70, bkey\uc758 hexadecimal \ud45c\ud604\uacfc \uc800\uc7a5 \ubc29\uc2dd\uc744 \uadf8\ub300\ub85c \ub530\ub978\ub2e4. EFlag Filter eflag\uc5d0 \ub300\ud55c filter \uc870\uac74\uc740 \uc544\ub798\uc640 \uac19\uc774 \ud45c\ud604\ud558\uba70, (1) eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uacfc \ud2b9\uc815 \uac12\uacfc\uc758 compare \uc5f0\uc0b0\uc774\ub098 (2) eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc5d0 \ub300\ud574 \uc5b4\ub5a4 operand\ub85c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c \ud6c4\uc758 \uacb0\uacfc\uc640 \ud2b9\uc815 \uac12\uacfc\uc758 compare \uc5f0\uc0b0\uc774\ub2e4. eflag_filter: <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <fwhere> eflag \uac12\uc5d0\uc11c bitwise/compare \uc5f0\uc0b0\uc744 \ucde8\ud560 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ub098\ud0c0\ub0b8\ub2e4. bitwise/compare \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub370\uc774\ud130\uc758 length\ub294 <fvalue>\uc758 length\ub85c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, eflag \uc804\uccb4 \ub370\uc774\ud130\ub97c \uc120\ud0dd\ud55c\ub2e4\uba74, <fwhere>\ub294 0\uc774\uc5b4\uc57c \ud558\uace0 <fvalue>\uc758 length\ub294 eflag \uc804\uccb4 \ub370\uc774\ud130\uc758 length\uc640 \ub3d9\uc77c\ud558\uc5ec\uc57c \ud55c\ub2e4. [<bitwop> <foperand>] \uc0dd\ub7b5 \uac00\ub2a5\ud558\uba70, eflag\uc5d0 \ub300\ud55c bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. bitwise \uc5f0\uc0b0\uc774 \uc9c0\uc815\ub418\uba74 \uc774 \uc5f0\uc0b0\uc758 \uacb0\uacfc\uac00 compare \uc5f0\uc0b0\uc758 \ub300\uc0c1\uc774 \ub418\uba70, \uc0dd\ub7b5\ub41c\ub2e4\uba74 eflag \uac12 \uc790\uccb4\uac00 compare \uc5f0\uc0b0\uc758 \ub300\uc0c1\uc774 \ub41c\ub2e4. <bitwop>\ub294 \u201c&\u201d(bitwise and), \u201c|\u201d(bitwise or), \u201c^\u201d(bitwise xor) \uc911\uc758 \ud558\ub098\ub85c bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. <foperand>\ub294 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 operand\ub85c hexadecimal\ub85c \ud45c\ud604\ud55c\ub2e4. <foperand>\uc758 \uae38\uc774\ub294 compare \uc5f0\uc0b0\uc744 \ucde8\ud55c <fvalue>\uc758 \uae38\uc774\uc640 \ub3d9\uc77c\ud558\uc5ec\uc57c \ud55c\ub2e4. <compop> <fvalue> eflag\uc5d0 \ub300\ud55c compare \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. <compop>\ub294 \"EQ\", \"NE', \"LT\", \"LE\", \"GT\", \"GE\" \uc911\uc758 \ud558\ub098\ub85c compare \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud558\uba70, <fvalue>\ub294 compare \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub300\uc0c1 \uac12\uc73c\ub85c \ub9c8\ucc2c\uac00\uc9c0\ub85c hexadecimal\ub85c \ud45c\ud604\ud55c\ub2e4. IN \ub610\ub294 NOT IN \uc870\uac74\uc744 \uba85\uc2dc\ud560 \uc218\ub3c4 \uc788\ub2e4. IN \uc870\uac74\uc740 \"EQ\" \uc5f0\uc0b0\uacfc comma separated hexadecimal values\ub85c \uba85\uc2dc\ud558\uba74 \ub418\uace0, NOT IN \uc870\uac74\uc740 \"NE\" \uc5f0\uc0b0\uacfc comma separated hexadecimal values\ub85c \uba85\uc2dc\ud558\uba74 \ub41c\ub2e4. \uc774 \uacbd\uc6b0, comma\ub85c \uad6c\ubd84\ub41c hexadecimal values\uc758 \ucd5c\ub300 \uc218\ub294 100 \uac1c\uae4c\uc9c0\ub9cc \uc9c0\uc6d0\ud55c\ub2e4. \ud558\ub098\uc758 b+tree\uc758 element\uc5d0\ub294 \ub3d9\uc77c \uae38\uc774\uc758 element flag\ub97c \uc0ac\uc6a9\ud558\uae38 \uad8c\uc7a5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc751\uc6a9\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ud558\ub098\uc758 b+tree\uc5d0 \uc18c\uc18d\ub41c elements \uc774\ub354\ub77c\ub3c4 eflag\uac00 \uc0dd\ub7b5\ub420 \uc218\ub3c4 \uc788\uace0 \uc11c\ub85c \ub2e4\ub978 \uae38\uc774\uc758 eflag\ub97c \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \uc774 \uacbd\uc6b0, \uc544\ub798\uc640 \uac19\uc774 eflag filtering\uc774 \uc560\ub9e4\ubaa8\ud638\ud574 \uc9c8 \uc218 \uc788\ub2e4. \uc774 \uc0c1\ud669\uc5d0\uc11c\ub294 filter \uc870\uac74\uc758 \ube44\uad50 \uc5f0\uc0b0\uc774 \u201cNE\u201d\uc774\uba74 true\ub85c \ud310\ubcc4\ud558\uace0, \uadf8 \uc678\uc758 \ube44\uad50 \uc5f0\uc0b0\uc774\uba74 false\ub85c \ud310\ubcc4\ud55c\ub2e4. eflag\uac00 \uc5c6\ub294 element\uc5d0 eflag_filter \uc870\uac74\uc774 \uc8fc\uc5b4\uc9c8 \uc218 \uc788\ub2e4. eflag\uac00 \uc788\uc9c0\ub9cc eflag_filter \uc870\uac74\uc5d0\uc11c \uba85\uc2dc\ub41c offset\uacfc length\uc758 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, eflag\uac00 4 bytes\uc778 \uc0c1\ud669\uc5d0\uc11c (1) eflag_filter \uc870\uac74\uc758 offset\uc740 5\uc778 \uacbd\uc6b0\uc774\uac70\ub098 (2) eflag_filter \uc870\uac74\uc758 offset\uc740 3\uc774\uace0 length\ub294 4\uc778 \uacbd\uc6b0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4. EFlag Update Eflag\uc758 \uc804\uccb4 \ub610\ub294 \ubd80\ubd84 \uac12\uc5d0 update \uc5f0\uc0b0\ub3c4 \uac00\ub2a5\ud558\uba70 \uc544\ub798\uc640 \uac19\uc774 \ud45c\ud604\ud55c\ub2e4. Eflag \uc804\uccb4 \ubcc0\uacbd\uc740 \uc0c8\ub85c\uc6b4 eflag \uac12\uc73c\ub85c \uad50\uccb4\ud558\ub294 \uac83\uc774\uba70, \ubd80\ubd84 \ubcc0\uacbd\uc740 eflag\uc758 \ubd80\ubd84 \ub370\uc774\ud130\uc5d0 \ub300\ud574 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c \uacb0\uacfc\ub85c \uad50\uccb4\ud55c\ub2e4. eflag_update: [<fwhere> <bitwop>] <fvalue> [<fwhere> <bitwop>] eflag\ub97c \ubd80\ubd84 \ubcc0\uacbd\ud560 \uacbd\uc6b0\ub9cc \uc9c0\uc815\ud55c\ub2e4. \uc740 eflag\uc5d0\uc11c \ubd80\ubd84 \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ub098\ud0c0\ub0b4\uba70, \uc774 \uacbd\uc6b0, \ubd80\ubd84 \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 length\ub294 \ub4a4\uc5d0 \uba85\uc2dc\ub418\ub294 <fvalue>\uc758 length\ub85c \uacb0\uc815\ub41c\ub2e4. <bitwop>\ub294 \ubd80\ubd84 \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ucde8\ud560 bitwise \uc5f0\uc0b0\uc73c\ub85c, \u201c&\u201d(bitwise and), \u201c|\u201d(bitwise or), \u201c^\u201d(bitwise xor) \uc911\uc758 \ud558\ub098\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. <fvalue> \ubcc0\uacbd\ud560 new value\ub97c \ub098\ud0c0\ub0b8\ub2e4. \uc55e\uc11c \uae30\uc220\ud55c <fwhere>\uacfc <bitwop>\uac00 \uc0dd\ub7b5\ub418\uba74, eflag\uc758 \uc804\uccb4 \ub370\uc774\ud130\ub97c <fvalue>\ub85c \ubcc0\uacbd\ud55c\ub2e4. \ubd80\ubd84 \ubcc0\uacbd\uc744 \uc704\ud55c <fwhere>\uacfc <bitwop>\uac00 \uc9c0\uc815\ub418\uba74 <fvalue>\ub294 eflag \ubd80\ubd84 \ub370\uc774\ud130\uc5d0 \ub300\ud574 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 operand\ub85c \uc0ac\uc6a9\ub418\uba70, bitwise \uc5f0\uc0b0\uc758 \uacb0\uacfc\uac00 eflag\uc758 new value\ub85c \ubcc0\uacbd\ub41c\ub2e4. \uae30\uc874 eflag \uac12\uc744 delete\ud558\uc5ec eflag\uac00 \uc5c6\ub294 \uc0c1\ud0dc\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \uc774\ub97c \uc704\ud574\uc11c\ub294 <fwhere>\uacfc <bitwop>\ub97c \uc0dd\ub7b5\ud558\uace0 <fvalue> \uac12\uc73c\ub85c 0\uc744 \uc8fc\uba74 \ub41c\ub2e4. 1-3. Item Attributes Arcus cache server\ub294 collection \uae30\ub2a5 \uc9c0\uc6d0\uc73c\ub85c \uc778\ud574, \uae30\uc874 key-value item \uc720\ud615 \uc678\uc5d0 list, set, map, b+tree item \uc720\ud615\uc744 \uac00\uc9c4\ub2e4. \uac01 item \uc720\ud615\uc5d0 \ub530\ub77c \uc124\uc815/\uc870\ud68c \uac00\ub2a5\ud55c \uc18d\uc131\ub4e4(attributes)\uc774 \uad6c\ubd84\ub418\uba70, \uc774\ub4e4\uc758 \uac1c\uc694\ub294 \uc544\ub798 \ud45c\uc640 \uac19\ub2e4. \uc544\ub798 \ud45c\ub294 \uac01 \uc18d\uc131\uc774 \uc801\uc6a9\ub418\ub294 item \uc720\ud615, \uc18d\uc131\uc758 \uac04\ub2e8\ud55c \uc124\uba85, \ud5c8\uc6a9\uac00\ub2a5\ud55c \uac12\ub4e4\uacfc \ub514\ud3f4\ud2b8 \uac12\uc744 \ub098\ud0c0\ub0b8\ub2e4. Attribute Name Item Type Description Allowed Values Default Value flags all data specific flags 4 bytes unsigned integer 0 expiretime all item expiration time 4 bytes singed integer -1: sticky 0: never expired >0:expired in the future 0 type all item type \"kv\", \"list\", \"set\", \"map\", \"b+tree\" N/A count collection current # of elements 4 bytes unsigned integer N/A maxcount collection maximum # of elements 4 bytes unsigned integer N/A overflowaction collection overflow action \"error\": all collections \"head_trim\": list \"tail_trim\": list \"smallest_trim\": b+tree \"largest_trim\": b+tree \"smallest_silent_trim\": b+tree \"largest_silent_trim\": b+tree list: \"tail_trim\" set: \"error\" map: \"error\" b+tree: \"smallest_trim\" readable collection redable/unreadable \"on\", \"off\" \"on\" maxbkeyrange b+tree only maximum bkey range 8 bytes unsigned integer, hexadecimal (max 31 bytes) 0 Arcus cache server\ub294 item \uc18d\uc131\ub4e4\uc744 \uc870\ud68c\ud558\uac70\ub098 \ubcc0\uacbd\ud558\ub294 \uc6a9\ub3c4\uc758 getattr \uba85\ub839\uacfc setattr \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc774\ub4e4 \uba85\ub839\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85\uc740 Item Attribute \uba85\ub839 \uc744 \ucc38\uace0 \ubc14\ub780\ub2e4. Item \uc18d\uc131\ub4e4 \uc911 \uc815\ud655\ud55c \uc774\ud574\ub97c \ub3d5\uae30 \uc704\ud574 \ucd94\uac00 \uc124\uba85\uc774 \ud544\uc694\ud55c \uc18d\uc131\ub4e4\uc5d0 \ub300\ud574 \uc544\ub798\uc5d0\uc11c \uc790\uc138\ud788 \uc124\uba85\ud55c\ub2e4. flags \uc18d\uc131 Flags\ub294 item\uc758 data-specific \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Arcus java client\ub294 \uc5b4\ub5a4 java object\ub97c cache server\uc5d0 \uc800\uc7a5\ud560 \uacbd\uc6b0, \uadf8 java object\uc758 type\uc5d0 \ub530\ub77c serialization(or marshalling)\ud558\uc5ec \uc800\uc7a5\ud560 data\ub97c \ub9cc\ub4e4\uace0, \uadf8 java object\uc758 type \uc815\ubcf4\ub97c flags \uac12\uc73c\ub85c \ud558\uc5ec Arcus cache server\uc5d0 \uc694\uccad\ud558\uc5ec \uc800\uc7a5\ud55c\ub2e4. Data \uc870\ud68c \uc2dc\uc5d0\ub294 Arcus cache server\ub85c \ubd80\ud130 data\uc640 \ud568\uaed8 flags \uc815\ubcf4\ub97c \ud568\uaed8 \uc5bb\uc5b4\uc640\uc11c, \ud574\ub2f9 java object\uc758 type\uc5d0 \ub530\ub77c \uadf8 data\ub97c de-serialization(or de-marshalling)\ud558\uc5ec java object\ub97c \uc0dd\uc131\ud55c\ub2e4. expiretime \uc18d\uc131 Item\uc758 expiretime \uc18d\uc131\uc73c\ub85c \uadf8 item\uc758 expiration time\uc744 \ucd08(second) \ub2e8\uc704\ub85c \uc124\uc815\ud55c\ub2e4. Arcus cache server\ub294 expire \ub418\uc9c0 \uc54a\uace0 \uba54\ubaa8\ub9ac \ubd80\uc871 \uc0c1\ud669\uc5d0\uc11c\ub3c4 evict \ub418\uc9c0 \uc54a\ub294 sticky item \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. Sticky item \ub610\ud55c expiretime \uc18d\uc131\uc73c\ub85c \uc9c0\uc815\ud55c\ub2e4. -1 : sticky item\uc73c\ub85c \uc124\uc815 0 : never expired item\uc73c\ub85c \uc124\uc815, \uadf8\ub7ec\ub098 \uba54\ubaa8\ub9ac \ubd80\uc871 \uc2dc\uc5d0 evict\ub420 \uc218 \uc788\ub2e4. X <= (60 * 60 * 24 * 30) : 30\uc77c \uc774\ud558\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"\ud604\uc7ac \uc2dc\uac04 + X(\ucd08)\"\ub85c \uacb0\uc815\ub41c\ub2e4. -2 \uc774\ud558\uc774\uba74, \uadf8 \uc989\uc2dc expire \ub41c\ub2e4. X > (60 * 60 * 24 * 30) : 30\uc77c \ucd08\uacfc\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"X\"\ub85c \uacb0\uc815\ub41c\ub2e4. \uc774 \uacbd\uc6b0, X\ub97c unix time\uc73c\ub85c \uc778\uc2dd\ud558\uc5ec expiration time\uc73c\ub85c \uc124\uc815\ud558\ub294 \uac83\uc774\uba70, X\uac00 \ud604\uc7ac \uc2dc\uac04\ubcf4\ub2e4 \uc791\uc73c\uba74 \uadf8 \uc989\uc2dc expire \ub41c\ub2e4. maxcount \uc18d\uc131 Collection item\uc5d0\ub9cc \uc720\ud6a8\ud55c \uc18d\uc131\uc73c\ub85c, \ud558\ub098\uc758 collection\uc5d0 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \ucd5c\ub300 element \uc218\ub97c \uaddc\uc815\ud55c\ub2e4. Maxcount \uc18d\uc131\uc758 hard limit\uacfc default(\uc124\uc815 \uc0dd\ub7b5 \ub610\ub294 0\uc744 \uac12\uc73c\ub85c \uc8fc\ub294 \uacbd\uc6b0) \uac12\uc740 \uc544\ub798\uc640 \uac19\ub2e4. hard limit : 50000 default value : 4000 Maxcount \uc18d\uc131\uc758 hard limit\uc744 \uc791\uac8c \uaddc\uc815\ud55c \uc774\uc720\ub294 O(small N)\uc758 \uc218\ud589 \ube44\uc6a9\uc744 \uac00\uc9c0\ub3c4\ub85d \ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. Event-driven processing \ubaa8\ub378\uc5d0 \ub530\ub77c \ud558\ub098\uc758 worker thread\uac00 \ube44\ub3d9\uae30 \ubc29\uc2dd\uc73c\ub85c \uc5ec\ub7ec client requests\ub97c \ucc98\ub9ac\ud574\uc57c \ud558\ub294 \uc0c1\ud669\uc5d0\uc11c, \ud55c request\uc758 \ucc98\ub9ac \ube44\uc6a9\uc774 \uac00\uae09\uc801 \uc791\uc544\uc57c\ub9cc \ub2e4\ub978 request\uc758 execution latency\uc5d0 \uc8fc\ub294 \uc601\ud5a5\uc744 \ucd5c\uc18c\ud654\ud560 \uc218 \uc788\ub2e4. overflowaction \uc18d\uc131 Collection\uc758 maxcount\ub97c \ucd08\uacfc\ud558\uc5ec element \ucd94\uac00\ud558\uba74 overflow\uac00 \ubc1c\uc0dd\ud558\uba70, \uc774 \uacbd\uc6b0 \ucde8\ud560 action\uc744 \uc9c0\uc815\ud55c\ub2e4. \"error\" \ubaa8\ub4e0 collection \uc720\ud615\uc5d0 \uc124\uc815 \uac00\ub2a5\ud55c \uc18d\uc131\uc774\ub2e4. set\uacfc map collection\uc758 default overflow action\uc774\ub2e4. \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uace0 overflow \uc624\ub958\ub97c \ub9ac\ud134\ud55c\ub2e4. \"head_trim\", \"tail_trim\" list collection\uc5d0\ub9cc \uc124\uc815 \uac00\ub2a5\ud55c overflow action\uc774\ub2e4. list collection\uc758 default overflow action\uc740 \"tail_trim\"\uc774\ub2e4. \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub97c \ud5c8\uc6a9\ud558\ub294 \ub300\uc2e0 list\uc758 head \ub610\ub294 tail\uc5d0 \uc704\uce58\ud55c \uae30\uc874 element\ub97c \uc81c\uac70\ud55c\ub2e4. Overflow trim \ubc1c\uc0dd \uc2dc, trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b4\ub294 trim flag\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc720\uc9c0\ud558\uc9c0 \uc54a\ub294\ub2e4. \"smallest_trim\", \"largest_trim\" b+tree collecton\uc5d0\ub9cc \uc124\uc815 \uac00\ub2a5\ud55c overflow action\uc774\ub2e4. b+tree collecton\uc758 default overflow action\uc740 \"smallest_trim\"\uc774\ub2e4. \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub97c \ud5c8\uc6a9\ud558\ub294 \ub300\uc2e0 smallest bkey \ub610\ub294largest bkey\ub97c \uac00\uc9c4 \uae30\uc874 element\ub97c \uc81c\uac70\ud55c\ub2e4. Overflow trim \ubc1c\uc0dd \uc2dc, trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b4\ub294 trim flag\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc720\uc9c0\ud558\uba70, trim \ubc1c\uc0dd\ud55c bkey \uc601\uc5ed\uc744 \uc870\ud68c\ud560 \uacbd\uc6b0 \uc751\ub2f5 \uacb0\uacfc\uc5d0 trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ud3ec\ud568\uc2dc\ud0a8\ub2e4. \"smallest_silent_trim\", \"largest_silent_trim\" \"samllest_trim\", \"largest_trim\"\uacfc \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud558\ub294 overflow action\uc774\ub2e4. \ucc28\uc774\uc810\uc740 overflow trim\uc774 \ubc1c\uc0dd\ud558\ub354\ub77c\ub3c4 trim flag\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc720\uc9c0\ud558\uc9c0 \uc54a\uc73c\uba70, trim \ubc1c\uc0dd\ud55c bkey \uc601\uc5ed\uc744 \uc870\ud68c\ud558\ub354\ub77c\ub3c4 \uc870\ud68c \uacb0\uacfc\uc5d0 trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ud3ec\ud568\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4. \uc751\uc6a9\uc5d0\uc11c \uc8fc\uc758\ud560 \uc0ac\ud56d\uc740 trim \uc5ec\ubd80\ub098 trim\ub41c \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uac80\uc0ac\ub97c \uc9c1\uc811 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. \ucc38\uace0\ub85c, \uc544\ub798\uc5d0 \uae30\uc220\ud558\ub294 maxbkeyrange \uc18d\uc131\uc5d0 \ub530\ub77c element\ub97c \uc81c\uac70\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 overflow action\uc774 \ucc38\uc870\ub41c\ub2e4. readable \uc18d\uc131 Arcus cache server\ub294 \ub2e4\uc218 element\ub97c \uac00\uc9c4 collection\uc744 atomic\ud558\uac8c \uc0dd\uc131\ud558\ub294 \uba85\ub839\uc744 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0, \ud558\ub098\uc758 element\ub97c \ucd94\uac00\ud558\ub294 \uba85\ub839\uc744 \ubc18\ubcf5 \uc218\ud589\ud568\uc73c\ub85c\uc368 \uc6d0\ud558\ub294 collection\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc774 \uacbd\uc6b0, \ud558\ub098\uc758 collection\uc774 \uc644\uc131\ub418\uae30 \uc804\uc758 incomplete collection\uc774 \uc751\uc6a9\uc5d0\uac8c \ub178\ucd9c\ub420 \uc218 \uc788\ub294 \ubb38\uc81c\uac00 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5b4\ub5a4 \uc0ac\uc6a9\uc790\uc758 SNS \uce5c\uad6c \uc815\ubcf4\ub97c set collection \ud615\ud0dc\ub85c cache\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc77c\ubd80 \uce5c\uad6c \uc815\ubcf4\ub9cc set collection\uc5d0 \uc800\uc7a5\ub41c \uc0c1\ud0dc\uc5d0\uc11c \uadf8 \uc0ac\uc6a9\uc790\uc758 \uc804\uccb4 \uce5c\uad6c \uc815\ubcf4\ub97c \uc870\ud68c\ud558\ub294 \uc694\uccad\uc774 \ub4e4\uc5b4\uc628\ub2e4\uba74, incomplete \uce5c\uad6c \uc815\ubcf4\uac00 \uc751\uc6a9\uc5d0\uac8c \ub178\ucd9c\ub418\uac8c \ub41c\ub2e4. \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 collection \uc0dd\uc131\uc5d0 \ub300\ud574 read atomicity\ub97c \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc774 \ud544\uc694\ud558\uba70, \uc774 \uae30\ub2a5\uc758 \uad6c\ud604\uc744 \uc704\ud574 readable \uc18d\uc131\uc744 \uc81c\uacf5\ud55c\ub2e4. \ucc98\uc74c empty collection \uc0dd\uc131 \uc2dc\uc5d0 readable \uc18d\uc131\uc744 off \uc0c1\ud0dc\ub85c \uc124\uc815\ud574\uc11c \uadf8 collection\uc5d0 \ub300\ud55c \uc870\ud68c \uc694\uccad\uc740 UNREADABLE \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uac8c \ud558\uace0, \uadf8 collection\uc5d0 \ubaa8\ub4e0 element\ub4e4\uc744 \ucd94\uac00\ud55c \ud6c4\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c readable \uc18d\uc131\uc744 \ub2e4\uc2dc on \uc0c1\ud0dc\ub85c \ubcc0\uacbd\ud568\uc73c\ub85c\uc368 complete collection\uc774 \uc751\uc6a9\uc5d0 \uc758\ud574 \uc870\ud68c\ub420 \uc218 \uc788\uac8c \ud560 \uc218 \uc788\ub2e4. maxbkeyrange \uc18d\uc131 B+tree only \uc18d\uc131\uc73c\ub85c smallest bkey\uc640 largest bkey\uc758 \ucd5c\ub300 \ubc94\uc704\ub97c \uaddc\uc815\ud55c\ub2e4. B+tree\uc5d0 \uc124\uc815\ub41c maxbkeyrange\ub97c \uc704\ubc30\uc2dc\ud0a4\ub294 \uc0c8\ub85c\uc6b4 bkey\ub97c \uac00\uc9c4 element\ub97c \uc0bd\uc785\ud558\ub294 \uacbd\uc6b0, b+tree\uc758 overflow action \uc815\ucc45\uc5d0 \ub530\ub77c \uc624\ub958\ub97c \ub0b4\uac70\ub098 smallest/largest bkey\ub97c \uac00\uc9c4 elements\ub97c \uc81c\uac70\ud568\uc73c\ub85c\uc368 \ud56d\uc0c1 maxbkeyrange \ud2b9\uc131\uc744 \uc900\uc218\ud558\uac8c \ud55c\ub2e4. Maxbkeyrange \uc18d\uc131\uc5d0 \uc758\ud55c element \uc81c\uac70\ub294 \uc751\uc6a9 \uc694\uccad\uc5d0 \uc758\ud55c \uba85\uc2dc\uc801\uc778 element \uc81c\uac70\uc640 \ub3d9\uc77c\ud558\ubbc0\ub85c, trim\uc73c\ub85c \ucc98\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacb0\uad6d, maxcount \uc18d\uc131\uc5d0 \uc758\ud55c overflow trim \ub9cc\uc744 trim\uc73c\ub85c \ucc98\ub9ac\ud55c\ub2e4. maxbkeyrange\uc758 \uc0ac\uc6a9 \uc608\ub85c, \uc5b4\ub5a4 \uc751\uc6a9\uc774 data \uc0dd\uc131 \uc2dc\uac04\uc744 bkey\ub85c \ud558\uc5ec \uadf8 data\ub97c b+tree\uc5d0 \uc800\uc7a5\ud558\uace0 \ucd5c\uadfc 2\uc77c\uce58 data \ub9cc\uc744 b+tree\uc5d0 \uc720\uc9c0\ud558\uae38 \uc6d0\ud55c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \ucd08 \ub2e8\uc704\uc758 \uc2dc\uac04 \uac12\uc744 bkey \uac12\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74, maxbkeyrange\ub294 2\uc77c\uce58\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc778 172880(2 * 24 * 60 * 60)\uc73c\ub85c \uc9c0\uc815\ud558\uace0, \ucd5c\uadfc data\ub9cc\uc744 \ubcf4\uad00\ud558\uae30 \uc704\ud574 overflowaction\uc740 \"smallest_trim\"\uc73c\ub85c \uc9c0\uc815\ud558\uba74 \ub41c\ub2e4. \uc774\ub7ec\ud55c \uc9c0\uc815\uc73c\ub85c, \uc0c8\ub85c\uc6b4 data\uac00 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 b+tree\uc5d0\uc11c 2\uc77c\uce58\uac00 \uc9c0\ub09c data\ub294 maxbkeyrange\uc640 overflowaction\uc5d0 \uc758\ud574 \uc790\ub3d9\uc73c\ub85c \uc81c\uac70\ub41c\ub2e4. \ub9cc\uc57d, \uc774\ub7f0 \uae30\ub2a5\uc774 \uc5c6\ub2e4\uba74, \uc751\uc6a9\uc5d0\uc11c \uc624\ub798\ub41c(2\uc77c\uc774 \uc9c0\ub09c) data\ub97c \uc9c1\uc811 \uc81c\uac70\ud558\ub294 \uc791\uc5c5\uc744 \uc218\ud589\ud574\uc57c \ud55c\ub2e4. maxbkeyrange \uc124\uc815\uc740 bkey\uc758 \ub370\uc774\ud130 \uc720\ud615\uc5d0 \ub9de\uac8c \uc124\uc815\ud558\uc5ec\uc57c \ud558\uba70, maxbkeyrange \uc124\uc815\uc774 \uc0dd\ub7b5\ub418\uac70\ub098 \uba85\uc2dc\uc801\uc73c\ub85c 0\uc744 \uc904 \uacbd\uc6b0\uc758 default \uac12\uc740 bkey \ub370\uc774\ud130 \uc720\ud615\uc5d0 \ubb34\uad00\ud558\uac8c unlimited maxbkeyrange\ub97c \uc758\ubbf8\ud55c\ub2e4.","title":"1. ARCUS Basic Concept"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#1-1-basic-terms","text":"Arcus cache server\uc758 key-value \ubaa8\ub378\uc740 \uc544\ub798\uc758 \uae30\ubcf8 \uc81c\uc57d \uc0ac\ud56d\uc744 \uac00\uc9c4\ub2e4. \uae30\uc874 key-value \ubaa8\ub378\uc758 \uc81c\uc57d \uc0ac\ud56d Key\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 32000 character\uc774\ub2e4. (arcus-memcached 1.11 \uc774\ud6c4 \ubc84\uc804) \uae30\uc874 \ubc84\uc804\uc5d0\uc11c key \ucd5c\ub300 \ud06c\uae30\ub294 250 character\uc774\ub2e4. Value\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 1MB(trailing \ubb38\uc790\uc778 \u201c\\r\\n\u201d \ud3ec\ud568\ud55c \uae38\uc774) \uc774\ub2e4. Collection \uc81c\uc57d \uc0ac\ud56d \ud558\ub098\uc758 collection\uc5d0 \ub4e4\uc5b4\uac08 \uc218 \uc788\ub294 \ucd5c\ub300 element \uac1c\uc218\ub294 50,000\uac1c\uc774\ub2e4. Collection\uc758 \uac01 element\uac00 \uac00\uc9c0\ub294 value\uc758 \ucd5c\ub300 \ud06c\uae30\ub294 4KB(trailing \ubb38\uc790\uc778 \u201c\\r\\n\u201d \ud3ec\ud568\ud55c \uae38\uc774) \uc774\ub2e4.","title":"1-1. Basic Terms"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#_1","text":"\uc11c\ube44\uc2a4\ucf54\ub4dc(service code)\ub294 Arcus\uc5d0\uc11c cache cloud\ub97c \uad6c\ubd84\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. Arcus cache cloud \uc11c\ube44\uc2a4\ub97c \uc751\uc6a9\ub4e4\uc5d0\uac8c \uc81c\uacf5\ud55c\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c \"\uc11c\ube44\uc2a4\ucf54\ub4dc\"\ub77c\ub294 \uc6a9\uc5b4\ub97c \uc0ac\uc6a9\ud558\uac8c \ub418\uc5c8\ub2e4. \ud558\ub098\uc758 \uc751\uc6a9\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 Arcus cache cloud\ub97c \uad6c\ucd95\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Arcus java client \uac1d\uccb4\ub294 \ud558\ub098\uc758 Arcus \uc11c\ube44\uc2a4\ucf54\ub4dc\ub9cc\uc744 \uac00\uc9c0\uba70, \ud558\ub098\uc758 Arcus cache cloud\uc5d0\ub9cc \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \ud574\ub2f9 \uc751\uc6a9\uc774 \ub458 \uc774\uc0c1\uc758 Arcus cache cloud\uc5d0 \uc811\uadfc\ud574\uc57c \ud55c\ub2e4\uba74, \uac01 Arcus cache cloud\uc758 \uc11c\ube44\uc2a4\ucf54\ub4dc\ub97c \uac00\uc9c0\ub294 Arcus java client \uac1d\uccb4\ub97c \ub530\ub85c \uc0dd\uc131\ud558\uc5ec \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud55c\ub2e4.","title":"\uc11c\ube44\uc2a4\ucf54\ub4dc"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#arcus-admin","text":"Arcus admin\uc740 ZooKeeper\ub97c \uc774\uc6a9\ud558\uc5ec \uac01 \uc11c\ube44\uc2a4 \ucf54\ub4dc\uc5d0 \ud574\ub2f9\ud558\ub294 Arcus cache cloud\ub97c \uad00\ub9ac\ud55c\ub2e4. \ud2b9\uc815 \uc11c\ube44\uc2a4 \ucf54\ub4dc\uc5d0 \ub300\ud55c cache server list\ub97c \uad00\ub9ac\ud558\uba70, cache server \ucd94\uac00 \ubc0f \uc0ad\uc81c\uc5d0 \ub300\ud574 cache server list\ub97c \ucd5c\uc2e0 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ud558\uba70, \uc11c\ube44\uc2a4 \ucf54\ub4dc\uc5d0 \ub300\ud55c cache server list \uc815\ubcf4\ub97c arcus client\uc5d0\uac8c \uc804\ub2ec\ud55c\ub2e4. Arcus admin\uc740 highly available\ud558\uc5ec\uc57c \ud558\ubbc0\ub85c, \uc5ec\ub7ec ZooKeeper \uc11c\ubc84\ub4e4\uc744 \ud558\ub098\uc758 ZeeKeeper ensemble\ub85c \uad6c\uc131\ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4.","title":"Arcus Admin"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#cache-key","text":"Cache key\ub294 Arcus cache server\uc5d0 \uc800\uc7a5\ud560 \ub370\uc774\ud130\ub97c \ub300\ud45c\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. Cache key \ud615\uc2dd\uc740 \uc544\ub798\uc640 \uac19\ub2e4. Cache Key : [<prefix>:]<subkey> <prefix> - Cache key\uc758 \uc55e\uc5d0 \ubd99\ub294 namespace\uc774\ub2e4. Prefix \ub2e8\uc704\ub85c cache server\uc5d0 \uc800\uc7a5\ub41c key\ub4e4\uc744 \uadf8\ub8f9\ud654\ud558\uc5ec flush\ud558\uac70\ub098 \ud1b5\uacc4 \uc815\ubcf4\ub97c \ubcfc \uc218 \uc788\ub2e4. Prefix\ub97c \uc0dd\ub7b5\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uac00\uae09\uc801 \uc0ac\uc6a9\ud558\uae38 \uad8c\ud55c\ub2e4. delimiter - Prefix\uc640 subkey\ub97c \uad6c\ubd84\ud558\ub294 \ubb38\uc790\ub85c default delimiter\ub294 \ucf5c\ub860(\u2018:\u2019)\uc774\ub2e4. <subkey> - \uc77c\ubc18\uc801\uc73c\ub85c \uc751\uc6a9\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 Key\uc774\ub2e4. Prefix\uc640 subkey\ub294 \uba85\uba85 \uaddc\uce59\uc744 \uac00\uc9c0\ubbc0\ub85c \uc8fc\uc758\ud558\uc5ec\uc57c \ud55c\ub2e4. Prefix\ub294 \uc601\ubb38 \ub300\uc18c\ubb38\uc790, \uc22b\uc790, \uc5b8\ub354\ubc14(_), \ud558\uc774\ud508(-), \ud50c\ub7ec\uc2a4(+), \uc810(.) \ubb38\uc790\ub9cc\uc73c\ub85c \uad6c\uc131\ub420 \uc218 \uc788\uc73c\uba70, \uc774 \uc911\uc5d0 \ud558\uc774\ud508(-)\uc740 prefix \uba85\uc758 \uccab\ubc88\uc9f8 \ubb38\uc790\ub85c \uc62c \uc218 \uc5c6\ub294 \uc81c\uc57d\uc774 \uc788\ub2e4. Subkey\ub294 \uacf5\ubc31\uc744 \ud3ec\ud568\ud560 \uc218 \uc5c6\uc73c\uba70, \uae30\ubcf8\uc801\uc73c\ub85c alphanumeric\ub9cc\uc744 \uc0ac\uc6a9\ud558\uae38 \uad8c\uc7a5\ud55c\ub2e4.","title":"Cache Key"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#cache-item","text":"Arcus cache server\ub294 simple key-value \uc678\uc5d0 collection \uc9c0\uc6d0\uc73c\ub85c \ub2e4\uc591\ud55c item \uc720\ud615\uc744 \uac00\uc9c4\ub2e4. simple key-value item - \uae30\uc874 key-value item collection item list item - \ub370\uc774\ud130\ub4e4\uc758 linked list\uc744 value\uac00\uc9c0\ub294 item set item - \uc720\uc77c\ud55c \ub370\uc774\ud130\ub4e4\uc758 \uc9d1\ud569\uc744 value\ub85c \uac00\uc9c0\ub294 item map item - <field, value>\uc30d\uc73c\ub85c \uad6c\uc131\ub41c \ub370\uc774\ud130 \uc9d1\ud569\uc744 value\ub85c \uac00\uc9c0\ub294 item b+tree item - b+tree key \uae30\ubc18\uc73c\ub85c \uc815\ub82c\ub41c \ub370\uc774\ud130 \uc9d1\ud569\uc744 value\ub85c \uac00\uc9c0\ub294 item","title":"Cache Item"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#expiration-eviction-and-sticky","text":"\uac01 cache item\uc740 expiration time \uc18d\uc131\uc744 \uac00\uc9c0\uba70, \uc774 \uac12\uc758 \uc124\uc815\uc744 \ud1b5\ud574 expire\ub418\uc9c0 \uc54a\ub294 item \ub610\ub294 \ud2b9\uc815 \uc2dc\uac04 \uc774\ud6c4\uc5d0 \uc790\ub3d9 expire\ub420 item\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85\uc740 Item Attribute \uc124\uba85 \uc744 \ucc38\uace0 \ubc14\ub780\ub2e4. Arcus cache server\ub294 memory cache\uc774\uba70, \ud55c\uc815\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c caching\ud55c\ub2e4. \uba54\ubaa8\ub9ac \uacf5\uac04\uc774 \ubaa8\ub450 \uc0ac\uc6a9\ub41c \uc0c1\ud0dc\uc5d0\uc11c \uc0c8\ub85c\uc6b4 item \uc800\uc7a5 \uc694\uccad\uc774 \ub4e4\uc5b4\uc62c \uacbd\uc6b0, Arcus cache server\ub294 \"out of memory\" \uc624\ub958\ub97c \ub0b4\uac70\ub098 LRU \uae30\ubc18\uc758 eviction \ubc29\uc2dd \uc989, \uac00\uc7a5 \uc624\ub7ab\ub3d9\uc548 \uc811\uadfc\ub418\uc9c0 \uc54a\uc740 item\uc744 \uc81c\uac70\ud558\uace0 \uc0c8\ub85c\uc6b4 item \uc800\uc7a5\uc744 \ud5c8\uc6a9\ud558\ub294 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc791 \ubc29\uc2dd\uc740 Arcus cache server\uc758 -M \uad6c\ub3d9 \uc635\uc158\uc744 \uc9c0\uc815 \uac00\ub2a5\ud558\uba70, default\ub85c\ub294 LRU \uae30\ubc18\uc758 eviction \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \ud2b9\uc815 \uc751\uc6a9\uc5d0\uc11c\ub294 \uc5b4\ub5a4 item\uc774 expire & evict \ub300\uc0c1\uc774 \ub418\uc9c0 \uc54a\uae30\ub97c \uc6d0\ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. Arcus cache server\ub294 \uc774\ub7ec\ud55c item\uc744 sticky item\uc774\ub77c \ud558\uba70, expiration time\uc744 -1\ub85c \uc9c0\uc815\ud558\uba74, sticky item\uc73c\ub85c \uc9c0\uc6d0\ud55c\ub2e4. Sticky item\uc758 \uc0ad\uc81c\ub294 \uc804\uc801\uc73c\ub85c \uc751\uc6a9\uc5d0 \uc758\ud574 \uad00\ub9ac\ub418\uc5b4\uc57c \ud568\uc744 \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. Sticky items\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc9c0 \uc54a\uc744 \uac83\uc73c\ub85c \uc608\uc0c1\ud558\uc9c0\ub9cc, \uc751\uc6a9\uc758 \uc2e4\uc218\ub85c \uc778\ud574 sticky item\ub4e4\uc774 Arcus \uc11c\ubc84\uc758 \uc804\uccb4 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ucc28\uc9c0\ud558\uac8c \ub418\ub294 \uacbd\uc6b0\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud558\uc5ec, \uc804\uccb4 \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \uc77c\ubd80\ub9cc\uc774 sticky items\uc5d0 \uc758\ud574 \uc0ac\uc6a9\ub418\ub3c4\ub85d \uc124\uc815\ud558\ub294 -g(gummed or sticky) \uad6c\ub3d9 \uc635\uc158\uc744 \uc81c\uacf5\ud55c\ub2e4. Sticky items\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc73c\ub85c \uc0ac\uc6a9\ub420 \uba54\ubaa8\ub9ac \ube44\uc728\uc774\uba70, 0 ~ 100 \ubc94\uc704\uc758 \uac12\uc73c\ub85c \uc9c0\uc815\uac00\ub2a5\ud558\ub2e4. \ub514\ud3f4\ud2b8\uc778 0\uc740 sticky items\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774\uba70, 100\uc740 \uc804\uccb4 \uba54\ubaa8\ub9ac\ub97c sticky items \uc800\uc7a5 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Expiration, Eviction, and Sticky"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#memory-allocator","text":"Arcus cache server\ub294 item \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \ud560\ub2f9\uacfc \ubc18\ud658\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uad00\ub9ac\ud560 \ubaa9\uc801\uc73c\ub85c \ub450 \uac00\uc9c0 memory allocator\ub97c \uc0ac\uc6a9\ud55c\ub2e4. Slab Allocator Slab allocator\ub294 \uba54\ubaa8\ub9ac \ud06c\uae30 \ubcc4\ub85c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ub098\ub204\uc5b4 \uad00\ub9ac\ud558\uae30 \uc704\ud574 slab class\ub85c \uad6c\ubd84\ud558\uace0, \uac01 slab class\uc5d0\uc11c \ub3d9\uc77c \ud06c\uae30\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\ub4e4\uc778 slab\ub4e4\uc744 free list \ud615\ud0dc\ub85c \uad00\ub9ac\ud558\uba74\uc11c \uadf8 \ud06c\uae30\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \ud560\ub2f9\uacfc \ubc18\ud658\uc744 \uc2e0\uc18d\ud788 \ucc98\ub9ac\ud574 \uc8fc\ub294 memory allocator\uc774\ub2e4. \uae30\uc874 memcached\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub358 \ub300\ud45c\uc801\uc778 memory allocator\uc774\ub2e4. \ucd5c\ub300 slab \ud06c\uae30\ub294 \ud604\uc7ac 1MB\uc774\ub2e4. \ucd5c\uc18c slab \ud06c\uae30 \uc989, \uccab \ubc88\uc9f8 slab class\uc758 slab \ud06c\uae30\uc640 \uadf8 \ub2e4\uc74c slab class\ub4e4\uc758 slab \ud06c\uae30\ub294 \uc544\ub798\uc758 Arcus cache server \uad6c\ub3d9 \uc635\uc158\uc73c\ub85c \uc124\uc815\ud55c\ub2e4. -n <bytes> : minimum space allocated from key+value+flags (default: 48) \ucd5c\uc18c \ud06c\uae30\uc758 slab \ud06c\uae30\ub97c \uacb0\uc815\ud55c\ub2e4. -f <factor> : chunk size growth factor (default: 1.25) Slab class \ubcc4\ub85c slab \ud06c\uae30\uc758 \uc99d\uac00 \uc815\ub3c4\ub97c \uc9c0\uc815\ud558\uba70, 1.0\ubcf4\ub2e4 \ud070 \uac12\uc73c\ub85c \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4. Small Memory Allocator Collection \uc9c0\uc6d0\uc73c\ub85c \uc778\ud574 \uc791\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04\uc758 \ud560\ub2f9\uacfc \ubc18\ud658 \uc694\uccad\uc774 \ub9ce\uc544\uc84c\ub2e4. \uc774\ub7ec\ud55c \uc791\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uae30 \uc704\ud558\uc5ec small memory allocator\ub97c \uc0c8\ub85c \uac1c\ubc1c\ud558\uc5ec \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4. 8000 \ubc14\uc774\ud2b8 \uc774\ud558\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc740 small memory allocator\uac00 \ub2f4\ub2f9\ud558\uba70, 8000 \ubc14\uc774\ud2b8 \ucd08\uacfc\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc740 \uae30\uc874 slab allocator\uac00 \ub2f4\ub2f9\ud55c\ub2e4.","title":"Memory Allocator"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#slab-class-lru","text":"Arcus cache server\ub294 slab class \ubcc4 LRU \ub9ac\uc2a4\ud2b8\ub97c \uc720\uc9c0\ud558\uace0, eviction \ub300\uc0c1 item\uc73c\ub85c \uc624\ub7ab\ub3d9\uc548 \uc811\uadfc\ub418\uc9c0 \uc54a\uc740 item\uc774 \uc120\ud0dd\ub420 \uc218 \uc788\uac8c \ud55c\ub2e4. Small memory allocator \ucd94\uac00\ub85c \uc778\ud574, slab class \ubcc4 LRU \ub9ac\uc2a4\ud2b8\uc5d0 \ubcc0\ub3d9 \uc0ac\ud56d\uc774 \uc788\ub2e4. \ud2b9\ubcc4\ud788, 0\ubc88 slab class\ub97c \ub450\uc5b4 small memory allocator\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70, small memory allocator\ub85c \ubd80\ud130 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ud560\ub2f9\ubc1b\ub294 \uc791\uc740 \ud06c\uae30\uc758 key-value items\uacfc collection items\uc740 0\ubc88 LRU \ub9ac\uc2a4\ud2b8\uc5d0 \uc5f0\uacb0\ub41c\ub2e4. \ub530\ub77c\uc11c, 8000 \ubc14\uc774\ud2b8 \uc774\ud558\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc5d0 \ud574\ub2f9\ud558\ub294 \uae30\uc874 slab class\uc758 LRU \ub9ac\uc2a4\ud2b8\ub4e4\uc740 empty\uac00 \uc0c1\ud0dc\uac00 \ub41c\ub2e4.","title":"Slab Class \ubcc4 LRU \ub9ac\uc2a4\ud2b8"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#1-2-collection-concept","text":"Collection \uc720\ud615\uacfc \uadf8 \uad6c\uc870 \ubc0f \ud2b9\uc9d5\uc740 \uc544\ub798\uc640 \uac19\ub2e4. List - linked list Element\ub4e4\uc758 doubly linked list \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. Head element\uc640 tail element \uc815\ubcf4\ub97c \uc720\uc9c0\ud558\uba74\uc11c, head/tail\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec forward/backward \ubc29\ud5a5\uc73c\ub85c \ud2b9\uc815 \uc704\uce58\uc5d0 \uc788\ub294 element\ub97c \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \ub9ce\uc740 element\ub97c \uac00\uc9c4 list\uc5d0\uc11c \uc911\uac04 \uc704\uce58\uc758 \uc784\uc758 element \uc811\uadfc \uc2dc\uc5d0 \uc131\ub2a5 \uc774\uc288\uac00 \uc788\uc73c\ubbc0\ub85c, list\ub97c queue \uac1c\ub150\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\ud55c\ub2e4. Set - unordered set of unique value Set \uc790\ub8cc \uad6c\uc870\ub294 membership checking\uc5d0 \uc801\ud569\ud558\ub2e4. Unordered set of unique value \uc800\uc7a5\uc744 \uc704\ud574 \ub0b4\ubd80\uc801\uc73c\ub85c hash table \uad6c\uc870\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud558\ub098\uc758 set\uc5d0 \ub4e4\uc5b4\uac00\ub294 elements \uac1c\uc218\uc5d0 \ube44\ub840\ud558\uc5ec hash table \uc804\uccb4 \ud06c\uae30\ub97c \ub3d9\uc801\uc73c\ub85c \uc870\uc815\ud558\uae30 \uc704\ud574, \uc77c\ubc18\uc801\uc778 tree \uad6c\uc870\uc640 \uc720\uc0ac\ud558\uac8c \uc5ec\ub7ec depth\ub85c \uad6c\uc131\ub418\ub294 hash table \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. Map - unordered set of <field, value> Map \uc790\ub8cc \uad6c\uc870\ub294 <field, value> \uc30d\uc744 \uc800\uc7a5\ud55c\ub2e4. Field \uac12\uc758 \uc720\uc77c\uc131 \ubcf4\uc7a5\uacfc field \uae30\uc900\uc73c\ub85c \ud574\ub2f9 element \ud0d0\uc0c9\uc744 \ube60\ub974\uac8c \ud558\uae30 \uc704\ud55c hash table \uad6c\uc870\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud558\ub098\uc758 map\uc5d0 \ub4e4\uc5b4\uac00\ub294 elements \uac1c\uc218\uc5d0 \ube44\ub840\ud558\uc5ec hash table \uc804\uccb4 \ud06c\uae30\ub97c \ub3d9\uc801\uc73c\ub85c \uc870\uc815\ud558\uae30 \uc704\ud574, \uc77c\ubc18\uc801\uc778 tree \uad6c\uc870\uc640 \uc720\uc0ac\ud558\uac8c \uc5ec\ub7ec depth\ub85c \uad6c\uc131\ub418\ub294 hash table \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. B+tree - sorted map based on b+tree key \uac01 element \ub9c8\ub2e4 unique key\ub97c \ub450\uace0, \uc774\ub97c \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c elements \uc9d1\ud569\uc744 b+tree \uad6c\uc870\ub85c \uc800\uc7a5\ud558\uba70, \uc774\ub7ec\ud55c unique key \uae30\ubc18\uc73c\ub85c forward/backward \ubc29\ud5a5\uc758 range scan\uc744 \uc81c\uacf5\ud55c\ub2e4. Elements \uc218\uc5d0 \ube44\ub840\ud558\uc5ec \ub3d9\uc801\uc73c\ub85c depth\ub97c \uc870\uc815\ud558\ub294 b+tree \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc5ec \uba54\ubaa8\ub9ac \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud55c\ub2e4. \uadf8 \uc678\uc5d0, b+tree\uc758 nonleaf node\ub294 \uac01 \ud558\uc704 node \uc911\uc2ec\uc758 sub-tree\uc5d0 \uc800\uc7a5\ub41c element \uac1c\uc218 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub3c4\ub85d \ud574\uc11c, \ud2b9\uc815 element\uc758 position \uc870\ud68c \ubc0f position \uae30\ubc18\uc758 element \uc870\ud68c \uae30\ub2a5\ub3c4 \uc81c\uacf5\ud55c\ub2e4. Collection item\uc740 <key, \"collection meta info\"> \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. Collection meta info\ub294 collection \uc720\ud615\uc5d0 \ub530\ub978 \uc18d\uc131 \uc815\ubcf4\ub97c \uac00\uc9c0\uba70, \ud574\ub2f9 collection\uc758 elements\uc5d0 \uc2e0\uc18d\ud788 \uc811\uadfc\ud558\uae30 \uc815\ubcf4\ub97c \uac00\uc9c4\ub2e4. \uc608\ub97c \ub4e4\uc5b4, list\uc758 head/tail element \uc8fc\uc18c, set\uc758 \ucd5c\uc0c1\uc704 hash table \uc8fc\uc18c, map\uc758 \ucd5c\uc0c1\uc704 hash table \uad6c\uc870, b+tree\uc758 root node \uc8fc\uc18c\uac00 \uc774\uc5d0 \ud574\ub2f9\ub41c\ub2e4.","title":"1-2. Collection Concept"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#element","text":"Collection \uc720\ud615\uc5d0 \ub530\ub978 element \uad6c\uc870\ub294 \uc544\ub798\uc640 \uac19\ub2e4. list/set element : < data > \uac01 element\ub294 \ud558\ub098\uc758 \ub370\uc774\ud130 \ub9cc\uc744 \uac00\uc9c4\ub2e4. map element : <field(map element key), data > map\uc5d0\uc11c \uac01 element\ub97c \uad6c\ubd84\ud558\uae30 \uc704\ud55c field\ub97c \ud544\uc218\uc801\uc73c\ub85c \uac00\uc9c0\uba70, field\ub294 \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. b+tree element : < bkey(b+tree key), eflag(element flag), data > b+tree\uc5d0\uc11c elements\ub97c \uc5b4\ub5a4 \uae30\uc900\uc73c\ub85c \uc815\ub82c\ud558\uae30 \uc704\ud55c bkey\ub97c \ud544\uc218\uc801\uc73c\ub85c \uac00\uc9c0\uba70, \uc635\uc158 \uc0ac\ud56d\uc73c\ub85c bkey \uae30\ubc18\uc758 scan \uc2dc\uc5d0 \ud2b9\uc815 element\ub97c filtering\ud558\uae30 \uc704\ud55c eflag\ub97c \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, bkey\uc5d0 \uc885\uc18d\ub418\uc5b4 \ub2e8\uc21c \uc800\uc7a5/\uc870\ud68c \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ub418\ub294 data\ub97c \uac00\uc9c4\ub2e4.","title":"Element \uad6c\uc870"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#bkey-btree-key","text":"B+tree collection\uc5d0\uc11c \uc0ac\uc6a9\uac00\ub2a5\ud55c bkey \ub370\uc774\ud130 \uc720\ud615\uc740 \uc544\ub798 \ub450 \uac00\uc9c0\uc774\ub2e4. 8 bytes unsigned integer 0 ~ 18446744073709551615 \ubc94\uc704\uc758 \uac12\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc720\ud615\uc774 \uc131\ub2a5 \ubc0f \uba54\ubaa8\ub9ac \uacf5\uac04 \uad00\uc810\uc5d0\uc11c hexadecimal \uc720\ud615\ubcf4\ub2e4 \uc720\ub9ac\ud558\ubbc0\ub85c, \uc774 \uc720\ud615\uc758 bkey \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud55c\ub2e4. hexadecimal \u201c0x\u201d\ub85c \uc2dc\uc791\ud558\ub294 \uc9dd\uc218 \uac1c\uc758 hexadecimal \ubb38\uc790\uc5f4\ub85c \ud45c\ud604\ud558\uba70, \ub300\uc18c\ubb38\uc790 \ubaa8\ub450 \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. Arcus cache server\ub294 \ub450 hexadecimal \ubb38\uc790\ub97c 1 byte\ub85c \uc800\uc7a5\ud558\uba70, 1 ~ 31 \uae38\uc774\uc758 variable length byte array\ub85c \uc800\uc7a5\ud55c\ub2e4. hexadecimal \ud45c\ud604\uc774 \uc62c\ubc14\ub978 \uacbd\uc6b0\uc758 \uc800\uc7a5 \ubc14\uc774\ud2b8 \uc218\uc640 \uc798\ubabb\ub41c \uacbd\uc6b0\uc758 \uc774\uc720\ub294 \uc544\ub798\uc640 \uac19\ub2e4. hexadecimal value storage bytes incorrect reason 0x34F40056 4 bytes 0xabcd00778899 6 bytes 34F40056 \uc55e\uc5d0 \"0x\"\uac00 \uc5c6\uc74c 0x34F40 \ud640\uc218 \uac1c\uc758 hexadecimal \ubb38\uc790\uc5f4 0x34F40G 'G'\uac00 hexadecimal \ubb38\uc790\uac00 \uc544\ub2d8 bkey\uc758 \ub300\uc18c \ube44\uad50\ub294 8 bytes unsigned integer \uc720\ud615\uc758 \uac12\uc774\uba74 \ub450 integer \uac12\uc758 \ub2e8\uc21c\ud55c \ube44\uad50 \uc5f0\uc0b0\uc73c\ub85c \uc218\ud589\ud558\uba70, hexadecimal \uc720\ud615\uc758 \uac12\uc774\uba74 \uc544\ub798\uc640 \uac19\uc740 lexicographical order\ub85c \ub450 \uac12\uc744 \ube44\uad50\ud55c\ub2e4. \ub450 hexadecimal\uc758 \uccab\uc9f8 \ubc14\uc774\ud2b8\ubd80\ud130 \ucc28\ub840\ub85c \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ub300\uc18c\ub97c \ube44\uad50\ud558\uc5ec, \ucc28\uc774\ub098\uba74 \ub300\uc18c \ube44\uad50\ub97c \uc885\ub8cc\ud55c\ub2e4. \ub450 hexadecimal \uc911 \uc791\uc740 \uae38\uc774\ub9cc\ud07c\uc758 \ube44\uad50\uc5d0\uc11c \ub450 \uac12\uc774 \ub3d9\uc77c\ud558\uba74, \uae34 \uae38\uc774\uc758 hexadecimal \uac12\uc774 \ud06c\ub2e4\uace0 \ud310\ub2e8\ud55c\ub2e4. \ub450 hexadecimal\uc758 \uae38\uc774\ub3c4 \uac19\uace0 \uac01 \ubc14\uc774\ud2b8\uc758 \uac12\ub3c4 \ub3d9\uc77c\ud558\uba74, \ub450 hexadecimal \uac12\uc740 \uac19\ub2e4\ub77c\uace0 \ud310\ub2e8\ud55c\ub2e4.","title":"BKey (B+Tree Key)"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#eflag-element-flag","text":"eflag\ub294 \ud604\uc7ac b+tree element\uc5d0\ub9cc \uc874\uc7ac\ud558\ub294 \ud544\ub4dc\uc774\ub2e4. eflag \ub370\uc774\ud130 \uc720\ud615\uc740 hexadecimal \uc720\ud615\ub9cc \uac00\ub2a5\ud558\uba70, bkey\uc758 hexadecimal \ud45c\ud604\uacfc \uc800\uc7a5 \ubc29\uc2dd\uc744 \uadf8\ub300\ub85c \ub530\ub978\ub2e4.","title":"EFlag (Element Flag)"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#eflag-filter","text":"eflag\uc5d0 \ub300\ud55c filter \uc870\uac74\uc740 \uc544\ub798\uc640 \uac19\uc774 \ud45c\ud604\ud558\uba70, (1) eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uacfc \ud2b9\uc815 \uac12\uacfc\uc758 compare \uc5f0\uc0b0\uc774\ub098 (2) eflag\uc758 \uc804\uccb4/\ubd80\ubd84 \uac12\uc5d0 \ub300\ud574 \uc5b4\ub5a4 operand\ub85c bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c \ud6c4\uc758 \uacb0\uacfc\uc640 \ud2b9\uc815 \uac12\uacfc\uc758 compare \uc5f0\uc0b0\uc774\ub2e4. eflag_filter: <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <fwhere> eflag \uac12\uc5d0\uc11c bitwise/compare \uc5f0\uc0b0\uc744 \ucde8\ud560 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ub098\ud0c0\ub0b8\ub2e4. bitwise/compare \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub370\uc774\ud130\uc758 length\ub294 <fvalue>\uc758 length\ub85c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, eflag \uc804\uccb4 \ub370\uc774\ud130\ub97c \uc120\ud0dd\ud55c\ub2e4\uba74, <fwhere>\ub294 0\uc774\uc5b4\uc57c \ud558\uace0 <fvalue>\uc758 length\ub294 eflag \uc804\uccb4 \ub370\uc774\ud130\uc758 length\uc640 \ub3d9\uc77c\ud558\uc5ec\uc57c \ud55c\ub2e4. [<bitwop> <foperand>] \uc0dd\ub7b5 \uac00\ub2a5\ud558\uba70, eflag\uc5d0 \ub300\ud55c bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. bitwise \uc5f0\uc0b0\uc774 \uc9c0\uc815\ub418\uba74 \uc774 \uc5f0\uc0b0\uc758 \uacb0\uacfc\uac00 compare \uc5f0\uc0b0\uc758 \ub300\uc0c1\uc774 \ub418\uba70, \uc0dd\ub7b5\ub41c\ub2e4\uba74 eflag \uac12 \uc790\uccb4\uac00 compare \uc5f0\uc0b0\uc758 \ub300\uc0c1\uc774 \ub41c\ub2e4. <bitwop>\ub294 \u201c&\u201d(bitwise and), \u201c|\u201d(bitwise or), \u201c^\u201d(bitwise xor) \uc911\uc758 \ud558\ub098\ub85c bitwise \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. <foperand>\ub294 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 operand\ub85c hexadecimal\ub85c \ud45c\ud604\ud55c\ub2e4. <foperand>\uc758 \uae38\uc774\ub294 compare \uc5f0\uc0b0\uc744 \ucde8\ud55c <fvalue>\uc758 \uae38\uc774\uc640 \ub3d9\uc77c\ud558\uc5ec\uc57c \ud55c\ub2e4. <compop> <fvalue> eflag\uc5d0 \ub300\ud55c compare \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud55c\ub2e4. <compop>\ub294 \"EQ\", \"NE', \"LT\", \"LE\", \"GT\", \"GE\" \uc911\uc758 \ud558\ub098\ub85c compare \uc5f0\uc0b0\uc744 \uc9c0\uc815\ud558\uba70, <fvalue>\ub294 compare \uc5f0\uc0b0\uc744 \ucde8\ud560 \ub300\uc0c1 \uac12\uc73c\ub85c \ub9c8\ucc2c\uac00\uc9c0\ub85c hexadecimal\ub85c \ud45c\ud604\ud55c\ub2e4. IN \ub610\ub294 NOT IN \uc870\uac74\uc744 \uba85\uc2dc\ud560 \uc218\ub3c4 \uc788\ub2e4. IN \uc870\uac74\uc740 \"EQ\" \uc5f0\uc0b0\uacfc comma separated hexadecimal values\ub85c \uba85\uc2dc\ud558\uba74 \ub418\uace0, NOT IN \uc870\uac74\uc740 \"NE\" \uc5f0\uc0b0\uacfc comma separated hexadecimal values\ub85c \uba85\uc2dc\ud558\uba74 \ub41c\ub2e4. \uc774 \uacbd\uc6b0, comma\ub85c \uad6c\ubd84\ub41c hexadecimal values\uc758 \ucd5c\ub300 \uc218\ub294 100 \uac1c\uae4c\uc9c0\ub9cc \uc9c0\uc6d0\ud55c\ub2e4. \ud558\ub098\uc758 b+tree\uc758 element\uc5d0\ub294 \ub3d9\uc77c \uae38\uc774\uc758 element flag\ub97c \uc0ac\uc6a9\ud558\uae38 \uad8c\uc7a5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc751\uc6a9\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ud558\ub098\uc758 b+tree\uc5d0 \uc18c\uc18d\ub41c elements \uc774\ub354\ub77c\ub3c4 eflag\uac00 \uc0dd\ub7b5\ub420 \uc218\ub3c4 \uc788\uace0 \uc11c\ub85c \ub2e4\ub978 \uae38\uc774\uc758 eflag\ub97c \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \uc774 \uacbd\uc6b0, \uc544\ub798\uc640 \uac19\uc774 eflag filtering\uc774 \uc560\ub9e4\ubaa8\ud638\ud574 \uc9c8 \uc218 \uc788\ub2e4. \uc774 \uc0c1\ud669\uc5d0\uc11c\ub294 filter \uc870\uac74\uc758 \ube44\uad50 \uc5f0\uc0b0\uc774 \u201cNE\u201d\uc774\uba74 true\ub85c \ud310\ubcc4\ud558\uace0, \uadf8 \uc678\uc758 \ube44\uad50 \uc5f0\uc0b0\uc774\uba74 false\ub85c \ud310\ubcc4\ud55c\ub2e4. eflag\uac00 \uc5c6\ub294 element\uc5d0 eflag_filter \uc870\uac74\uc774 \uc8fc\uc5b4\uc9c8 \uc218 \uc788\ub2e4. eflag\uac00 \uc788\uc9c0\ub9cc eflag_filter \uc870\uac74\uc5d0\uc11c \uba85\uc2dc\ub41c offset\uacfc length\uc758 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, eflag\uac00 4 bytes\uc778 \uc0c1\ud669\uc5d0\uc11c (1) eflag_filter \uc870\uac74\uc758 offset\uc740 5\uc778 \uacbd\uc6b0\uc774\uac70\ub098 (2) eflag_filter \uc870\uac74\uc758 offset\uc740 3\uc774\uace0 length\ub294 4\uc778 \uacbd\uc6b0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4.","title":"EFlag Filter"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#eflag-update","text":"Eflag\uc758 \uc804\uccb4 \ub610\ub294 \ubd80\ubd84 \uac12\uc5d0 update \uc5f0\uc0b0\ub3c4 \uac00\ub2a5\ud558\uba70 \uc544\ub798\uc640 \uac19\uc774 \ud45c\ud604\ud55c\ub2e4. Eflag \uc804\uccb4 \ubcc0\uacbd\uc740 \uc0c8\ub85c\uc6b4 eflag \uac12\uc73c\ub85c \uad50\uccb4\ud558\ub294 \uac83\uc774\uba70, \ubd80\ubd84 \ubcc0\uacbd\uc740 eflag\uc758 \ubd80\ubd84 \ub370\uc774\ud130\uc5d0 \ub300\ud574 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud55c \uacb0\uacfc\ub85c \uad50\uccb4\ud55c\ub2e4. eflag_update: [<fwhere> <bitwop>] <fvalue> [<fwhere> <bitwop>] eflag\ub97c \ubd80\ubd84 \ubcc0\uacbd\ud560 \uacbd\uc6b0\ub9cc \uc9c0\uc815\ud55c\ub2e4. \uc740 eflag\uc5d0\uc11c \ubd80\ubd84 \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 \uc2dc\uc791 offset\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ub098\ud0c0\ub0b4\uba70, \uc774 \uacbd\uc6b0, \ubd80\ubd84 \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 length\ub294 \ub4a4\uc5d0 \uba85\uc2dc\ub418\ub294 <fvalue>\uc758 length\ub85c \uacb0\uc815\ub41c\ub2e4. <bitwop>\ub294 \ubd80\ubd84 \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ucde8\ud560 bitwise \uc5f0\uc0b0\uc73c\ub85c, \u201c&\u201d(bitwise and), \u201c|\u201d(bitwise or), \u201c^\u201d(bitwise xor) \uc911\uc758 \ud558\ub098\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. <fvalue> \ubcc0\uacbd\ud560 new value\ub97c \ub098\ud0c0\ub0b8\ub2e4. \uc55e\uc11c \uae30\uc220\ud55c <fwhere>\uacfc <bitwop>\uac00 \uc0dd\ub7b5\ub418\uba74, eflag\uc758 \uc804\uccb4 \ub370\uc774\ud130\ub97c <fvalue>\ub85c \ubcc0\uacbd\ud55c\ub2e4. \ubd80\ubd84 \ubcc0\uacbd\uc744 \uc704\ud55c <fwhere>\uacfc <bitwop>\uac00 \uc9c0\uc815\ub418\uba74 <fvalue>\ub294 eflag \ubd80\ubd84 \ub370\uc774\ud130\uc5d0 \ub300\ud574 bitwise \uc5f0\uc0b0\uc744 \ucde8\ud560 operand\ub85c \uc0ac\uc6a9\ub418\uba70, bitwise \uc5f0\uc0b0\uc758 \uacb0\uacfc\uac00 eflag\uc758 new value\ub85c \ubcc0\uacbd\ub41c\ub2e4. \uae30\uc874 eflag \uac12\uc744 delete\ud558\uc5ec eflag\uac00 \uc5c6\ub294 \uc0c1\ud0dc\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \uc774\ub97c \uc704\ud574\uc11c\ub294 <fwhere>\uacfc <bitwop>\ub97c \uc0dd\ub7b5\ud558\uace0 <fvalue> \uac12\uc73c\ub85c 0\uc744 \uc8fc\uba74 \ub41c\ub2e4.","title":"EFlag Update"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#1-3-item-attributes","text":"Arcus cache server\ub294 collection \uae30\ub2a5 \uc9c0\uc6d0\uc73c\ub85c \uc778\ud574, \uae30\uc874 key-value item \uc720\ud615 \uc678\uc5d0 list, set, map, b+tree item \uc720\ud615\uc744 \uac00\uc9c4\ub2e4. \uac01 item \uc720\ud615\uc5d0 \ub530\ub77c \uc124\uc815/\uc870\ud68c \uac00\ub2a5\ud55c \uc18d\uc131\ub4e4(attributes)\uc774 \uad6c\ubd84\ub418\uba70, \uc774\ub4e4\uc758 \uac1c\uc694\ub294 \uc544\ub798 \ud45c\uc640 \uac19\ub2e4. \uc544\ub798 \ud45c\ub294 \uac01 \uc18d\uc131\uc774 \uc801\uc6a9\ub418\ub294 item \uc720\ud615, \uc18d\uc131\uc758 \uac04\ub2e8\ud55c \uc124\uba85, \ud5c8\uc6a9\uac00\ub2a5\ud55c \uac12\ub4e4\uacfc \ub514\ud3f4\ud2b8 \uac12\uc744 \ub098\ud0c0\ub0b8\ub2e4. Attribute Name Item Type Description Allowed Values Default Value flags all data specific flags 4 bytes unsigned integer 0 expiretime all item expiration time 4 bytes singed integer -1: sticky 0: never expired >0:expired in the future 0 type all item type \"kv\", \"list\", \"set\", \"map\", \"b+tree\" N/A count collection current # of elements 4 bytes unsigned integer N/A maxcount collection maximum # of elements 4 bytes unsigned integer N/A overflowaction collection overflow action \"error\": all collections \"head_trim\": list \"tail_trim\": list \"smallest_trim\": b+tree \"largest_trim\": b+tree \"smallest_silent_trim\": b+tree \"largest_silent_trim\": b+tree list: \"tail_trim\" set: \"error\" map: \"error\" b+tree: \"smallest_trim\" readable collection redable/unreadable \"on\", \"off\" \"on\" maxbkeyrange b+tree only maximum bkey range 8 bytes unsigned integer, hexadecimal (max 31 bytes) 0 Arcus cache server\ub294 item \uc18d\uc131\ub4e4\uc744 \uc870\ud68c\ud558\uac70\ub098 \ubcc0\uacbd\ud558\ub294 \uc6a9\ub3c4\uc758 getattr \uba85\ub839\uacfc setattr \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc774\ub4e4 \uba85\ub839\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85\uc740 Item Attribute \uba85\ub839 \uc744 \ucc38\uace0 \ubc14\ub780\ub2e4. Item \uc18d\uc131\ub4e4 \uc911 \uc815\ud655\ud55c \uc774\ud574\ub97c \ub3d5\uae30 \uc704\ud574 \ucd94\uac00 \uc124\uba85\uc774 \ud544\uc694\ud55c \uc18d\uc131\ub4e4\uc5d0 \ub300\ud574 \uc544\ub798\uc5d0\uc11c \uc790\uc138\ud788 \uc124\uba85\ud55c\ub2e4.","title":"1-3. Item Attributes"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#flags","text":"Flags\ub294 item\uc758 data-specific \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Arcus java client\ub294 \uc5b4\ub5a4 java object\ub97c cache server\uc5d0 \uc800\uc7a5\ud560 \uacbd\uc6b0, \uadf8 java object\uc758 type\uc5d0 \ub530\ub77c serialization(or marshalling)\ud558\uc5ec \uc800\uc7a5\ud560 data\ub97c \ub9cc\ub4e4\uace0, \uadf8 java object\uc758 type \uc815\ubcf4\ub97c flags \uac12\uc73c\ub85c \ud558\uc5ec Arcus cache server\uc5d0 \uc694\uccad\ud558\uc5ec \uc800\uc7a5\ud55c\ub2e4. Data \uc870\ud68c \uc2dc\uc5d0\ub294 Arcus cache server\ub85c \ubd80\ud130 data\uc640 \ud568\uaed8 flags \uc815\ubcf4\ub97c \ud568\uaed8 \uc5bb\uc5b4\uc640\uc11c, \ud574\ub2f9 java object\uc758 type\uc5d0 \ub530\ub77c \uadf8 data\ub97c de-serialization(or de-marshalling)\ud558\uc5ec java object\ub97c \uc0dd\uc131\ud55c\ub2e4.","title":"flags \uc18d\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#expiretime","text":"Item\uc758 expiretime \uc18d\uc131\uc73c\ub85c \uadf8 item\uc758 expiration time\uc744 \ucd08(second) \ub2e8\uc704\ub85c \uc124\uc815\ud55c\ub2e4. Arcus cache server\ub294 expire \ub418\uc9c0 \uc54a\uace0 \uba54\ubaa8\ub9ac \ubd80\uc871 \uc0c1\ud669\uc5d0\uc11c\ub3c4 evict \ub418\uc9c0 \uc54a\ub294 sticky item \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. Sticky item \ub610\ud55c expiretime \uc18d\uc131\uc73c\ub85c \uc9c0\uc815\ud55c\ub2e4. -1 : sticky item\uc73c\ub85c \uc124\uc815 0 : never expired item\uc73c\ub85c \uc124\uc815, \uadf8\ub7ec\ub098 \uba54\ubaa8\ub9ac \ubd80\uc871 \uc2dc\uc5d0 evict\ub420 \uc218 \uc788\ub2e4. X <= (60 * 60 * 24 * 30) : 30\uc77c \uc774\ud558\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"\ud604\uc7ac \uc2dc\uac04 + X(\ucd08)\"\ub85c \uacb0\uc815\ub41c\ub2e4. -2 \uc774\ud558\uc774\uba74, \uadf8 \uc989\uc2dc expire \ub41c\ub2e4. X > (60 * 60 * 24 * 30) : 30\uc77c \ucd08\uacfc\uc758 \uac12\uc774\uba74, \uc2e4\uc81c expiration time\uc740 \"X\"\ub85c \uacb0\uc815\ub41c\ub2e4. \uc774 \uacbd\uc6b0, X\ub97c unix time\uc73c\ub85c \uc778\uc2dd\ud558\uc5ec expiration time\uc73c\ub85c \uc124\uc815\ud558\ub294 \uac83\uc774\uba70, X\uac00 \ud604\uc7ac \uc2dc\uac04\ubcf4\ub2e4 \uc791\uc73c\uba74 \uadf8 \uc989\uc2dc expire \ub41c\ub2e4.","title":"expiretime \uc18d\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#maxcount","text":"Collection item\uc5d0\ub9cc \uc720\ud6a8\ud55c \uc18d\uc131\uc73c\ub85c, \ud558\ub098\uc758 collection\uc5d0 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \ucd5c\ub300 element \uc218\ub97c \uaddc\uc815\ud55c\ub2e4. Maxcount \uc18d\uc131\uc758 hard limit\uacfc default(\uc124\uc815 \uc0dd\ub7b5 \ub610\ub294 0\uc744 \uac12\uc73c\ub85c \uc8fc\ub294 \uacbd\uc6b0) \uac12\uc740 \uc544\ub798\uc640 \uac19\ub2e4. hard limit : 50000 default value : 4000 Maxcount \uc18d\uc131\uc758 hard limit\uc744 \uc791\uac8c \uaddc\uc815\ud55c \uc774\uc720\ub294 O(small N)\uc758 \uc218\ud589 \ube44\uc6a9\uc744 \uac00\uc9c0\ub3c4\ub85d \ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. Event-driven processing \ubaa8\ub378\uc5d0 \ub530\ub77c \ud558\ub098\uc758 worker thread\uac00 \ube44\ub3d9\uae30 \ubc29\uc2dd\uc73c\ub85c \uc5ec\ub7ec client requests\ub97c \ucc98\ub9ac\ud574\uc57c \ud558\ub294 \uc0c1\ud669\uc5d0\uc11c, \ud55c request\uc758 \ucc98\ub9ac \ube44\uc6a9\uc774 \uac00\uae09\uc801 \uc791\uc544\uc57c\ub9cc \ub2e4\ub978 request\uc758 execution latency\uc5d0 \uc8fc\ub294 \uc601\ud5a5\uc744 \ucd5c\uc18c\ud654\ud560 \uc218 \uc788\ub2e4.","title":"maxcount \uc18d\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#overflowaction","text":"Collection\uc758 maxcount\ub97c \ucd08\uacfc\ud558\uc5ec element \ucd94\uac00\ud558\uba74 overflow\uac00 \ubc1c\uc0dd\ud558\uba70, \uc774 \uacbd\uc6b0 \ucde8\ud560 action\uc744 \uc9c0\uc815\ud55c\ub2e4. \"error\" \ubaa8\ub4e0 collection \uc720\ud615\uc5d0 \uc124\uc815 \uac00\ub2a5\ud55c \uc18d\uc131\uc774\ub2e4. set\uacfc map collection\uc758 default overflow action\uc774\ub2e4. \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uace0 overflow \uc624\ub958\ub97c \ub9ac\ud134\ud55c\ub2e4. \"head_trim\", \"tail_trim\" list collection\uc5d0\ub9cc \uc124\uc815 \uac00\ub2a5\ud55c overflow action\uc774\ub2e4. list collection\uc758 default overflow action\uc740 \"tail_trim\"\uc774\ub2e4. \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub97c \ud5c8\uc6a9\ud558\ub294 \ub300\uc2e0 list\uc758 head \ub610\ub294 tail\uc5d0 \uc704\uce58\ud55c \uae30\uc874 element\ub97c \uc81c\uac70\ud55c\ub2e4. Overflow trim \ubc1c\uc0dd \uc2dc, trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b4\ub294 trim flag\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc720\uc9c0\ud558\uc9c0 \uc54a\ub294\ub2e4. \"smallest_trim\", \"largest_trim\" b+tree collecton\uc5d0\ub9cc \uc124\uc815 \uac00\ub2a5\ud55c overflow action\uc774\ub2e4. b+tree collecton\uc758 default overflow action\uc740 \"smallest_trim\"\uc774\ub2e4. \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub97c \ud5c8\uc6a9\ud558\ub294 \ub300\uc2e0 smallest bkey \ub610\ub294largest bkey\ub97c \uac00\uc9c4 \uae30\uc874 element\ub97c \uc81c\uac70\ud55c\ub2e4. Overflow trim \ubc1c\uc0dd \uc2dc, trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b4\ub294 trim flag\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc720\uc9c0\ud558\uba70, trim \ubc1c\uc0dd\ud55c bkey \uc601\uc5ed\uc744 \uc870\ud68c\ud560 \uacbd\uc6b0 \uc751\ub2f5 \uacb0\uacfc\uc5d0 trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ud3ec\ud568\uc2dc\ud0a8\ub2e4. \"smallest_silent_trim\", \"largest_silent_trim\" \"samllest_trim\", \"largest_trim\"\uacfc \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud558\ub294 overflow action\uc774\ub2e4. \ucc28\uc774\uc810\uc740 overflow trim\uc774 \ubc1c\uc0dd\ud558\ub354\ub77c\ub3c4 trim flag\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc720\uc9c0\ud558\uc9c0 \uc54a\uc73c\uba70, trim \ubc1c\uc0dd\ud55c bkey \uc601\uc5ed\uc744 \uc870\ud68c\ud558\ub354\ub77c\ub3c4 \uc870\ud68c \uacb0\uacfc\uc5d0 trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \ud3ec\ud568\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4. \uc751\uc6a9\uc5d0\uc11c \uc8fc\uc758\ud560 \uc0ac\ud56d\uc740 trim \uc5ec\ubd80\ub098 trim\ub41c \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uac80\uc0ac\ub97c \uc9c1\uc811 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. \ucc38\uace0\ub85c, \uc544\ub798\uc5d0 \uae30\uc220\ud558\ub294 maxbkeyrange \uc18d\uc131\uc5d0 \ub530\ub77c element\ub97c \uc81c\uac70\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 overflow action\uc774 \ucc38\uc870\ub41c\ub2e4.","title":"overflowaction \uc18d\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#readable","text":"Arcus cache server\ub294 \ub2e4\uc218 element\ub97c \uac00\uc9c4 collection\uc744 atomic\ud558\uac8c \uc0dd\uc131\ud558\ub294 \uba85\ub839\uc744 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0, \ud558\ub098\uc758 element\ub97c \ucd94\uac00\ud558\ub294 \uba85\ub839\uc744 \ubc18\ubcf5 \uc218\ud589\ud568\uc73c\ub85c\uc368 \uc6d0\ud558\ub294 collection\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc774 \uacbd\uc6b0, \ud558\ub098\uc758 collection\uc774 \uc644\uc131\ub418\uae30 \uc804\uc758 incomplete collection\uc774 \uc751\uc6a9\uc5d0\uac8c \ub178\ucd9c\ub420 \uc218 \uc788\ub294 \ubb38\uc81c\uac00 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5b4\ub5a4 \uc0ac\uc6a9\uc790\uc758 SNS \uce5c\uad6c \uc815\ubcf4\ub97c set collection \ud615\ud0dc\ub85c cache\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc77c\ubd80 \uce5c\uad6c \uc815\ubcf4\ub9cc set collection\uc5d0 \uc800\uc7a5\ub41c \uc0c1\ud0dc\uc5d0\uc11c \uadf8 \uc0ac\uc6a9\uc790\uc758 \uc804\uccb4 \uce5c\uad6c \uc815\ubcf4\ub97c \uc870\ud68c\ud558\ub294 \uc694\uccad\uc774 \ub4e4\uc5b4\uc628\ub2e4\uba74, incomplete \uce5c\uad6c \uc815\ubcf4\uac00 \uc751\uc6a9\uc5d0\uac8c \ub178\ucd9c\ub418\uac8c \ub41c\ub2e4. \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 collection \uc0dd\uc131\uc5d0 \ub300\ud574 read atomicity\ub97c \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc774 \ud544\uc694\ud558\uba70, \uc774 \uae30\ub2a5\uc758 \uad6c\ud604\uc744 \uc704\ud574 readable \uc18d\uc131\uc744 \uc81c\uacf5\ud55c\ub2e4. \ucc98\uc74c empty collection \uc0dd\uc131 \uc2dc\uc5d0 readable \uc18d\uc131\uc744 off \uc0c1\ud0dc\ub85c \uc124\uc815\ud574\uc11c \uadf8 collection\uc5d0 \ub300\ud55c \uc870\ud68c \uc694\uccad\uc740 UNREADABLE \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uac8c \ud558\uace0, \uadf8 collection\uc5d0 \ubaa8\ub4e0 element\ub4e4\uc744 \ucd94\uac00\ud55c \ud6c4\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c readable \uc18d\uc131\uc744 \ub2e4\uc2dc on \uc0c1\ud0dc\ub85c \ubcc0\uacbd\ud568\uc73c\ub85c\uc368 complete collection\uc774 \uc751\uc6a9\uc5d0 \uc758\ud574 \uc870\ud68c\ub420 \uc218 \uc788\uac8c \ud560 \uc218 \uc788\ub2e4.","title":"readable \uc18d\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/1.-ARCUS-Basic-Concept/#maxbkeyrange","text":"B+tree only \uc18d\uc131\uc73c\ub85c smallest bkey\uc640 largest bkey\uc758 \ucd5c\ub300 \ubc94\uc704\ub97c \uaddc\uc815\ud55c\ub2e4. B+tree\uc5d0 \uc124\uc815\ub41c maxbkeyrange\ub97c \uc704\ubc30\uc2dc\ud0a4\ub294 \uc0c8\ub85c\uc6b4 bkey\ub97c \uac00\uc9c4 element\ub97c \uc0bd\uc785\ud558\ub294 \uacbd\uc6b0, b+tree\uc758 overflow action \uc815\ucc45\uc5d0 \ub530\ub77c \uc624\ub958\ub97c \ub0b4\uac70\ub098 smallest/largest bkey\ub97c \uac00\uc9c4 elements\ub97c \uc81c\uac70\ud568\uc73c\ub85c\uc368 \ud56d\uc0c1 maxbkeyrange \ud2b9\uc131\uc744 \uc900\uc218\ud558\uac8c \ud55c\ub2e4. Maxbkeyrange \uc18d\uc131\uc5d0 \uc758\ud55c element \uc81c\uac70\ub294 \uc751\uc6a9 \uc694\uccad\uc5d0 \uc758\ud55c \uba85\uc2dc\uc801\uc778 element \uc81c\uac70\uc640 \ub3d9\uc77c\ud558\ubbc0\ub85c, trim\uc73c\ub85c \ucc98\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacb0\uad6d, maxcount \uc18d\uc131\uc5d0 \uc758\ud55c overflow trim \ub9cc\uc744 trim\uc73c\ub85c \ucc98\ub9ac\ud55c\ub2e4. maxbkeyrange\uc758 \uc0ac\uc6a9 \uc608\ub85c, \uc5b4\ub5a4 \uc751\uc6a9\uc774 data \uc0dd\uc131 \uc2dc\uac04\uc744 bkey\ub85c \ud558\uc5ec \uadf8 data\ub97c b+tree\uc5d0 \uc800\uc7a5\ud558\uace0 \ucd5c\uadfc 2\uc77c\uce58 data \ub9cc\uc744 b+tree\uc5d0 \uc720\uc9c0\ud558\uae38 \uc6d0\ud55c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \ucd08 \ub2e8\uc704\uc758 \uc2dc\uac04 \uac12\uc744 bkey \uac12\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74, maxbkeyrange\ub294 2\uc77c\uce58\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc778 172880(2 * 24 * 60 * 60)\uc73c\ub85c \uc9c0\uc815\ud558\uace0, \ucd5c\uadfc data\ub9cc\uc744 \ubcf4\uad00\ud558\uae30 \uc704\ud574 overflowaction\uc740 \"smallest_trim\"\uc73c\ub85c \uc9c0\uc815\ud558\uba74 \ub41c\ub2e4. \uc774\ub7ec\ud55c \uc9c0\uc815\uc73c\ub85c, \uc0c8\ub85c\uc6b4 data\uac00 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 b+tree\uc5d0\uc11c 2\uc77c\uce58\uac00 \uc9c0\ub09c data\ub294 maxbkeyrange\uc640 overflowaction\uc5d0 \uc758\ud574 \uc790\ub3d9\uc73c\ub85c \uc81c\uac70\ub41c\ub2e4. \ub9cc\uc57d, \uc774\ub7f0 \uae30\ub2a5\uc774 \uc5c6\ub2e4\uba74, \uc751\uc6a9\uc5d0\uc11c \uc624\ub798\ub41c(2\uc77c\uc774 \uc9c0\ub09c) data\ub97c \uc9c1\uc811 \uc81c\uac70\ud558\ub294 \uc791\uc5c5\uc744 \uc218\ud589\ud574\uc57c \ud55c\ub2e4. maxbkeyrange \uc124\uc815\uc740 bkey\uc758 \ub370\uc774\ud130 \uc720\ud615\uc5d0 \ub9de\uac8c \uc124\uc815\ud558\uc5ec\uc57c \ud558\uba70, maxbkeyrange \uc124\uc815\uc774 \uc0dd\ub7b5\ub418\uac70\ub098 \uba85\uc2dc\uc801\uc73c\ub85c 0\uc744 \uc904 \uacbd\uc6b0\uc758 default \uac12\uc740 bkey \ub370\uc774\ud130 \uc720\ud615\uc5d0 \ubb34\uad00\ud558\uac8c unlimited maxbkeyrange\ub97c \uc758\ubbf8\ud55c\ub2e4.","title":"maxbkeyrange \uc18d\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/2.-Simple-Key-Value-Command/","text":"Arcus cache server\ub294 memcached 1.4\uc758 key-value \uba85\ub839\uc744 \uadf8\ub300\ub85c \uc9c0\uc6d0\ud558\uba70, \uc774\uc5d0 \ucd94\uac00\ud558\uc5ec incr/decr \uba85\ub839\uc740 \uadf8 \uae30\ub2a5\uc744 \ud655\uc7a5 \uc9c0\uc6d0\ud55c\ub2e4. Simple key-value \uba85\ub839\ub4e4\uc758 \uc694\uc57d\uc740 \uc544\ub798\uc640 \uac19\ub2e4. \uc774\ub4e4 \uba85\ub839\ub4e4\uc758 \uc790\uc138\ud55c \uc815\ubcf4\ub294 memcached 1.4\uc758 \uae30\uc874 ascii protocol \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. 2-1. storage \uba85\ub839 set, add, replace, append, prepend, cas \uba85\ub839\uc774 \uc788\uc73c\uba70 syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. <command name> <key> <flags> <exptime> <bytes> [noreply]\\r\\n<data>\\r\\n cas <key> <flags> <exptime> <bytes> <cas unique> [noreply]\\r\\n<data>\\r\\n 2-2. retrieval \uba85\ub839 \ud558\ub098\uc758 cache item\uc744 \uc870\ud68c\ud558\ub294 get, gets \uba85\ub839\uc774 \uc788\uc73c\uba70, syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. get \uba85\ub839\uc740 value\ub9cc \uc870\ud68c\ud558\ub294 \ubc18\uba74 gets \uba85\ub839\uc740 value\uc640 \ud568\uaed8 cas value\ub3c4 \uc870\ud68c\ud55c\ub2e4. get <key>\\r\\n gets <key>\\r\\n \ud55c\ubc88\uc5d0 \uc5ec\ub7ec cache item\ub4e4\uc744 \uc870\ud68c\ud558\uae30 \uc704\ud55c mget \uba85\ub839\uc774 \uc788\uc73c\uba70, syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. mget \uba85\ub839\uc740 1.11 \ubc84\uc804\ubd80\ud130 \uc81c\uacf5\ud55c\ub2e4. mget <lenkeys> <numkeys>\\r\\n <\"space separated keys\">\\r\\n <\u201dspace separated keys\u201d> - key list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. \uacfc - key list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 key \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. 2-3. deletion \uba85\ub839 delete \uba85\ub839\uc774 \uc788\uc73c\uba70 syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. delete <key> [<time>] [noreply]\\r\\n 2-4. Increment/Decrement \uba85\ub839 incr, decr \uba85\ub839\uc774 \uc788\uc73c\uba70, syntax\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Arcus cache server\ub294 \uc774 \uba85\ub839\uc744 \ud655\uc7a5\ud558\uc5ec, \ud574\ub2f9 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc5d0 initial \uac12\uc744 \uac00\uc9c0\ub294 \uc0c8\ub85c\uc6b4 key-value item\uc744 \uc0dd\uc131\ud55c\ub2e4. incr <key> <delta> [<flags> <exptime> <initial>] [noreply]\\r\\n decr <key> <delta> [<flags> <exptime> <initial>] [noreply]\\r\\n","title":"2. Simple Key Value Command"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/2.-Simple-Key-Value-Command/#2-1-storage","text":"set, add, replace, append, prepend, cas \uba85\ub839\uc774 \uc788\uc73c\uba70 syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. <command name> <key> <flags> <exptime> <bytes> [noreply]\\r\\n<data>\\r\\n cas <key> <flags> <exptime> <bytes> <cas unique> [noreply]\\r\\n<data>\\r\\n","title":"2-1. storage \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/2.-Simple-Key-Value-Command/#2-2-retrieval","text":"\ud558\ub098\uc758 cache item\uc744 \uc870\ud68c\ud558\ub294 get, gets \uba85\ub839\uc774 \uc788\uc73c\uba70, syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. get \uba85\ub839\uc740 value\ub9cc \uc870\ud68c\ud558\ub294 \ubc18\uba74 gets \uba85\ub839\uc740 value\uc640 \ud568\uaed8 cas value\ub3c4 \uc870\ud68c\ud55c\ub2e4. get <key>\\r\\n gets <key>\\r\\n \ud55c\ubc88\uc5d0 \uc5ec\ub7ec cache item\ub4e4\uc744 \uc870\ud68c\ud558\uae30 \uc704\ud55c mget \uba85\ub839\uc774 \uc788\uc73c\uba70, syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. mget \uba85\ub839\uc740 1.11 \ubc84\uc804\ubd80\ud130 \uc81c\uacf5\ud55c\ub2e4. mget <lenkeys> <numkeys>\\r\\n <\"space separated keys\">\\r\\n <\u201dspace separated keys\u201d> - key list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. \uacfc - key list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 key \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4.","title":"2-2. retrieval \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/2.-Simple-Key-Value-Command/#2-3-deletion","text":"delete \uba85\ub839\uc774 \uc788\uc73c\uba70 syntax\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. delete <key> [<time>] [noreply]\\r\\n","title":"2-3. deletion \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/2.-Simple-Key-Value-Command/#2-4-incrementdecrement","text":"incr, decr \uba85\ub839\uc774 \uc788\uc73c\uba70, syntax\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Arcus cache server\ub294 \uc774 \uba85\ub839\uc744 \ud655\uc7a5\ud558\uc5ec, \ud574\ub2f9 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc5d0 initial \uac12\uc744 \uac00\uc9c0\ub294 \uc0c8\ub85c\uc6b4 key-value item\uc744 \uc0dd\uc131\ud55c\ub2e4. incr <key> <delta> [<flags> <exptime> <initial>] [noreply]\\r\\n decr <key> <delta> [<flags> <exptime> <initial>] [noreply]\\r\\n","title":"2-4. Increment/Decrement \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/","text":"3-1. List collection \uba85\ub839 lop create - List Collection \uc0dd\uc131 List collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. lop create <key> <attributes> [noreply]\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 delete - List Collection \uc0ad\uc81c \uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4. 3-2. List element \uba85\ub839 lop insert - List Element \uc0bd\uc785 List collection\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. List collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud560 \uc218\ub3c4 \uc788\ub2e4. lop insert <key> <index> <bytes> [create <attributes>] [noreply|pipe]\\r\\n<data>\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <index> - \uc0bd\uc785 \uc704\uce58\ub97c 0-based index\ub85c \uc9c0\uc815. 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 <bytes> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) create <attributes> - list collection \uc5c6\uc744 \uc2dc\uc5d0 list \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (element\ub9cc \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 element \uc0bd\uc785) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 list collection\uc774 \uc544\ub2d8 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \u201cOUT_OF_RANGE\u201d - \uc0bd\uc785 \uc704\uce58\uac00 list\uc758 \ud604\uc7ac element index \ubc94\uc704\ub97c \ub118\uc5b4\uc12c, \uc608\ub97c \ub4e4\uc5b4, 10\uac1c element\uac00 \uc788\ub294 \uc0c1\ud0dc\uc5d0\uc11c \uc0bd\uc785 \uc704\uce58\uac00 20\uc778 \uacbd\uc6b0\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 lop delete - List Element \uc0ad\uc81c List collection\uc5d0 \ud558\ub098\uc758 index \ub610\ub294 index range\uc5d0 \ud574\ub2f9\ud558\ub294 elements\ub97c \uc0ad\uc81c\ud55c\ub2e4. lop delete <key> <index or \"index range\"> [drop] [noreply|pipe]\\r\\n lop delete \uba85\ub839\uc5d0\uc11c \uac01 \uc778\uc790\uc758 \uc124\uba85\uc740 \uc544\ub798\uc640 \uac19\ub2e4. <key> - \ub300\uc0c1 item\uc758 key string <index or \"index range\"> - \uc0ad\uc81c\ud560 element\uc758 index or index range. Element index\ub294 \"lop insert\" \uba85\ub839\uc5d0\uc11c \uc18c\uac1c\ud55c \ubc14\uc640 \uac19\uc774 0-based index \ud615\ud0dc\ub85c \uc9c0\uc815\ud558\uba70, index range\ub294 index1..index2 \ud615\ud0dc\ub85c \ud45c\ud604\ud558\uc5ec, \uadf8 \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 0..-1: \uccab\uc9f8 element\ubd80\ud130 \ub9c8\uc9c0\ub9c9 element\uae4c\uc9c0 (forward \uc21c\uc11c) 2..-2: \uc55e\uc758 3\ubc88\uc9f8 element\ubd80\ud130 \ub4a4\uc758 2\ubc88\uc9f8 element\uae4c\uc9c0 (forward \uc21c\uc11c) -3..-1: \ub4a4\uc758 3\ubc88\uc9f8 element\ubd80\ud130 \ub4a4\uc758 1\ubc88\uc9f8 element\uae4c\uc9c0 (forward \uc21c\uc11c) 4..2 : \uc55e\uc758 5\ubc88\uc9f8 element \ubd80\ud130 \uc55e\uc758 3\ubc88\uc9f8 element\uae4c\uc9c0 (backward \uc21c\uc11c) -1..0: \ub9c8\uc9c0\ub9c9 element \ubd80\ud130 \uccab\uc9f8 element \uae4c\uc9c0 (backward \uc21c\uc11c) drop - element \uc0ad\uc81c\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (element\ub9cc \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (element \uc0ad\uc81c\ud558\uace0 list\ub97c drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (single index or index range\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 list collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc lop get - List Element \uc870\ud68c List collection\uc5d0 \ud558\ub098\uc758 index \ub610\ub294 index range\uc5d0 \ud574\ub2f9\ud558\ub294 elements\ub97c \uc870\ud68c\ud55c\ub2e4. lop get <key> <index or \"index range\"> [delete|drop]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <index or \"index range\"> - \uc870\ud68c\ud560 element\uc758 index or index range. \"lop delete\" \uba85\ub839\uc758 \uc778\uc790 \ucc38\uc870 delete or drop - element \uc870\ud68c\ud558\uba74\uc11c \uadf8 element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0 \uadf8 list\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c element \uac1c\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 END, DELETED, DELETED_DROPPED \uc911\uc758 \ud558\ub098\ub97c \uac00\uc9c0\uba70, \uac01\uac01 element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, element \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, element \uc870\ud68c \ubc0f \uc0ad\uc81c\ud558\uace0 list\ub97c drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. VALUE <flags> <count>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n ... END|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (index or index range\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 list collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \"SERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"3. List Collection Command"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/#3-1-list-collection","text":"","title":"3-1. List collection \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/#lop-create-list-collection","text":"List collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. lop create <key> <attributes> [noreply]\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"lop create - List Collection \uc0dd\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/#delete-list-collection","text":"\uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4.","title":"delete - List Collection \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/#3-2-list-element","text":"","title":"3-2. List element \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/#lop-insert-list-element","text":"List collection\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. List collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud560 \uc218\ub3c4 \uc788\ub2e4. lop insert <key> <index> <bytes> [create <attributes>] [noreply|pipe]\\r\\n<data>\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <index> - \uc0bd\uc785 \uc704\uce58\ub97c 0-based index\ub85c \uc9c0\uc815. 0, 1, 2, ... : list\uc758 \uc55e\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 -1, -2, -3, ... : list\uc758 \ub4a4\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \uac01 element \uc704\uce58\ub97c \ub098\ud0c0\ub0c4 <bytes> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) create <attributes> - list collection \uc5c6\uc744 \uc2dc\uc5d0 list \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (element\ub9cc \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 element \uc0bd\uc785) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 list collection\uc774 \uc544\ub2d8 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \u201cOUT_OF_RANGE\u201d - \uc0bd\uc785 \uc704\uce58\uac00 list\uc758 \ud604\uc7ac element index \ubc94\uc704\ub97c \ub118\uc5b4\uc12c, \uc608\ub97c \ub4e4\uc5b4, 10\uac1c element\uac00 \uc788\ub294 \uc0c1\ud0dc\uc5d0\uc11c \uc0bd\uc785 \uc704\uce58\uac00 20\uc778 \uacbd\uc6b0\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"lop insert - List Element \uc0bd\uc785"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/#lop-delete-list-element","text":"List collection\uc5d0 \ud558\ub098\uc758 index \ub610\ub294 index range\uc5d0 \ud574\ub2f9\ud558\ub294 elements\ub97c \uc0ad\uc81c\ud55c\ub2e4. lop delete <key> <index or \"index range\"> [drop] [noreply|pipe]\\r\\n lop delete \uba85\ub839\uc5d0\uc11c \uac01 \uc778\uc790\uc758 \uc124\uba85\uc740 \uc544\ub798\uc640 \uac19\ub2e4. <key> - \ub300\uc0c1 item\uc758 key string <index or \"index range\"> - \uc0ad\uc81c\ud560 element\uc758 index or index range. Element index\ub294 \"lop insert\" \uba85\ub839\uc5d0\uc11c \uc18c\uac1c\ud55c \ubc14\uc640 \uac19\uc774 0-based index \ud615\ud0dc\ub85c \uc9c0\uc815\ud558\uba70, index range\ub294 index1..index2 \ud615\ud0dc\ub85c \ud45c\ud604\ud558\uc5ec, \uadf8 \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 0..-1: \uccab\uc9f8 element\ubd80\ud130 \ub9c8\uc9c0\ub9c9 element\uae4c\uc9c0 (forward \uc21c\uc11c) 2..-2: \uc55e\uc758 3\ubc88\uc9f8 element\ubd80\ud130 \ub4a4\uc758 2\ubc88\uc9f8 element\uae4c\uc9c0 (forward \uc21c\uc11c) -3..-1: \ub4a4\uc758 3\ubc88\uc9f8 element\ubd80\ud130 \ub4a4\uc758 1\ubc88\uc9f8 element\uae4c\uc9c0 (forward \uc21c\uc11c) 4..2 : \uc55e\uc758 5\ubc88\uc9f8 element \ubd80\ud130 \uc55e\uc758 3\ubc88\uc9f8 element\uae4c\uc9c0 (backward \uc21c\uc11c) -1..0: \ub9c8\uc9c0\ub9c9 element \ubd80\ud130 \uccab\uc9f8 element \uae4c\uc9c0 (backward \uc21c\uc11c) drop - element \uc0ad\uc81c\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0, \uadf8 list\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (element\ub9cc \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (element \uc0ad\uc81c\ud558\uace0 list\ub97c drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (single index or index range\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 list collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"lop delete - List Element \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/3.-List-Collection-Command/#lop-get-list-element","text":"List collection\uc5d0 \ud558\ub098\uc758 index \ub610\ub294 index range\uc5d0 \ud574\ub2f9\ud558\ub294 elements\ub97c \uc870\ud68c\ud55c\ub2e4. lop get <key> <index or \"index range\"> [delete|drop]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <index or \"index range\"> - \uc870\ud68c\ud560 element\uc758 index or index range. \"lop delete\" \uba85\ub839\uc758 \uc778\uc790 \ucc38\uc870 delete or drop - element \uc870\ud68c\ud558\uba74\uc11c \uadf8 element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty list\uac00 \ub420 \uacbd\uc6b0 \uadf8 list\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c element \uac1c\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 END, DELETED, DELETED_DROPPED \uc911\uc758 \ud558\ub098\ub97c \uac00\uc9c0\uba70, \uac01\uac01 element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, element \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, element \uc870\ud68c \ubc0f \uc0ad\uc81c\ud558\uace0 list\ub97c drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. VALUE <flags> <count>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n ... END|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (index or index range\uc5d0 \ud574\ub2f9\ud558\ub294 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 list collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \"SERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"lop get - List Element \uc870\ud68c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/","text":"4-1. set collection \uba85\ub839 sop create - Set Collection \uc0dd\uc131 Set collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. sop create <key> <attributes> [noreply]\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 delete - Set Collection \uc0ad\uc81c \uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4. 4-2. set element \uba85\ub839 sop insert - Set Element \uc0bd\uc785 Set collection\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. Set collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud560 \uc218\ub3c4 \uc788\ub2e4. sop insert <key> <bytes> [create <attributes>] [noreply|pipe]\\r\\n<data>\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <bytes> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) create <attributes> - set collection \uc5c6\uc744 \uc2dc\uc5d0 set \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (element\ub9cc \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 element \uc0bd\uc785) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \"ELEMENT_EXISTS\" - \ub3d9\uc77c \ub370\uc774\ud130\ub97c \uac00\uc9c4 element\uac00 \uc874\uc7ac. set uniqueness \uc704\ubc30 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 sop delete - Set Element \uc0ad\uc81c Set collection\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. sop delete <key> <bytes> [drop] [noreply|pipe]\\r\\n<data>\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <bytes> - \uc0ad\uc81c\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) drop - element \uc0ad\uc81c\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0ad\uc81c\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (element\ub9cc \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (element \uc0ad\uc81c\ud558\uace0 collection\uc744 drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (\uc0ad\uc81c\ud560 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0ad\uc81c\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0ad\uc81c\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c sop get - Set Element \uc870\ud68c Set collection\uc5d0\uc11c N \uac1c\uc758 elements\ub97c \uc870\ud68c\ud55c\ub2e4. sop get <key> <count> [delete|drop]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <count> - \uc870\ud68c\ud560 elements \uac1c\uc218\ub97c \uc9c0\uc815. 0\uc774\uba74 \uc804\uccb4 elements\ub97c \uc758\ubbf8\ud55c\ub2e4. delete or drop - element \uc870\ud68c\ud558\uba74\uc11c \uadf8 element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0 \uadf8 set\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c element \uac1c\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 END, DELETED, DELETED_DROPPED \uc911\uc758 \ud558\ub098\ub97c \uac00\uc9c0\uba70 \uac01\uac01 element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, element \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, element \uc870\ud68c \ubc0f \uc0ad\uc81c\ud558\uace0 set\uc744 drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. VALUE <flags> <count>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n ... END|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud0dc\uc784) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \"SERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 sop exist - Set Element \uc874\uc7ac\uc720\ubb34 \uac80\uc0ac Set collection\uc5d0 \ud2b9\uc815 element\uc758 \uc874\uc7ac \uc720\ubb34\ub97c \uac80\uc0ac\ud55c\ub2e4. sop exist <key> <bytes> [pipe]\\r\\n<data>\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <bytes>\uc640 <data> - \uc874\uc7ac \uc720\ubb34\ub97c \uac80\uc0ac\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uc640 \ub370\uc774\ud130 \uadf8 \uc790\uccb4 (\ucd5c\ub300 4KB) pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cEXIST\" - \uc131\uacf5 (\uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uac00 set\uc5d0 \uc874\uc7ac) \"NOT_EXIST\" - \uc131\uacf5 (\uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uac00 set\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d : \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d : \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c","title":"4. Set Collection Command"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#4-1-set-collection","text":"","title":"4-1. set collection \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#sop-create-set-collection","text":"Set collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. sop create <key> <attributes> [noreply]\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"sop create - Set Collection \uc0dd\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#delete-set-collection","text":"\uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4.","title":"delete - Set Collection \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#4-2-set-element","text":"","title":"4-2. set element \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#sop-insert-set-element","text":"Set collection\uc5d0 \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud55c\ub2e4. Set collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud560 \uc218\ub3c4 \uc788\ub2e4. sop insert <key> <bytes> [create <attributes>] [noreply|pipe]\\r\\n<data>\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <bytes> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) create <attributes> - set collection \uc5c6\uc744 \uc2dc\uc5d0 set \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (element\ub9cc \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 element \uc0bd\uc785) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \"ELEMENT_EXISTS\" - \ub3d9\uc77c \ub370\uc774\ud130\ub97c \uac00\uc9c4 element\uac00 \uc874\uc7ac. set uniqueness \uc704\ubc30 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"sop insert - Set Element \uc0bd\uc785"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#sop-delete-set-element","text":"Set collection\uc5d0\uc11c \ud558\ub098\uc758 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. sop delete <key> <bytes> [drop] [noreply|pipe]\\r\\n<data>\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <bytes> - \uc0ad\uc81c\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) drop - element \uc0ad\uc81c\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0, \uadf8 set\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0ad\uc81c\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (element\ub9cc \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (element \uc0ad\uc81c\ud558\uace0 collection\uc744 drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (\uc0ad\uc81c\ud560 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0ad\uc81c\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0ad\uc81c\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c","title":"sop delete - Set Element \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#sop-get-set-element","text":"Set collection\uc5d0\uc11c N \uac1c\uc758 elements\ub97c \uc870\ud68c\ud55c\ub2e4. sop get <key> <count> [delete|drop]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <count> - \uc870\ud68c\ud560 elements \uac1c\uc218\ub97c \uc9c0\uc815. 0\uc774\uba74 \uc804\uccb4 elements\ub97c \uc758\ubbf8\ud55c\ub2e4. delete or drop - element \uc870\ud68c\ud558\uba74\uc11c \uadf8 element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty set\uc774 \ub420 \uacbd\uc6b0 \uadf8 set\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c element \uac1c\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 END, DELETED, DELETED_DROPPED \uc911\uc758 \ud558\ub098\ub97c \uac00\uc9c0\uba70 \uac01\uac01 element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, element \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, element \uc870\ud68c \ubc0f \uc0ad\uc81c\ud558\uace0 set\uc744 drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. VALUE <flags> <count>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n <bytes> <data>\\r\\n ... END|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (element\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c1\ud0dc\uc784) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \"SERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"sop get - Set Element \uc870\ud68c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/4.-Set-Collection-Command/#sop-exist-set-element","text":"Set collection\uc5d0 \ud2b9\uc815 element\uc758 \uc874\uc7ac \uc720\ubb34\ub97c \uac80\uc0ac\ud55c\ub2e4. sop exist <key> <bytes> [pipe]\\r\\n<data>\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <bytes>\uc640 <data> - \uc874\uc7ac \uc720\ubb34\ub97c \uac80\uc0ac\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uc640 \ub370\uc774\ud130 \uadf8 \uc790\uccb4 (\ucd5c\ub300 4KB) pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cEXIST\" - \uc131\uacf5 (\uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uac00 set\uc5d0 \uc874\uc7ac) \"NOT_EXIST\" - \uc131\uacf5 (\uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uac00 set\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 set collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d : \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d : \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c","title":"sop exist - Set Element \uc874\uc7ac\uc720\ubb34 \uac80\uc0ac"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/","text":"5-1. map collection \uba85\ub839 mop create - Map Collection \uc0dd\uc131 Map collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. mop create <key> <attributes> [noreply]\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 delete - Map Collection \uc0ad\uc81c \uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4. 5-2. map element \uba85\ub839 mop insert - Map Element \uc0bd\uc785 Map collection\uc5d0 \ud558\ub098\uc758 field, element\ub97c \uc0bd\uc785\ud55c\ub2e4. Map collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c <field, value>\ub85c \uad6c\uc131\ub41c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud560 \uc218\ub3c4 \uc788\ub2e4. mop insert <key> <field> <bytes> [create <attributes>] [noreply|pipe]\\r\\n<data>\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <field> - \uc0bd\uc785\ud560 element\uc758 field string <bytes> - \uc0bd\uc785\ud560 element\uc758 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) create <attributes> - \ud574\ub2f9 map collection \uc5c6\uc744 \uc2dc\uc5d0 map \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (field, element \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 field, element \uc0bd\uc785) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \"ELEMENT_EXISTS\" - \ub3d9\uc77c \uc774\ub984\uc758 field\uac00 \uc774\ubbf8 \uc874\uc7ac. map field uniqueness \uc704\ubc30 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR invalid prefix name\u201d - \uc720\ud6a8\ud558\uc9c0(\uc874\uc7ac\ud558\uc9c0) \uc54a\ub294 prefix \uba85 \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 mop update - Map Element \ubcc0\uacbd Map collection\uc5d0\uc11c \ud558\ub098\uc758 field\uc5d0 \ub300\ud574 element \ubcc0\uacbd\uc744 \uc218\ud589\ud55c\ub2e4. \ud604\uc7ac \ub2e4\uc218 field\uc5d0 \ub300\ud55c \ubcc0\uacbd\uc5f0\uc0b0\uc740 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. mop update <key> <field> <bytes> [noreply|pipe]\\r\\n<data>\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <field> - \ub300\uc0c1 element\uc758 field string <bytes> - \ubcc0\uacbd\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \ubcc0\uacbd\ud560 \ub370\uc774\ud130 \uc790\uccb4 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"UPDATED\" - \uc131\uacf5 (element \ubcc0\uacbd) \u201cNOT_FOUND\u201d - key miss \"NOT_FOUND_ELEMENT\" - field miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 mop delete - Map Element \uc0ad\uc81c Map collection\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 field \uc774\ub984\uc744 \uc8fc\uc5b4, \uadf8\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. mop delete <key> <lenfields> <numfields> [drop] [noreply|pipe]\\r\\n [<\"space separated fields\">]\\r\\n \"space separated fields\" - \ub300\uc0c1 map\uc758 field list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. <key> - \ub300\uc0c1 item\uc758 key string \\\uacfc \\ - field list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 field \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. 0\uc774\uba74 \uc804\uccb4 field, element\ub97c \uc758\ubbf8\ud55c\ub2e4. drop - field, element \uc0ad\uc81c\ub85c \uc778\ud574 empty map\uc774 \ub420 \uacbd\uc6b0, \uadf8 map\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (\uc804\uccb4 \ub610\ub294 \uc77c\ubd80 field, element \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (\uc804\uccb4 \ub610\ub294 \uc77c\ubd80 field, element \uc0ad\uc81c\ud558\uace0 collection\uc744 drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - field miss (\uc0ad\uc81c\ud560 field, element\uac00 \uc5c6\uc74c. \ubaa8\ub4e0 field\uac00 \uc5c6\uc744 \uc2dc\uc5d0\ub9cc \ub9ac\ud134) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc mop get - Map Field, Element \uc870\ud68c Map collection\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 field \uc774\ub984\uc744 \uc8fc\uc5b4, \uadf8\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc870\ud68c\ud55c\ub2e4. mop get <key> <lenfields> <numfields> [delete|drop]\\r\\n [<\"space separated fields\">]\\r\\n \"space separated fields\" - \ub300\uc0c1 map\uc758 field list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. <key> - \ub300\uc0c1 item\uc758 key string \uacfc \\ - field list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 field \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. 0\uc774\uba74 \uc804\uccb4 field, element\ub97c \uc758\ubbf8\ud55c\ub2e4. delete or drop - field, element \uc870\ud68c\ud558\uba74\uc11c \uadf8 field, element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty map\uc774 \ub420 \uacbd\uc6b0 \uadf8 map\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c field \uac1c\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 END, DELETED, DELETED_DROPPED \uc911\uc758 \ud558\ub098\ub97c \uac00\uc9c0\uba70 \uac01\uac01 field \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, field \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, field \uc870\ud68c \ubc0f \uc0ad\uc81c\ud558\uace0 map\uc744 drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. VALUE <flags> <count>\\r\\n <field> <bytes> <data>\\r\\n <field> <bytes> <data>\\r\\n <field> <bytes> <data>\\r\\n ... END|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - field miss (\uc8fc\uc5b4\uc9c4 field \uc774\ub984\ub4e4 \uc911 \ud558\ub098\ub77c\ub3c4 \uac00\uc9c4 element\uac00 \uc804\ud600 \uc5c6\ub294 \uc0c1\ud0dc\uc784) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \"SERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"5. Map Collection Command"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#5-1-map-collection","text":"","title":"5-1. map collection \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#mop-create-map-collection","text":"Map collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. mop create <key> <attributes> [noreply]\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"mop create - Map Collection \uc0dd\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#delete-map-collection","text":"\uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4.","title":"delete - Map Collection \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#5-2-map-element","text":"","title":"5-2. map element \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#mop-insert-map-element","text":"Map collection\uc5d0 \ud558\ub098\uc758 field, element\ub97c \uc0bd\uc785\ud55c\ub2e4. Map collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c <field, value>\ub85c \uad6c\uc131\ub41c \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud560 \uc218\ub3c4 \uc788\ub2e4. mop insert <key> <field> <bytes> [create <attributes>] [noreply|pipe]\\r\\n<data>\\r\\n * <attributes>: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <field> - \uc0bd\uc785\ud560 element\uc758 field string <bytes> - \uc0bd\uc785\ud560 element\uc758 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) create <attributes> - \ud574\ub2f9 map collection \uc5c6\uc744 \uc2dc\uc5d0 map \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \uc0bd\uc785\ud560 \ub370\uc774\ud130 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (field, element \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 field, element \uc0bd\uc785) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \"ELEMENT_EXISTS\" - \ub3d9\uc77c \uc774\ub984\uc758 field\uac00 \uc774\ubbf8 \uc874\uc7ac. map field uniqueness \uc704\ubc30 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR invalid prefix name\u201d - \uc720\ud6a8\ud558\uc9c0(\uc874\uc7ac\ud558\uc9c0) \uc54a\ub294 prefix \uba85 \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"mop insert - Map Element \uc0bd\uc785"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#mop-update-map-element","text":"Map collection\uc5d0\uc11c \ud558\ub098\uc758 field\uc5d0 \ub300\ud574 element \ubcc0\uacbd\uc744 \uc218\ud589\ud55c\ub2e4. \ud604\uc7ac \ub2e4\uc218 field\uc5d0 \ub300\ud55c \ubcc0\uacbd\uc5f0\uc0b0\uc740 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. mop update <key> <field> <bytes> [noreply|pipe]\\r\\n<data>\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <field> - \ub300\uc0c1 element\uc758 field string <bytes> - \ubcc0\uacbd\ud560 \ub370\uc774\ud130 \uae38\uc774 (trailing \ubb38\uc790\uc778 \"\\r\\n\"\uc744 \uc81c\uc678\ud55c \uae38\uc774) noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. <data> - \ubcc0\uacbd\ud560 \ub370\uc774\ud130 \uc790\uccb4 (\ucd5c\ub300 4KB) Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"UPDATED\" - \uc131\uacf5 (element \ubcc0\uacbd) \u201cNOT_FOUND\u201d - key miss \"NOT_FOUND_ELEMENT\" - field miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130 \uae38\uc774\uac00 <bytes>\uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"mop update - Map Element \ubcc0\uacbd"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#mop-delete-map-element","text":"Map collection\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 field \uc774\ub984\uc744 \uc8fc\uc5b4, \uadf8\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc0ad\uc81c\ud55c\ub2e4. mop delete <key> <lenfields> <numfields> [drop] [noreply|pipe]\\r\\n [<\"space separated fields\">]\\r\\n \"space separated fields\" - \ub300\uc0c1 map\uc758 field list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. <key> - \ub300\uc0c1 item\uc758 key string \\\uacfc \\ - field list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 field \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. 0\uc774\uba74 \uc804\uccb4 field, element\ub97c \uc758\ubbf8\ud55c\ub2e4. drop - field, element \uc0ad\uc81c\ub85c \uc778\ud574 empty map\uc774 \ub420 \uacbd\uc6b0, \uadf8 map\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (\uc804\uccb4 \ub610\ub294 \uc77c\ubd80 field, element \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (\uc804\uccb4 \ub610\ub294 \uc77c\ubd80 field, element \uc0ad\uc81c\ud558\uace0 collection\uc744 drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - field miss (\uc0ad\uc81c\ud560 field, element\uac00 \uc5c6\uc74c. \ubaa8\ub4e0 field\uac00 \uc5c6\uc744 \uc2dc\uc5d0\ub9cc \ub9ac\ud134) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"mop delete - Map Element \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/5.-Map-Collection-Command/#mop-get-map-field-element","text":"Map collection\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 field \uc774\ub984\uc744 \uc8fc\uc5b4, \uadf8\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \uc870\ud68c\ud55c\ub2e4. mop get <key> <lenfields> <numfields> [delete|drop]\\r\\n [<\"space separated fields\">]\\r\\n \"space separated fields\" - \ub300\uc0c1 map\uc758 field list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. <key> - \ub300\uc0c1 item\uc758 key string \uacfc \\ - field list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 field \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. 0\uc774\uba74 \uc804\uccb4 field, element\ub97c \uc758\ubbf8\ud55c\ub2e4. delete or drop - field, element \uc870\ud68c\ud558\uba74\uc11c \uadf8 field, element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty map\uc774 \ub420 \uacbd\uc6b0 \uadf8 map\uc744 drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c field \uac1c\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 END, DELETED, DELETED_DROPPED \uc911\uc758 \ud558\ub098\ub97c \uac00\uc9c0\uba70 \uac01\uac01 field \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, field \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, field \uc870\ud68c \ubc0f \uc0ad\uc81c\ud558\uace0 map\uc744 drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. VALUE <flags> <count>\\r\\n <field> <bytes> <data>\\r\\n <field> <bytes> <data>\\r\\n <field> <bytes> <data>\\r\\n ... END|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - field miss (\uc8fc\uc5b4\uc9c4 field \uc774\ub984\ub4e4 \uc911 \ud558\ub098\ub77c\ub3c4 \uac00\uc9c4 element\uac00 \uc804\ud600 \uc5c6\ub294 \uc0c1\ud0dc\uc784) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 map collection\uc774 \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \"SERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"mop get - Map Field, Element \uc870\ud68c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/","text":"6-1. B+ tree collection \uba85\ub839 bop create - B+tree Collection \uc0dd\uc131 B+tree collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. bop create <key> <attributes> [noreply]\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 delete - B+ tree Collection \uc0ad\uc81c \uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4. 6-2. B+ tree element \uba85\ub839 bop insert/upsert - B+Tree Element \uc0bd\uc785/\ub300\uccb4 B+tree collection\uc5d0 \ud558\ub098\uc758 element\ub97c \ucd94\uac00\ud558\ub294 \uba85\ub839\uc73c\ub85c (1) \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 bop insert \uba85\ub839\uacfc (2) \ud604\uc7ac \uc0bd\uc785\ud558\ub294 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc73c\uba74 \ud604\uc7ac\uc758 element\ub97c \uc0bd\uc785\ud558\uace0 \uadf8 bkey\ub97c \uac00\uc9c4 element\uac00 \uc788\uc73c\uba74 \ud604\uc7ac\uc758 element\ub85c \ub300\uccb4\uc2dc\ud0a4\ub294 bop upsert \uba85\ub839\uc774 \uc788\ub2e4. \uc774\ub4e4 \uba85\ub839 \uc218\ud589\uc5d0\uc11c b+tree collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c \ud558\ub098\uc758 element\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\ub2e4. bop insert <key> <bkey> [<eflag>] <bytes> [create <attributes>] [noreply|pipe|getrim]\\r\\n<data>\\r\\n bop upsert <key> <bkey> [<eflag>] <bytes> [create <attributes>] [noreply|pipe|getrim]\\r\\n<data>\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \uc0bd\uc785\ud560 element\uc758 bkey <eflag> - \uc0bd\uc785\ud560 element\uc758 optional flag <bytes>\uc640 <data> - \uc0bd\uc785\ud560 element\uc758 \ub370\uc774\ud130\uc758 \uae38\uc774\uc640 \ub370\uc774\ud130 \uadf8 \uc790\uccb4 (\ucd5c\ub300 4KB) create <attributes> - b+tree collection \uc5c6\uc744 \uc2dc\uc5d0 b+tree \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. getrim - \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub85c maxcount \uc81c\uc57d\uc5d0 \uc758\ud55c overflow trim\uc774 \ubc1c\uc0dd\ud560 \uacbd\uc6b0, trim\ub41c element \uc815\ubcf4\ub97c \uac00\uc838\uc628\ub2e4. Trimmed element \uc815\ubcf4\uac00 \ub9ac\ud134\ub418\ub294 \uacbd\uc6b0, \uadf8 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE <flags> <count>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n END\\r\\n \uadf8 \uc678\uc758 response string\uacfc \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (element\ub9cc \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 element \uc0bd\uc785) \"REPLACED\" : \uc131\uacf5 (element\ub97c \ub300\uccb4) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree colleciton\uc774 \uc544\ub2d8 \"BKEY_MISMATCH\" - \uc0bd\uc785\ud560 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \u201cOUT_OF_RANGE\u201d - \uc0c8\ub85c\uc6b4 element \uc0bd\uc785\uc774 maxcount \ub610\ub294 maxbkeyrange \uc81c\uc57d\uc744 \uc704\ubc30\ud558\uba74\uc11c \uadf8 element\uc758 bkey \uac12\uc774 overflowaction\uc5d0 \uc758\ud574 \uc790\ub3d9 \uc0ad\uc81c\ub418\ub294 \uacbd\uc6b0\uc774\uc5b4\uc11c \uc0bd\uc785\uc774 \uc2e4\ud328\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, smallest_trim \uc0c1\ud669\uc5d0\uc11c \uc0c8\ub85c \uc0bd\uc785\ud560 element\uc758 bkey \uac12\uc774 b+tree\uc758 smallest bkey \ubcf4\ub2e4 \uc791\uc73c\uba74\uc11c maxcount \uac1c\uc758 elements\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uac70\ub098 maxbkeyrange\ub97c \ubc97\uc5b4\ub098\ub294 \uacbd\uc6b0\uac00 \uc774\uc5d0 \ud574\ub2f9\ub41c\ub2e4. \"ELEMENT_EXISTS\" - \ub3d9\uc77c bkey\ub97c \uac00\uc9c4 element\uac00 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 \uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 bop update - B+Tree Element \ubcc0\uacbd B+tree collection\uc5d0\uc11c \ud558\ub098\uc758 element\uc5d0 \ub300\ud574 eflag \ubcc0\uacbd \uadf8\ub9ac\uace0/\ub610\ub294 data \ubcc0\uacbd\uc744 \uc218\ud589\ud55c\ub2e4. \ud604\uc7ac \ub2e4\uc218 elements\uc5d0 \ub300\ud55c \ubcc0\uacbd \uc5f0\uc0b0\uc740 \uc81c\uacf5\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4. bop update <key> <bkey> [<eflag_update>] <bytes> [noreply|pipe]\\r\\n[<data>\\r\\n] * eflag_update : [<fwhere> <bitwop>] <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <eflag_update> - eflag update \uba85\uc2dc. [Collection \uae30\ubcf8 \uac1c\ub150]./Chapter 1. ARCUS Basic Concept.md#1-2. collection concept)\uc5d0\uc11c eflag update\ub97c \ucc38\uc870 \ubc14\ub780\ub2e4. <bytes>\uc640 <data> - \uc0c8\ub85c \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uc640 \ub370\uc774\ud130 \uadf8 \uc790\uccb4 (\ucd5c\ub300 4KB) \ub370\uc774\ud130 \ubcc0\uacbd\uc744 \uc6d0\uce58 \uc54a\uc73c\uba74 <bytes>\ub97c -1\ub85c \ud558\uace0 <data>\ub97c \uc0dd\ub7b5\ud558\uba74 \ub41c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"UPDATED\" - \uc131\uacf5 \u201cNOT_FOUND\u201d - key miss \"NOT_FOUND_ELEMENT\" - element miss (\ubcc0\uacbd\ud560 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree colleciton\uc774 \uc544\ub2d8 \"BKEY_MISMATCH\" - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \"EFLAG_MISMATCH\" - \ud574\ub2f9 element\uc758 eflag \uac12\uc5d0 \ub300\ud574 <eflag_update>\ub97c \uc801\uc6a9\ud560 \uc218 \uc5c6\uc74c. \uc608\ub97c \ub4e4\uc5b4, \ubcc0\uacbd\ud558\uace0\uc790 \ud558\ub294 eflag\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098, \uc874\uc7ac\ud558\ub354\ub77c\ub3c4 <eflag_update> \uc870\uac74\uc73c\ub85c \uba85\uc2dc\ub41c \ubd80\ubd84\uc758 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\ub2e4. \u201cNOTHING_TO_UPDATE\u201d - eflag \ubcc0\uacbd\uacfc data \ubcc0\uacbd \uc911 \uc5b4\ub290 \ud558\ub098\ub3c4 \uba85\uc2dc\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 \uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 bop delete - B+Tree Element \uc0ad\uc81c b+tree collection\uc5d0\uc11c \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 N \uac1c\uc758 elements\ub97c \uc0ad\uc81c\ud55c\ub2e4. bop delete <key> <bkey or \"bkey range\"> [<eflag_filter>] [<count>] [drop] [noreply|pipe]\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. <count> - \uc0ad\uc81c\ud560 elements \uac1c\uc218 \uc9c0\uc815 drop - element \uc0ad\uc81c\ub85c \uc778\ud574 empty b+tree\uac00 \ub420 \uacbd\uc6b0, \uadf8 b+tree\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (element\ub9cc \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (element \uc0ad\uc81c\ud558\uace0 collection\uc744 drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (\uc0ad\uc81c\ud560 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree colleciton\uc774 \uc544\ub2d8 \"BKEY_MISMATCH\" - \uba85\ub839 \uc778\uc790\uc758 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc bop get - B+Tree Element \uc870\ud68c B+tree collection\uc5d0\uc11c \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c offset \uac1c\ub97c skip\ud55c \ud6c4 count \uac1c\uc758 elements\ub97c \uc870\ud68c\ud55c\ub2e4. bop get <key> <bkey or \"bkey range\"> [<eflag_filter>] [[<offset>] <count>] [delete|drop]\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. [<offset>] <count> - \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c skip \uac1c\uc218\uc640 \uc2e4\uc81c \uc870\ud68c\ud560 \uac1c\uc218 delete or drop - element \uc870\ud68c\ud558\uba74\uc11c \uadf8 element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty b+tree\uac00 \ub420 \uacbd\uc6b0 \uadf8 b+tree\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c element \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\uba70, \uadf8 \ub2e4\uc74c \ub77c\uc778 \ubd80\ud130 \uc870\ud68c\ub41c \uac01 element\uc758 bkey, flag, data\uac00 \ub098\ud0c0\ub0b8\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 \uc870\ud68c \uc0c1\ub798\ub85c\uc11c END, TRIMMED, DELETED, DELETED_DROPPED \uc911 \ud558\ub098\ub97c \uac00\uc9c4\ub2e4. END, DELEETED, DELEETD_DROPPED\uc740 \uac01\uac01 element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, element \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, element \uc870\ud68c \ubc0f \uc0ad\uc81c\ud55c \ud6c4 empty b+tree collection\ub3c4 drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. TRIMMED\ub294 \ud2b9\ubcc4\ud55c \uc758\ubbf8\ub85c\uc11c, element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc\uc774\uba74\uc11c element \uc870\ud68c \uc870\uac74\uc774 b+tree\uc758 overflowaction\uc73c\ub85c trim\ub41c bkey \uc601\uc5ed\uacfc overlap \ub418\uc5c8\uc74c\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc774\ub97c \ud1b5\ud574, \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\uc9c0\ub9cc overflow trim\uc73c\ub85c \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 elements\uac00 \uc788\uc744 \uc218 \uc788\uc74c\uc744 \ud574\ub2f9 \uc751\uc6a9\uc774 \uc54c \uc218 \uc788\uac8c \ud55c\ub2e4. \uadf8\ub7ec\uba74, \ud574\ub2f9 \uc751\uc6a9\uc740 \ud544\uc694\uc2dc, back-end storage\uc5d0\uc11c \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 \ub098\uba38\uc9c0 elements\ub97c \ub2e4\uc2dc \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \ucc38\uace0\ub85c, overflow action\uc73c\ub85c smallest_silent_trim \ub610\ub294 largest_silent_trim\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, b+tree collection \ub0b4\ubd80\uc5d0 trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \uc720\uc9c0\ud558\uc9c0 \uc54a\uc544 TRIMMED\uc640 \uac19\uc740 trim \ubc1c\uc0dd \uc0c1\ud0dc\ub97c \uc54c\ub824\uc8fc\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \uc774 \uacbd\uc6b0, trim \ubc1c\uc0dd \uc5ec\ubd80\uc5d0 \ub300\ud55c \uac80\uc0ac\ub294 \uc751\uc6a9\uc5d0\uc11c \uc790\uccb4\uc801\uc73c\ub85c \uc218\ud589\ud574\uc57c \ud55c\ub2e4. VALUE <flags> <count>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n \u2026 END|TRIMMED|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (\uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\uac00 \uc5c6\uc74c) \u201cOUT_OF_RANGE\u201d - \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\uac00 \uc5c6\uc73c\uba70, \ub610\ud55c \uc8fc\uc5b4\uc9c4 bkey range\uac00 b+tree\uc758 overflowaction\uc5d0 \uc758\ud574 trim\ub41c bkey \uc601\uc5ed\uacfc overlap \ub418\uc5c8\uc74c\uc744 \ub098\ud0c0\ub0b8\ub2e4. \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree collection\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 bop count - B+Tree Element \uac1c\uc218 \uacc4\uc0b0 b+tree collection\uc5d0\uc11c \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uac1c\uc218\ub97c \uad6c\ud55c\ub2e4. bop count <key> <bkey or \"bkey range\"> [<eflag_filter>]\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. COUNT=<count> \uc2e4\ud328 \uc2dc\uc758 return string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree collection\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc bop incr/decr - B+Tree Element \uac12\uc758 \uc99d\uac10 B+tree collection \ud2b9\uc815 \ud558\ub098\uc758 eleement\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c increment \ub610\ub294 decrement\ud558\uace0, \uc99d\uac10\ub41c \ub370\uc774\ud130\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 \uba85\ub839\uc740 key-value item\uc5d0 \ub300\ud55c incr/decr \uba85\ub839\uacfc \uc720\uc0ac\ud55c \uba85\ub839\uc73c\ub85c \uc774 \uba85\ub839\uc744 \uc218\ud589\ud560 b+tree element\uc758 \ub370\uc774\ud130\ub294 \uc99d\uac10\uc774 \uac00\ub2a5\ud55c \uc22b\uc790\ud615 \ub370\uc774\ud130\uc774\uc5b4\uc57c \ud55c\ub2e4. bop incr <key> <bkey> <delta> [<initial> [<eflag>]] [noreply|pipe]\\r\\n bop decr <key> <bkey> <delta> [<initial> [<eflag>]] [noreply|pipe]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <delta> - increment/decrement\ud560 delta \uac12\uc73c\ub85c\uc11c, 0 \ubcf4\ub2e4 \ud070 \uc22b\uc790 \uac12\uc744 \uac00\uc838\uc57c \ud55c\ub2e4. increment \uc5f0\uc0b0\uc73c\ub85c 64bit unsigned integer\uac00 overflow\ub418\uba74, wrap around\ub418\uc5b4 \uc794\uc5ec \uac12\uc73c\ub85c \uc124\uc815\ub41c\ub2e4. decrement \uc5f0\uc0b0\uc73c\ub85c 64bit unsigned integer\uac00 underflow\ub418\uba74, \uc0c8\ub85c\uc6b4 \uac12\uc740 \ubb34\uc870\uac74 0\uc73c\ub85c \uc124\uc815\ub41c\ub2e4. <initial> - \ub300\uc0c1 element\uac00 \uc5c6\uc744 \uacbd\uc6b0, \uc0c8\ub85c\uc6b4 element\ub97c \uc0dd\uc131\ud558\uace0 initial \uac12\uc73c\ub85c \uc124\uc815\ud55c\ub2e4. <eflag>\ub294 \uc0c8\ub85c\uc740 element\uc5d0 eflag \uac12\uc744 \uc904 \uacbd\uc6b0\uc5d0 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. Increment/decrement \uc218\ud589 \ud6c4\uc758 \ub370\uc774\ud130 \uac12\uc774\ub2e4. <value>\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree collection\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b8\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cOUT_OF_RANGE\u201d - \uc0c8\ub85c\uc6b4 element \uc0bd\uc785\uc774 maxcount \ub610\ub294 maxbkeyrange \uc81c\uc57d\uc744 \uc704\ubc30\ud558\uba74\uc11c \uadf8 element\uc758 bkey \uac12\uc774 overflowaction\uc5d0 \uc758\ud574 \uc790\ub3d9 \uc0ad\uc81c\ub418\ub294 \uacbd\uc6b0\uc774\uc5b4\uc11c \uc0bd\uc785\uc774 \uc2e4\ud328\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, smallest_trim \uc0c1\ud669\uc5d0\uc11c \uc0c8\ub85c \uc0bd\uc785\ud560 element\uc758 bkey \uac12\uc774 b+tree\uc758 smallest bkey \ubcf4\ub2e4 \uc791\uc73c\uba74\uc11c maxcount \uac1c\uc758 elements\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uac70\ub098 maxbkeyrange\ub97c \ubc97\uc5b4\ub098\ub294 \uacbd\uc6b0\uac00 \uc774\uc5d0 \ud574\ub2f9\ub41c\ub2e4. \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR cannot increment or decrement non-numeric value\u201d - \ud574\ub2f9 element\uc758 \ub370\uc774\ud130\uac00 \uc22b\uc790\ud615\uc774 \uc544\ub2d8. \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 6-3. \ubcf5\uc218 B+ tree \uc870\ud68c \uba85\ub839 bop mget - B+Tree Multiple Get \uc5ec\ub7ec b+tree\ub4e4\uc5d0 \ub300\ud574 \ub3d9\uc77c \uc870\ud68c \uc870\uac74(bkey range\uc640 eflag filter)\uc73c\ub85c element\ub4e4\uc744 \ud55c\uaebc\ubc88\uc5d0 \uc870\ud68c\ud55c\ub2e4. \uc5ec\ub7ec b+tree\ub4e4\uc5d0 \ub300\ud55c \ub3d9\uc77c \uc870\ud68c \uc870\uac74\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c, \ub300\uc0c1 b+tree\ub4e4\uc740 \ub3d9\uc77c bkey \uc720\ud615\uc744 \uac00\uc838\uc57c \ud55c\ub2e4. \uadf8\ub9ac\uace0, eflag\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c \uc131\uaca9\uc758 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uae30\ub97c \uad8c\uace0\ud55c\ub2e4. bop mget <lenkeys> <numkeys> <bkey or \"bkey range\"> [<eflag_filter>] [<offset>] <count>\\r\\n <\u201dspace separated keys\u201d>\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <\u201dspace separated keys\u201d> - \ub300\uc0c1 b+tree\ub4e4\uc758 key list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacfc - key list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 key \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. [<offset>] <count> - \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c skip \uac1c\uc218\uc640 \uc2e4\uc81c \uc870\ud68c\ud560 \uac1c\uc218 bop mget \uba85\ub839\uc740 O(small N) \uc218\ud589 \uc6d0\uce59\uc744 \uc704\ud558\uc5ec \ub2e4\uc74c\uc758 \uc81c\uc57d \uc0ac\ud56d\uc744 \uac00\uc9c4\ub2e4. - key list\uc5d0 \uc9c0\uc815 \uac00\ub2a5\ud55c \ucd5c\ub300 key \uc218\ub294 200\uc774\ub2e4. - count\uc758 \ucd5c\ub300 \uac12\uc740 50\uc774\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. VALUE <key> <status> [<flags> <ecount>]\\r\\n [ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n ... ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n] VALUE <key> <status> [<flags> <ecount>]\\r\\n [ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n ... ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n] ... VALUE <key> <status> [<flags> <ecount>]\\r\\n [ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n ... ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n] END\\r\\n \uc870\ud68c\ud55c \ub300\uc0c1 key\ub9c8\ub2e4 VALUE \ub77c\uc778\uc774 \uc788\uc73c\uba70, \ub300\uc0c1 key string\uacfc \uc870\ud68c \uc0c1\ud0dc\uac00 \ub098\ud0c0\ub09c\ub2e4. \uc870\ud68c \uc0c1\ud0dc\ub294 \uc544\ub798 \uc911\uc758 \ud558\ub098\uac00 \ub418\uba70, \uac01 \uc758\ubbf8\ub294 bop get \uba85\ub839\uc758 response string\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. OK : \uc815\uc0c1 \uc870\ud68c TRIMMED : \uc815\uc0c1 \uc870\ud68c But, trimmed element \uc874\uc7ac NOT_FOUND NOT_FOUND_ELEMENT OUT_OF_RANGE TYPE_MISMATCH BKEY_MISMATCH UNREADABLE \uc870\ud68c \uc0c1\ud0dc\uac00 \uc815\uc0c1 \uc870\ud68c\ub41c \uc0c1\ud0dc\uc778 \"OK\"\uc640 \"TRIMMED\"\uc774\uba74, \uadf8 key\uc5d0 \uc124\uc815\ub41c flags \uac12\uacfc \uc870\ud68c\ud55c element \uac1c\uc218\uac00 \ub098\uc624\uba70, \ub2e4\uc74c \ub77c\uc778\ubd80\ud130 \uc870\ud68c\ud55c \uac01 element\uc758 bkey optional eflag, data \uae38\uc774\uc640 data \uadf8 \uc790\uccb4\uac00 \ub098\uc628\ub2e4. \uadf8 \uc678\uc758 \uc870\ud68c \uc0c1\ud0dc\ub294 \ud574\ub2f9 key\uc5d0\uc11c element \uc870\ud68c\ub97c \uc2e4\ud328\ud55c \uacbd\uc6b0\uc774\ubbc0\ub85c, flags\uc640 ecount\ub97c \ud3ec\ud568\ud558\uc5ec \uc870\ud68c\ub41c element \uc815\ubcf4\uac00 \uc0dd\ub7b5\ub41c\ub2e4. \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR bad data chunk\u201d - space separated key list\uc758 \uae38\uc774\uac00 <lenkeys>\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad value\u201d - bop mget \uba85\ub839\uc758 \uc81c\uc57d \uc870\uac74\uc744 \uc704\ubc30\ud568. \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 bop smget - B+Tree Sort Merge Get \uc5ec\ub7ec b+tree\ub4e4\uc5d0\uc11c bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 elements\ub97c sort merge \ud615\ud0dc\ub85c \uc870\ud68c\ud558\uba74\uc11c count \uac1c\uc758 elements\ub97c \uac00\uc838\uc628\ub2e4. \uc989, \uc5ec\ub7ec b+tree\ub4e4\uc744 \ud558\ub098\uc758 large b+tree\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub2e4\uace0 \ubcf4\uace0, \uc774\uc5d0 \ub300\ud55c element \uc870\ud68c \uae30\ub2a5\uacfc \ub3d9\uc77c\ud558\ub2e4. smget \ub3d9\uc791\uc740 \uc870\ud68c \ubc94\uc704\uc640 \uc5b4\ub5a4 b+tree\uc758 trim \uc601\uc5ed\uacfc\uc758 \uacb9\uce68\uc5d0 \ub300\ud55c \ucc98\ub9ac\ub85c, \uc544\ub798 \ub450 \uac00\uc9c0 \ub3d9\uc791 \ubaa8\ub4dc\uac00 \uc788\ub2e4. 1) \uae30\uc874 smget \ub3d9\uc791 (1.8.X \uc774\ud558 \ubc84\uc804\uc5d0\uc11c \ub3d9\uc791\ud558\ub358 \ubc29\uc2dd) - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uccab\ubc88\uc9f8 element\uac00 trim\ub41c b+tree\uac00 \ud558\ub098\ub77c\ub3c4 \uc874\uc7ac\ud558\uba74 OUT_OF_RANGE \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements \uc870\ud68c\ud55c \ud6c4\uc5d0 \uc751\uc6a9\uc5d0\uc11c sort-merge \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. - OUT_OF_RANGE\uac00 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c smget\uc744 \uc218\ud589\ud558\uba74\uc11c \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\ub97c \ub9cc\ub098\uac8c \ub418\uba74, \uadf8 \uc9c0\uc810\uae4c\uc9c0 \uc870\ud68c\ud55c elements\ub97c \ucd5c\uc885 elements \uacb0\uacfc\ub85c \ud558\uace0 smget \uc218\ud589 \uc0c1\ud0dc\ub294 TRIMMED\ub85c \ud558\uc5ec \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim \uc601\uc5ed\uc758 elements\ub97c \uc870\ud68c\ud558\uc5ec smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. 2) \uc2e0\uaddc smget \ub3d9\uc791 (1.9.0 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub41c \ubc29\uc2dd) - \uae30\uc874\uc758 OUT_OF_RANGE\uc5d0 \ud574\ub2f9\ud558\ub294 b+tree\ub97c missed keys\ub85c \ubd84\ub958\ud558\uace0 \ub098\uba38\uc9c0 b+tree\ub4e4\uc5d0 \ub300\ud574 smget\uc744 \uacc4\uc18d \uc218\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 missed keys\uc5d0 \ud55c\ud574\uc11c\ub9cc \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\uac00 \uc874\uc7ac\ud558\ub354\ub77c\ub3c4, \uadf8 \uc9c0\uc810\uc5d0\uc11c smget\uc744 \uc911\uc9c0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uadf8\ub7ec\ud55c b+tree\ub97c trimmed keys\ub85c \ubd84\ub958\ud558\uace0 \uc6d0\ud558\ub294 \uac1c\uc218\uc758 elements\ub97c \ucc3e\uc744 \ub54c\uae4c\uc9c0 smget\uc744 \uacc4\uc18d \uc9c4\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 trimmed keys\uc5d0 \ud55c\ud558\uc5ec \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim\ub41c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - bkey\uc5d0 \ub300\ud55c unique \uc870\ud68c \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\ub294 duplcate \uc870\ud68c \uc678\uc5d0 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uace0 unique bkey\ub9cc\uc744 \uc870\ud68c\ud558\ub294 unique \uc870\ud68c\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - \uc870\ud68c \uc870\uac74\uc5d0 offset \uae30\ub2a5\uc744 \uc81c\uac70\ud55c\ub2e4. \uae30\uc874 smget \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4, offset \uac12\uc740 \ud56d\uc0c1 0\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\uace0\ud55c\ub2e4. \uc591\uc218\uc758 offset\uc744 \uc0ac\uc6a9\ud558\ub294 smget\uc5d0\uc11c missed keys\uac00 \uc874\uc7ac\ud558\uace0 missed keys\uc5d0 \ub300\ud55c DB \uc870\ud68c\uac00 offset\uc73c\ub85c skip\ub41c element\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0, \uc751\uc6a9\uc5d0\uc11c \uc815\ud655\ud55c offset \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud574\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\uc804\uc758 \uc870\ud68c \uacb0\uacfc\uc5d0 \uc774\uc5b4\uc11c \ucd94\uac00\ub85c \uc870\ud68c\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, \uc774\uc804\uc5d0 \uc870\ud68c\ub41c bkey \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c bkey range\ub97c \uc7ac\uc870\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. bop smget <lenkeys> <numkeys> <bkey or \"bkey range\"> [<eflag_filter>] <count> [duplicate|unique]\\r\\n <\"space separated keys\">\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <\u201dspace separated keys\u201d> - \ub300\uc0c1 b+tree\ub4e4\uc758 key list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacfc - key list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 key \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. <count> - \uc870\ud68c\ud560 element \uac1c\uc218 [duplicate|unique] - smget \ub3d9\uc791 \ubc29\uc2dd\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc0dd\ub7b5\ub418\uba74, \uc608\uc804 smget \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4. \uc9c0\uc815\ub418\uba74, \uc2e0\uaddc smget \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4. duplicate\ub294 \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uace0, unique\ub294 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud55c\ub2e4. bop smget \uba85\ub839\uc740 O(small N) \uc218\ud589 \uc6d0\uce59\uc744 \uc704\ud558\uc5ec \ub2e4\uc74c\uc758 \uc81c\uc57d \uc0ac\ud56d\uc744 \uac00\uc9c4\ub2e4. - key list\uc5d0 \uc9c0\uc815 \uac00\ub2a5\ud55c \ucd5c\ub300 key \uc218\ub294 10000\uc774\ub2e4. - count\uc758 \ucd5c\ub300 \uac12\uc740 2000\uc774\ub2e4. \uae30\uc874 smget \ub3d9\uc791\uc5d0\uc11c \uc131\uacf5 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. VALUE <ecount>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n ... MISSED_KEYS <kcount>\\r\\n <key>\\r\\n <key>\\r\\n \u2026 END|DUPLICATED|TRIMMED|DUPLICATRED_TRIMMED\\r\\n \uc704 response string\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. VALUE \ubd80\ubd84: \uc870\ud68c\ud55c elements\ub97c \ub098\ud0c0\ub0b8\ub2e4. Element \uc815\ubcf4\ub294 \uc870\ud68c\ud55c element\uac00 \uc18d\ud55c b+tree\uc758 key string\uacfc flags \uc815\ubcf4 \uadf8\ub9ac\uace0 \uadf8 element\uc758 bkey, optional eflag, data\ub85c \uad6c\uc131\ub41c\ub2e4. Element \uc815\ubcf4\ub294 bkey \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub418\uba70, \ub3d9\uc77c bkey\ub97c \uac00\uc9c4 elements\ub294 key string \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c\ub2e4. MISSED_KEYS \ubd80\ubd84: smget \uc870\ud68c\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key list\uc640 \uadf8 \uc6d0\uc778\uc744 \ub098\ud0c0\ub0b8\ub2e4. <key>\ub294 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key string\uc774\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 smget response string\uc758 \ub9c8\uc9c0\ub9c9\uc744 \ub098\ud0c0\ub0b8\ub2e4. END: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc5c6\uc74c DUPLICATED: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc788\uc74c. TRIMMED: \uc870\ud68c \ubc94\uc704\uac00 trim \uc601\uc5ed\uacfc \uacb9\uce58\ub294 b+tree\ub97c \ubc1c\uacac\ud55c \uc0c1\ud0dc\uc774\ub2e4. DUPLICATED_TRIMMED: DUPLICATED\uc640 TRIMMED \uc758\ubbf8\ub97c \ubaa8\ub450 \uac00\uc9c4\ub2e4. \uc2e0\uaddc smget \ub3d9\uc791\uc5d0\uc11c \uc131\uacf5 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. ELEMENTS <ecount>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n ... MISSED_KEYS <kcount>\\r\\n <key> <cause>\\r\\n <key> <cause>\\r\\n \u2026 TRIMMED_KEYS <kcount>\\r\\n <key> <bkey>\\r\\n <key> <bkey>\\r\\n \u2026 END|DUPLICATED\\r\\n * <cause> = NOT_FOUND | UNREADABLE | OUT_OF_RANGE \uc704 response string\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. ELEMENTS \ubd80\ubd84: \uc870\ud68c\ud55c elements\ub97c \ub098\ud0c0\ub0b8\ub2e4. Element \uc815\ubcf4\ub294 \uc870\ud68c\ud55c element\uac00 \uc18d\ud55c b+tree\uc758 key string\uacfc flags \uc815\ubcf4 \uadf8\ub9ac\uace0 \uadf8 element\uc758 bkey, optional eflag, data\ub85c \uad6c\uc131\ub41c\ub2e4. Element \uc815\ubcf4\ub294 bkey \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub418\uba70, \ub3d9\uc77c bkey\ub97c \uac00\uc9c4 elements\ub294 key string \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c\ub2e4. MISSED_KEYS \ubd80\ubd84: smget \uc870\ud68c\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key list\uc640 \uadf8 \uc6d0\uc778\uc744 \ub098\ud0c0\ub0b8\ub2e4. <key>\ub294 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key string\uc774\ub2e4. <cause>\ub294 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c \uc6d0\uc778\uc744 \ub098\ud0c0\ub0b8\ub2e4. NOT_FOUND: \uadf8 key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c UNREADABLE: \uadf8 key\uac00 unreadable \uc0c1\ud0dc\uc5d0 \uc788\uc74c OUT_OF_RANGE: bkey range\uc758 \uc2dc\uc791 \ubd80\ubd84\uc774 \uadf8 key\uc758 trim \uc601\uc5ed\uacfc \uacb9\uccd0 \uc788\uc74c TRIMMED_KEYS \ubd80\ubd84: smget \uc870\ud68c \ubc94\uc704\uc758 \ub4b7 \ubd80\ubd84\uc5d0\uc11c trim\uc774 \ubc1c\uc0dd\ud55c key list\uc774\ub2e4. <key>\ub294 trim\uc774 \ubc1c\uc0dd\ud55c key string\uc774\ub2e4. <bkey>\ub294 trim \uc9c1\uc804\uc5d0 \uc788\ub358 \ub9c8\uc9c0\ub9c9 bkey \uc774\ub2e4. Timmed keys \uc815\ubcf4\ub294 bkey \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 smget response string\uc758 \ub9c8\uc9c0\ub9c9\uc744 \ub098\ud0c0\ub0b8\ub2e4. END: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc5c6\uc74c DUPLICATED: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc788\uc74c. smget \uc218\ud589\uc758 \uc2e4\ud328 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. \u201cTYPE_MISMATCH\u201d - \uc5b4\ub5a4 key\uac00 b+tree type\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - smget\uc5d0 \ucc38\uc5ec\ub41c b+tree\ub4e4\uc758 bkey \uc720\ud615\uc774 \uc11c\ub85c \ub2e4\ub984. \u201cOUT_OF_RANGE\u201d - \uae30\uc874 smget \ub3d9\uc791\uc5d0\uc11c\ub9cc \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc2e4\ud328 response string\uc774\ub2e4. \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR bad data chunk\u201d - \uc8fc\uc5b4\uc9c4 key \ub9ac\uc2a4\ud2b8\uc5d0 \uc911\ubcf5 key\uac00 \uc874\uc7ac\ud558\uac70\ub098 \uc8fc\uc5b4\uc9c4 key \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 <lenkeys> \uae38\uc774\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c. \u201cCLIENT_ERROR bad value\u201d - \uc55e\uc11c \uae30\uc220\ud55c smget \uc5f0\uc0b0\uc758 \uc81c\uc57d \uc870\uac74\uc744 \uc704\ubc30 \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 6-4. B+ tree position \uba85\ub839 Arcus cache server\ub294 bkey \uae30\ubc18\uc758 element \uc870\ud68c \uae30\ub2a5 \uc678\uc5d0\ub3c4 b+tree position \uae30\ubc18\uc758 element \uc870\ud68c \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. B+tree\uc5d0\uc11c \ud2b9\uc815 element\uc758 position\uc774\ub780 b+teee\uc5d0\uc11c\uc758 \uadf8 element\uc758 \uc704\uce58 \uc815\ubcf4\ub85c\uc11c, bkey\ub4e4\uc758 \uc815\ub82c(ASC or DESC) \uae30\uc900\uc73c\ub85c \ubd10\uc11c \uba87 \ubc88\uc9f8 \uc704\uce58\ud55c element\uc778\uc9c0\ub97c \ub098\ud0c0\ub0b8\ub2e4. B+tree position\uc740 0-based index\ub85c \ud45c\ud604\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, b+tree\uc5d0 N\uac1c\uc758 elements\uac00 \uc788\ub2e4\uba74 0\ubd80\ud130 N-1\uae4c\uc9c0\uc758 index\ub85c \ub098\ud0c0\ub0b8\ub2e4. B+tree position \uae30\ubc18\uc758 \uc870\ud68c\uac00 \ud544\uc694\ud55c \uc608\ub97c \ud558\ub098 \ub4e4\uba74, ranking \uc2dc\uc2a4\ud15c\uc774 \uc788\ub2e4. Ranking \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \ud2b9\uc815 score\ub97c bkey\ub85c \ud558\uc5ec \ud574\ub2f9 elements\ub97c \uc800\uc7a5\ud558\uace0, \uc870\ud68c\ub294 \ucd5c\uace0/\ucd5c\uc800 score \uae30\uc900\uc73c\ub85c \uba87\ubc88\uc9f8 \uc704\uce58 \ub610\ub294 \uc704\uce58\uc758 \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \ucc3e\ub294 \uacbd\uc6b0\uac00 \ub9ce\ub2e4. bop position - B+Tree Position \uc870\ud68c b+tree collection\uc5d0\uc11c \ud2b9\uc815 element\uc758 position\uc744 \uc870\ud68c\ud55c\ub2e4. Element\uc758 position\uc774\ub780 b+tree\uc5d0\uc11c\uc758 \uc704\uce58 \uc815\ubcf4\ub85c\uc11c, bkey\ub4e4\uc758 \uc815\ub82c(ASC or DESC) \uae30\uc900\uc73c\ub85c \uba87 \ubc88\uc9f8 \uc704\uce58\ud55c element\uc778\uc9c0\ub97c \ub098\ud0c0\ub0b4\ub294 0\ubd80\ud130 N-1\uae4c\uc9c0\uc758 index\ub97c \uc758\ubbf8\ud55c\ub2e4. bop position <key> <bkey> <order>\\r\\n * <order> = asc | desc <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <order> - \uc5b4\ub5a4 bkey \uc815\ub82c \uae30\uc900\uc73c\ub85c position\uc744 \uc5bb\uc744 \uac83\uc778\uc9c0 \uba85\uc2dc \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. POSITION=<position>\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"NOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - b+tree collection \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc bop gbp - B+Tree Get By Position B+tree collection\uc5d0\uc11c position \uae30\ubc18\uc73c\ub85c elements\ub97c \uc870\ud68c\ud55c\ub2e4. bop gbp <key> <order> <position or \"position range\">\\r\\n * <order> = asc | desc <key> - \ub300\uc0c1 item\uc758 key string <order> - \uc5b4\ub5a4 bkey \uc815\ub82c \uae30\uc900\uc73c\ub85c position\uc744 \uc801\uc6a9\ud560 \uc9c0\ub97c \uba85\uc2dc <position or \"position range\"> - \uc870\ud68c\ud560 elements\uc758 \ud558\ub098\uc758 position \ub610\ub294 position range. Position range\ub294 \"position1..position2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. bop get \uc131\uacf5 \uc2dc\uc758 response string\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. VALUE <flags> <count>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n \u2026 END\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"NOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - b+tree collection \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871 bop pwg - B+Tree Find Position with Get (version 1.8.0) B+tree collection\uc5d0\uc11c \ud2b9\uc815 bkey\uc758 position\uc744 \uc870\ud68c\ud558\uba74\uc11c, \uadf8 bkey\ub97c \uac00\uc9c4 element\ub97c \ud3ec\ud568\ud558\uc5ec \uc55e\ub4a4\uc5d0(\uc591\ubc29\ud5a5) \uc704\uce58\ud55c element N\uac1c \uc529\uc744 \ud55c\ubc88\uc5d0 \uc870\ud68c\ud55c\ub2e4. bop pwg <key> <bkey> <order> [<count>]\\r\\n * <order> = asc | desc <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <order> - \uc5b4\ub5a4 bkey \uc815\ub82c \uae30\uc900\uc73c\ub85c position\uc744 \uc5bb\uc744 \uac83\uc778\uc9c0 \uba85\uc2dc <count> - \uc870\ud68c\ud55c position\uc758 \uc55e\ub4a4\uc5d0\uc11c \uac01\uac01 \uba87 \uac1c\uc758 element\ub97c \uc870\ud68c\ud560 \uac83\uc778\uc9c0\ub97c \uba85\uc2dc ( \ucd5c\ub300 \uac12\uc740 100\uc73c\ub85c \uc81c\ud55c ) 0\uc774\uba74, \uc870\ud68c\ud55c position\uc758 element\ub9cc \uc870\ud68c \uc591\uc218\uc774\uba74, \uc870\ud68c\ud55c position\uc758 element \uc678\uc5d0 \uadf8 position\uc758 \uc55e\ub4a4\uc5d0\uc11c \uac01\uac01 \uadf8 \uc218\ub9cc\ud07c element \uc870\ud68c \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE <position> <flags> <count> <index>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n ... <bkey> [<eflag>] <bytes> <data>\\r\\n END\\r\\n \uc704\uc758 VALUE \ub77c\uc778\uc5d0\uc11c \uac01 \uac12\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uadf8 \uc544\ub798 \ub77c\uc778\ub4e4\uc5d0\uc11c element \uac12\uc758 \ud45c\ud604\uc740 bop get \uacbd\uc6b0\uc640 \ub3d9\uc77c\ud558\ub2e4. <position> : \uc8fc\uc5b4\uc9c4 bkey\uc758 position <flags> : b+tree item\uc758 flags \uc18d\uc131\uac12 <count> : \uc870\ud68c\ud55c \uc804\uccb4 element \uac1c\uc218 <index> : \uc804\uccb4 element list\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element \uc704\uce58 (0-based index) \uc8fc\uc5b4\uc9c4 bkey\uc758 position\uacfc element\ub9cc \uc870\ud68c\ud558\uba74, count\ub294 1\uc774 \ub418\uace0, index\ub294 0\uc774 \ub41c\ub2e4. \uc8fc\uc5b4\uc9c4 bkey\uc758 position\uacfc element \uc678\uc5d0 \uc591\ubc29\ud5a5 10\uac1c element \uc870\ud68c\uc5d0\uc11c, \uadf8 position \uc55e\uc5d0 5\uac1c element\uac00 \uc874\uc7ac\ud558\uace0 \ub4a4\uc5d0 10\uac1c element\uac00 \uc874\uc7ac\ud55c\ub2e4\uba74 count\ub294 (5 + 1 + 10) = 16\uc774 \ub418\uace0, index\ub294 5\uac00 \ub41c\ub2e4. \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"NOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - b+tree collection \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"6. B+tree Collection Command"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#6-1-b-tree-collection","text":"","title":"6-1. B+ tree collection \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-create-btree-collection","text":"B+tree collection\uc744 empty \uc0c1\ud0dc\ub85c \uc0dd\uc131\ud55c\ub2e4. bop create <key> <attributes> [noreply]\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <attributes> - \uc124\uc815\ud560 item attributes. Item Attribute \uc124\uba85 \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"CREATED\" - \uc131\uacf5 \"EXISTS\" - \ub3d9\uc77c key string\uc744 \uac00\uc9c4 item\uc774 \uc774\ubbf8 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop create - B+tree Collection \uc0dd\uc131"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#delete-b-tree-collection","text":"\uae30\uc874 key-value item\uc758 \uc0ad\uc81c \uba85\ub839 \uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud55c\ub2e4.","title":"delete - B+ tree Collection \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#6-2-b-tree-element","text":"","title":"6-2. B+ tree element \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-insertupsert-btree-element","text":"B+tree collection\uc5d0 \ud558\ub098\uc758 element\ub97c \ucd94\uac00\ud558\ub294 \uba85\ub839\uc73c\ub85c (1) \ud558\ub098\uc758 element\ub97c \uc0bd\uc785\ud558\ub294 bop insert \uba85\ub839\uacfc (2) \ud604\uc7ac \uc0bd\uc785\ud558\ub294 bkey\ub97c \uac00\uc9c4 element\uac00 \uc5c6\uc73c\uba74 \ud604\uc7ac\uc758 element\ub97c \uc0bd\uc785\ud558\uace0 \uadf8 bkey\ub97c \uac00\uc9c4 element\uac00 \uc788\uc73c\uba74 \ud604\uc7ac\uc758 element\ub85c \ub300\uccb4\uc2dc\ud0a4\ub294 bop upsert \uba85\ub839\uc774 \uc788\ub2e4. \uc774\ub4e4 \uba85\ub839 \uc218\ud589\uc5d0\uc11c b+tree collection\uc744 \uc0dd\uc131\ud558\uba74\uc11c \ud558\ub098\uc758 element\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\ub2e4. bop insert <key> <bkey> [<eflag>] <bytes> [create <attributes>] [noreply|pipe|getrim]\\r\\n<data>\\r\\n bop upsert <key> <bkey> [<eflag>] <bytes> [create <attributes>] [noreply|pipe|getrim]\\r\\n<data>\\r\\n * attributes: <flags> <exptime> <maxcount> [<ovflaction>] [unreadable] <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \uc0bd\uc785\ud560 element\uc758 bkey <eflag> - \uc0bd\uc785\ud560 element\uc758 optional flag <bytes>\uc640 <data> - \uc0bd\uc785\ud560 element\uc758 \ub370\uc774\ud130\uc758 \uae38\uc774\uc640 \ub370\uc774\ud130 \uadf8 \uc790\uccb4 (\ucd5c\ub300 4KB) create <attributes> - b+tree collection \uc5c6\uc744 \uc2dc\uc5d0 b+tree \uc0dd\uc131 \uc694\uccad. Item Attribute \uc124\uba85 )\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. getrim - \uc0c8\ub85c\uc6b4 element \ucd94\uac00\ub85c maxcount \uc81c\uc57d\uc5d0 \uc758\ud55c overflow trim\uc774 \ubc1c\uc0dd\ud560 \uacbd\uc6b0, trim\ub41c element \uc815\ubcf4\ub97c \uac00\uc838\uc628\ub2e4. Trimmed element \uc815\ubcf4\uac00 \ub9ac\ud134\ub418\ub294 \uacbd\uc6b0, \uadf8 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE <flags> <count>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n END\\r\\n \uadf8 \uc678\uc758 response string\uacfc \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"STROED\" - \uc131\uacf5 (element\ub9cc \uc0bd\uc785) \u201cCREATED_STORED\u201d - \uc131\uacf5 (collection \uc0dd\uc131\ud558\uace0 element \uc0bd\uc785) \"REPLACED\" : \uc131\uacf5 (element\ub97c \ub300\uccb4) \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree colleciton\uc774 \uc544\ub2d8 \"BKEY_MISMATCH\" - \uc0bd\uc785\ud560 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \u201cOUT_OF_RANGE\u201d - \uc0c8\ub85c\uc6b4 element \uc0bd\uc785\uc774 maxcount \ub610\ub294 maxbkeyrange \uc81c\uc57d\uc744 \uc704\ubc30\ud558\uba74\uc11c \uadf8 element\uc758 bkey \uac12\uc774 overflowaction\uc5d0 \uc758\ud574 \uc790\ub3d9 \uc0ad\uc81c\ub418\ub294 \uacbd\uc6b0\uc774\uc5b4\uc11c \uc0bd\uc785\uc774 \uc2e4\ud328\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, smallest_trim \uc0c1\ud669\uc5d0\uc11c \uc0c8\ub85c \uc0bd\uc785\ud560 element\uc758 bkey \uac12\uc774 b+tree\uc758 smallest bkey \ubcf4\ub2e4 \uc791\uc73c\uba74\uc11c maxcount \uac1c\uc758 elements\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uac70\ub098 maxbkeyrange\ub97c \ubc97\uc5b4\ub098\ub294 \uacbd\uc6b0\uac00 \uc774\uc5d0 \ud574\ub2f9\ub41c\ub2e4. \"ELEMENT_EXISTS\" - \ub3d9\uc77c bkey\ub97c \uac00\uc9c4 element\uac00 \uc874\uc7ac \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \uc0bd\uc785\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 \uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop insert/upsert - B+Tree Element \uc0bd\uc785/\ub300\uccb4"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-update-btree-element","text":"B+tree collection\uc5d0\uc11c \ud558\ub098\uc758 element\uc5d0 \ub300\ud574 eflag \ubcc0\uacbd \uadf8\ub9ac\uace0/\ub610\ub294 data \ubcc0\uacbd\uc744 \uc218\ud589\ud55c\ub2e4. \ud604\uc7ac \ub2e4\uc218 elements\uc5d0 \ub300\ud55c \ubcc0\uacbd \uc5f0\uc0b0\uc740 \uc81c\uacf5\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4. bop update <key> <bkey> [<eflag_update>] <bytes> [noreply|pipe]\\r\\n[<data>\\r\\n] * eflag_update : [<fwhere> <bitwop>] <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <eflag_update> - eflag update \uba85\uc2dc. [Collection \uae30\ubcf8 \uac1c\ub150]./Chapter 1. ARCUS Basic Concept.md#1-2. collection concept)\uc5d0\uc11c eflag update\ub97c \ucc38\uc870 \ubc14\ub780\ub2e4. <bytes>\uc640 <data> - \uc0c8\ub85c \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uc640 \ub370\uc774\ud130 \uadf8 \uc790\uccb4 (\ucd5c\ub300 4KB) \ub370\uc774\ud130 \ubcc0\uacbd\uc744 \uc6d0\uce58 \uc54a\uc73c\uba74 <bytes>\ub97c -1\ub85c \ud558\uace0 <data>\ub97c \uc0dd\ub7b5\ud558\uba74 \ub41c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"UPDATED\" - \uc131\uacf5 \u201cNOT_FOUND\u201d - key miss \"NOT_FOUND_ELEMENT\" - element miss (\ubcc0\uacbd\ud560 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree colleciton\uc774 \uc544\ub2d8 \"BKEY_MISMATCH\" - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \"EFLAG_MISMATCH\" - \ud574\ub2f9 element\uc758 eflag \uac12\uc5d0 \ub300\ud574 <eflag_update>\ub97c \uc801\uc6a9\ud560 \uc218 \uc5c6\uc74c. \uc608\ub97c \ub4e4\uc5b4, \ubcc0\uacbd\ud558\uace0\uc790 \ud558\ub294 eflag\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098, \uc874\uc7ac\ud558\ub354\ub77c\ub3c4 <eflag_update> \uc870\uac74\uc73c\ub85c \uba85\uc2dc\ub41c \ubd80\ubd84\uc758 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\ub2e4. \u201cNOTHING_TO_UPDATE\u201d - eflag \ubcc0\uacbd\uacfc data \ubcc0\uacbd \uc911 \uc5b4\ub290 \ud558\ub098\ub3c4 \uba85\uc2dc\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR too large value\u201d - \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uac00 4KB \ubcf4\ub2e4 \ud07c \u201cCLIENT_ERROR bad data chunk\u201d - \ubcc0\uacbd\ud560 \ub370\uc774\ud130\uc758 \uae38\uc774\uac00 \uc640 \ub2e4\ub974\uac70\ub098 \"\\r\\n\"\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cSERVER_ERROR out of memory\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop update - B+Tree Element \ubcc0\uacbd"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-delete-btree-element","text":"b+tree collection\uc5d0\uc11c \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 N \uac1c\uc758 elements\ub97c \uc0ad\uc81c\ud55c\ub2e4. bop delete <key> <bkey or \"bkey range\"> [<eflag_filter>] [<count>] [drop] [noreply|pipe]\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. <count> - \uc0ad\uc81c\ud560 elements \uac1c\uc218 \uc9c0\uc815 drop - element \uc0ad\uc81c\ub85c \uc778\ud574 empty b+tree\uac00 \ub420 \uacbd\uc6b0, \uadf8 b+tree\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. noreply or pipe - \uba85\uc2dc\ud558\uba74, response string\uc744 \uc804\ub2ec\ubc1b\uc9c0 \uc54a\ub294\ub2e4. pipe \uc0ac\uc6a9\uc740 Command Pipelining \uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"DELETED\" - \uc131\uacf5 (element\ub9cc \uc0ad\uc81c) \u201cDELETED_DROPPED\u201d - \uc131\uacf5 (element \uc0ad\uc81c\ud558\uace0 collection\uc744 drop\ud55c \uc0c1\ud0dc) \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (\uc0ad\uc81c\ud560 element\uac00 \uc5c6\uc74c) \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree colleciton\uc774 \uc544\ub2d8 \"BKEY_MISMATCH\" - \uba85\ub839 \uc778\uc790\uc758 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"bop delete - B+Tree Element \uc0ad\uc81c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-get-btree-element","text":"B+tree collection\uc5d0\uc11c \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c offset \uac1c\ub97c skip\ud55c \ud6c4 count \uac1c\uc758 elements\ub97c \uc870\ud68c\ud55c\ub2e4. bop get <key> <bkey or \"bkey range\"> [<eflag_filter>] [[<offset>] <count>] [delete|drop]\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. [<offset>] <count> - \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c skip \uac1c\uc218\uc640 \uc2e4\uc81c \uc870\ud68c\ud560 \uac1c\uc218 delete or drop - element \uc870\ud68c\ud558\uba74\uc11c \uadf8 element\ub97c delete\ud560 \uac83\uc778\uc9c0 \uadf8\ub9ac\uace0 delete\ub85c \uc778\ud574 empty b+tree\uac00 \ub420 \uacbd\uc6b0 \uadf8 b+tree\ub97c drop\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE \ub77c\uc778\uc758 <count>\ub294 \uc870\ud68c\ub41c element \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\uba70, \uadf8 \ub2e4\uc74c \ub77c\uc778 \ubd80\ud130 \uc870\ud68c\ub41c \uac01 element\uc758 bkey, flag, data\uac00 \ub098\ud0c0\ub0b8\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 \uc870\ud68c \uc0c1\ub798\ub85c\uc11c END, TRIMMED, DELETED, DELETED_DROPPED \uc911 \ud558\ub098\ub97c \uac00\uc9c4\ub2e4. END, DELEETED, DELEETD_DROPPED\uc740 \uac01\uac01 element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc, element \uc870\ud68c\ud558\uace0 \uc0ad\uc81c\ud55c \uc0c1\ud0dc, element \uc870\ud68c \ubc0f \uc0ad\uc81c\ud55c \ud6c4 empty b+tree collection\ub3c4 drop\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. TRIMMED\ub294 \ud2b9\ubcc4\ud55c \uc758\ubbf8\ub85c\uc11c, element \uc870\ud68c\ub9cc \uc218\ud589\ud55c \uc0c1\ud0dc\uc774\uba74\uc11c element \uc870\ud68c \uc870\uac74\uc774 b+tree\uc758 overflowaction\uc73c\ub85c trim\ub41c bkey \uc601\uc5ed\uacfc overlap \ub418\uc5c8\uc74c\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc774\ub97c \ud1b5\ud574, \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\uc9c0\ub9cc overflow trim\uc73c\ub85c \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 elements\uac00 \uc788\uc744 \uc218 \uc788\uc74c\uc744 \ud574\ub2f9 \uc751\uc6a9\uc774 \uc54c \uc218 \uc788\uac8c \ud55c\ub2e4. \uadf8\ub7ec\uba74, \ud574\ub2f9 \uc751\uc6a9\uc740 \ud544\uc694\uc2dc, back-end storage\uc5d0\uc11c \uc870\ud68c\ub418\uc9c0 \uc54a\uc740 \ub098\uba38\uc9c0 elements\ub97c \ub2e4\uc2dc \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \ucc38\uace0\ub85c, overflow action\uc73c\ub85c smallest_silent_trim \ub610\ub294 largest_silent_trim\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, b+tree collection \ub0b4\ubd80\uc5d0 trim \ubc1c\uc0dd \uc5ec\ubd80\ub97c \uc720\uc9c0\ud558\uc9c0 \uc54a\uc544 TRIMMED\uc640 \uac19\uc740 trim \ubc1c\uc0dd \uc0c1\ud0dc\ub97c \uc54c\ub824\uc8fc\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \uc774 \uacbd\uc6b0, trim \ubc1c\uc0dd \uc5ec\ubd80\uc5d0 \ub300\ud55c \uac80\uc0ac\ub294 \uc751\uc6a9\uc5d0\uc11c \uc790\uccb4\uc801\uc73c\ub85c \uc218\ud589\ud574\uc57c \ud55c\ub2e4. VALUE <flags> <count>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n \u2026 END|TRIMMED|DELETED|DELETED_DROPPED\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss (\uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\uac00 \uc5c6\uc74c) \u201cOUT_OF_RANGE\u201d - \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 element\uac00 \uc5c6\uc73c\uba70, \ub610\ud55c \uc8fc\uc5b4\uc9c4 bkey range\uac00 b+tree\uc758 overflowaction\uc5d0 \uc758\ud574 trim\ub41c bkey \uc601\uc5ed\uacfc overlap \ub418\uc5c8\uc74c\uc744 \ub098\ud0c0\ub0b8\ub2e4. \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree collection\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop get - B+Tree Element \uc870\ud68c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-count-btree-element","text":"b+tree collection\uc5d0\uc11c \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements \uac1c\uc218\ub97c \uad6c\ud55c\ub2e4. bop count <key> <bkey or \"bkey range\"> [<eflag_filter>]\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <key> - \ub300\uc0c1 item\uc758 key string <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. COUNT=<count> \uc2e4\ud328 \uc2dc\uc758 return string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree collection\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"bop count - B+Tree Element \uac1c\uc218 \uacc4\uc0b0"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-incrdecr-btree-element","text":"B+tree collection \ud2b9\uc815 \ud558\ub098\uc758 eleement\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c increment \ub610\ub294 decrement\ud558\uace0, \uc99d\uac10\ub41c \ub370\uc774\ud130\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 \uba85\ub839\uc740 key-value item\uc5d0 \ub300\ud55c incr/decr \uba85\ub839\uacfc \uc720\uc0ac\ud55c \uba85\ub839\uc73c\ub85c \uc774 \uba85\ub839\uc744 \uc218\ud589\ud560 b+tree element\uc758 \ub370\uc774\ud130\ub294 \uc99d\uac10\uc774 \uac00\ub2a5\ud55c \uc22b\uc790\ud615 \ub370\uc774\ud130\uc774\uc5b4\uc57c \ud55c\ub2e4. bop incr <key> <bkey> <delta> [<initial> [<eflag>]] [noreply|pipe]\\r\\n bop decr <key> <bkey> <delta> [<initial> [<eflag>]] [noreply|pipe]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <delta> - increment/decrement\ud560 delta \uac12\uc73c\ub85c\uc11c, 0 \ubcf4\ub2e4 \ud070 \uc22b\uc790 \uac12\uc744 \uac00\uc838\uc57c \ud55c\ub2e4. increment \uc5f0\uc0b0\uc73c\ub85c 64bit unsigned integer\uac00 overflow\ub418\uba74, wrap around\ub418\uc5b4 \uc794\uc5ec \uac12\uc73c\ub85c \uc124\uc815\ub41c\ub2e4. decrement \uc5f0\uc0b0\uc73c\ub85c 64bit unsigned integer\uac00 underflow\ub418\uba74, \uc0c8\ub85c\uc6b4 \uac12\uc740 \ubb34\uc870\uac74 0\uc73c\ub85c \uc124\uc815\ub41c\ub2e4. <initial> - \ub300\uc0c1 element\uac00 \uc5c6\uc744 \uacbd\uc6b0, \uc0c8\ub85c\uc6b4 element\ub97c \uc0dd\uc131\ud558\uace0 initial \uac12\uc73c\ub85c \uc124\uc815\ud55c\ub2e4. <eflag>\ub294 \uc0c8\ub85c\uc740 element\uc5d0 eflag \uac12\uc744 \uc904 \uacbd\uc6b0\uc5d0 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. Increment/decrement \uc218\ud589 \ud6c4\uc758 \ub370\uc774\ud130 \uac12\uc774\ub2e4. <value>\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - \ud574\ub2f9 item\uc774 b+tree collection\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b8\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cOUT_OF_RANGE\u201d - \uc0c8\ub85c\uc6b4 element \uc0bd\uc785\uc774 maxcount \ub610\ub294 maxbkeyrange \uc81c\uc57d\uc744 \uc704\ubc30\ud558\uba74\uc11c \uadf8 element\uc758 bkey \uac12\uc774 overflowaction\uc5d0 \uc758\ud574 \uc790\ub3d9 \uc0ad\uc81c\ub418\ub294 \uacbd\uc6b0\uc774\uc5b4\uc11c \uc0bd\uc785\uc774 \uc2e4\ud328\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, smallest_trim \uc0c1\ud669\uc5d0\uc11c \uc0c8\ub85c \uc0bd\uc785\ud560 element\uc758 bkey \uac12\uc774 b+tree\uc758 smallest bkey \ubcf4\ub2e4 \uc791\uc73c\uba74\uc11c maxcount \uac1c\uc758 elements\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\uac70\ub098 maxbkeyrange\ub97c \ubc97\uc5b4\ub098\ub294 \uacbd\uc6b0\uac00 \uc774\uc5d0 \ud574\ub2f9\ub41c\ub2e4. \u201cOVERFLOWED\u201d - overflow \ubc1c\uc0dd \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR cannot increment or decrement non-numeric value\u201d - \ud574\ub2f9 element\uc758 \ub370\uc774\ud130\uac00 \uc22b\uc790\ud615\uc774 \uc544\ub2d8. \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop incr/decr - B+Tree Element \uac12\uc758 \uc99d\uac10"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#6-3-b-tree","text":"","title":"6-3. \ubcf5\uc218 B+ tree  \uc870\ud68c \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-mget-btree-multiple-get","text":"\uc5ec\ub7ec b+tree\ub4e4\uc5d0 \ub300\ud574 \ub3d9\uc77c \uc870\ud68c \uc870\uac74(bkey range\uc640 eflag filter)\uc73c\ub85c element\ub4e4\uc744 \ud55c\uaebc\ubc88\uc5d0 \uc870\ud68c\ud55c\ub2e4. \uc5ec\ub7ec b+tree\ub4e4\uc5d0 \ub300\ud55c \ub3d9\uc77c \uc870\ud68c \uc870\uac74\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c, \ub300\uc0c1 b+tree\ub4e4\uc740 \ub3d9\uc77c bkey \uc720\ud615\uc744 \uac00\uc838\uc57c \ud55c\ub2e4. \uadf8\ub9ac\uace0, eflag\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c \uc131\uaca9\uc758 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uae30\ub97c \uad8c\uace0\ud55c\ub2e4. bop mget <lenkeys> <numkeys> <bkey or \"bkey range\"> [<eflag_filter>] [<offset>] <count>\\r\\n <\u201dspace separated keys\u201d>\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <\u201dspace separated keys\u201d> - \ub300\uc0c1 b+tree\ub4e4\uc758 key list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacfc - key list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 key \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. [<offset>] <count> - \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 elements\uc5d0\uc11c skip \uac1c\uc218\uc640 \uc2e4\uc81c \uc870\ud68c\ud560 \uac1c\uc218 bop mget \uba85\ub839\uc740 O(small N) \uc218\ud589 \uc6d0\uce59\uc744 \uc704\ud558\uc5ec \ub2e4\uc74c\uc758 \uc81c\uc57d \uc0ac\ud56d\uc744 \uac00\uc9c4\ub2e4. - key list\uc5d0 \uc9c0\uc815 \uac00\ub2a5\ud55c \ucd5c\ub300 key \uc218\ub294 200\uc774\ub2e4. - count\uc758 \ucd5c\ub300 \uac12\uc740 50\uc774\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. VALUE <key> <status> [<flags> <ecount>]\\r\\n [ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n ... ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n] VALUE <key> <status> [<flags> <ecount>]\\r\\n [ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n ... ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n] ... VALUE <key> <status> [<flags> <ecount>]\\r\\n [ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n ... ELEMENT <bkey> [<eflag>] <bytes> <data>\\r\\n] END\\r\\n \uc870\ud68c\ud55c \ub300\uc0c1 key\ub9c8\ub2e4 VALUE \ub77c\uc778\uc774 \uc788\uc73c\uba70, \ub300\uc0c1 key string\uacfc \uc870\ud68c \uc0c1\ud0dc\uac00 \ub098\ud0c0\ub09c\ub2e4. \uc870\ud68c \uc0c1\ud0dc\ub294 \uc544\ub798 \uc911\uc758 \ud558\ub098\uac00 \ub418\uba70, \uac01 \uc758\ubbf8\ub294 bop get \uba85\ub839\uc758 response string\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. OK : \uc815\uc0c1 \uc870\ud68c TRIMMED : \uc815\uc0c1 \uc870\ud68c But, trimmed element \uc874\uc7ac NOT_FOUND NOT_FOUND_ELEMENT OUT_OF_RANGE TYPE_MISMATCH BKEY_MISMATCH UNREADABLE \uc870\ud68c \uc0c1\ud0dc\uac00 \uc815\uc0c1 \uc870\ud68c\ub41c \uc0c1\ud0dc\uc778 \"OK\"\uc640 \"TRIMMED\"\uc774\uba74, \uadf8 key\uc5d0 \uc124\uc815\ub41c flags \uac12\uacfc \uc870\ud68c\ud55c element \uac1c\uc218\uac00 \ub098\uc624\uba70, \ub2e4\uc74c \ub77c\uc778\ubd80\ud130 \uc870\ud68c\ud55c \uac01 element\uc758 bkey optional eflag, data \uae38\uc774\uc640 data \uadf8 \uc790\uccb4\uac00 \ub098\uc628\ub2e4. \uadf8 \uc678\uc758 \uc870\ud68c \uc0c1\ud0dc\ub294 \ud574\ub2f9 key\uc5d0\uc11c element \uc870\ud68c\ub97c \uc2e4\ud328\ud55c \uacbd\uc6b0\uc774\ubbc0\ub85c, flags\uc640 ecount\ub97c \ud3ec\ud568\ud558\uc5ec \uc870\ud68c\ub41c element \uc815\ubcf4\uac00 \uc0dd\ub7b5\ub41c\ub2e4. \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR bad data chunk\u201d - space separated key list\uc758 \uae38\uc774\uac00 <lenkeys>\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad value\u201d - bop mget \uba85\ub839\uc758 \uc81c\uc57d \uc870\uac74\uc744 \uc704\ubc30\ud568. \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop mget - B+Tree Multiple Get"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-smget-btree-sort-merge-get","text":"\uc5ec\ub7ec b+tree\ub4e4\uc5d0\uc11c bkey range \uc870\uac74\uacfc eflag filter \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 elements\ub97c sort merge \ud615\ud0dc\ub85c \uc870\ud68c\ud558\uba74\uc11c count \uac1c\uc758 elements\ub97c \uac00\uc838\uc628\ub2e4. \uc989, \uc5ec\ub7ec b+tree\ub4e4\uc744 \ud558\ub098\uc758 large b+tree\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub2e4\uace0 \ubcf4\uace0, \uc774\uc5d0 \ub300\ud55c element \uc870\ud68c \uae30\ub2a5\uacfc \ub3d9\uc77c\ud558\ub2e4. smget \ub3d9\uc791\uc740 \uc870\ud68c \ubc94\uc704\uc640 \uc5b4\ub5a4 b+tree\uc758 trim \uc601\uc5ed\uacfc\uc758 \uacb9\uce68\uc5d0 \ub300\ud55c \ucc98\ub9ac\ub85c, \uc544\ub798 \ub450 \uac00\uc9c0 \ub3d9\uc791 \ubaa8\ub4dc\uac00 \uc788\ub2e4. 1) \uae30\uc874 smget \ub3d9\uc791 (1.8.X \uc774\ud558 \ubc84\uc804\uc5d0\uc11c \ub3d9\uc791\ud558\ub358 \ubc29\uc2dd) - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uccab\ubc88\uc9f8 element\uac00 trim\ub41c b+tree\uac00 \ud558\ub098\ub77c\ub3c4 \uc874\uc7ac\ud558\uba74 OUT_OF_RANGE \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements \uc870\ud68c\ud55c \ud6c4\uc5d0 \uc751\uc6a9\uc5d0\uc11c sort-merge \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc5ec\uc57c \ud55c\ub2e4. - OUT_OF_RANGE\uac00 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c smget\uc744 \uc218\ud589\ud558\uba74\uc11c \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\ub97c \ub9cc\ub098\uac8c \ub418\uba74, \uadf8 \uc9c0\uc810\uae4c\uc9c0 \uc870\ud68c\ud55c elements\ub97c \ucd5c\uc885 elements \uacb0\uacfc\ub85c \ud558\uace0 smget \uc218\ud589 \uc0c1\ud0dc\ub294 TRIMMED\ub85c \ud558\uc5ec \uc751\ub2f5\uc744 \ubcf4\ub0b8\ub2e4. \uc774 \uacbd\uc6b0, \uc751\uc6a9\uc740 \ubaa8\ub4e0 key\uc5d0 \ub300\ud574 \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim \uc601\uc5ed\uc758 elements\ub97c \uc870\ud68c\ud558\uc5ec smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud558\uc5ec\uc57c \ud55c\ub2e4. 2) \uc2e0\uaddc smget \ub3d9\uc791 (1.9.0 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \ucd94\uac00\ub41c \ubc29\uc2dd) - \uae30\uc874\uc758 OUT_OF_RANGE\uc5d0 \ud574\ub2f9\ud558\ub294 b+tree\ub97c missed keys\ub85c \ubd84\ub958\ud558\uace0 \ub098\uba38\uc9c0 b+tree\ub4e4\uc5d0 \ub300\ud574 smget\uc744 \uacc4\uc18d \uc218\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 missed keys\uc5d0 \ud55c\ud574\uc11c\ub9cc \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - smget \uc870\ud68c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub450\ubc88\uc9f8 \uc774\ud6c4\uc758 element\uac00 trim\ub41c b+tree\uac00 \uc874\uc7ac\ud558\ub354\ub77c\ub3c4, \uadf8 \uc9c0\uc810\uc5d0\uc11c smget\uc744 \uc911\uc9c0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uadf8\ub7ec\ud55c b+tree\ub97c trimmed keys\ub85c \ubd84\ub958\ud558\uace0 \uc6d0\ud558\ub294 \uac1c\uc218\uc758 elements\ub97c \ucc3e\uc744 \ub54c\uae4c\uc9c0 smget\uc744 \uacc4\uc18d \uc9c4\ud589\ud55c\ub2e4. \ub530\ub77c\uc11c, \uc751\uc6a9\uc5d0\uc11c\ub294 trimmed keys\uc5d0 \ud55c\ud558\uc5ec \ubc31\uc5d4\ub4dc \uc800\uc7a5\uc18c\uc778 DB\uc5d0\uc11c trim\ub41c elements\ub97c \uc870\ud68c\ud558\uc5ec \ucd5c\uc885 smget \uacb0\uacfc\uc5d0 \ubc18\uc601\ud560 \uc218 \uc788\ub2e4. - bkey\uc5d0 \ub300\ud55c unique \uc870\ud68c \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uc5ec \uc870\ud68c\ud558\ub294 duplcate \uc870\ud68c \uc678\uc5d0 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud558\uace0 unique bkey\ub9cc\uc744 \uc870\ud68c\ud558\ub294 unique \uc870\ud68c\ub97c \uc9c0\uc6d0\ud55c\ub2e4. - \uc870\ud68c \uc870\uac74\uc5d0 offset \uae30\ub2a5\uc744 \uc81c\uac70\ud55c\ub2e4. \uae30\uc874 smget \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4, offset \uac12\uc740 \ud56d\uc0c1 0\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uad8c\uace0\ud55c\ub2e4. \uc591\uc218\uc758 offset\uc744 \uc0ac\uc6a9\ud558\ub294 smget\uc5d0\uc11c missed keys\uac00 \uc874\uc7ac\ud558\uace0 missed keys\uc5d0 \ub300\ud55c DB \uc870\ud68c\uac00 offset\uc73c\ub85c skip\ub41c element\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0, \uc751\uc6a9\uc5d0\uc11c \uc815\ud655\ud55c offset \ucc98\ub9ac\uac00 \ubd88\uac00\ub2a5\ud574\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\uc804\uc758 \uc870\ud68c \uacb0\uacfc\uc5d0 \uc774\uc5b4\uc11c \ucd94\uac00\ub85c \uc870\ud68c\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, \uc774\uc804\uc5d0 \uc870\ud68c\ub41c bkey \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c bkey range\ub97c \uc7ac\uc870\uc815\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. bop smget <lenkeys> <numkeys> <bkey or \"bkey range\"> [<eflag_filter>] <count> [duplicate|unique]\\r\\n <\"space separated keys\">\\r\\n * <eflag_filter> : <fwhere> [<bitwop> <foperand>] <compop> <fvalue> <\u201dspace separated keys\u201d> - \ub300\uc0c1 b+tree\ub4e4\uc758 key list\ub85c, \uc2a4\ud398\uc774\uc2a4(' ')\ub85c \uad6c\ubd84\ud55c\ub2e4. - \ud558\uc704 \ud638\ud658\uc131(1.10.X \uc774\ud558 \ubc84\uc804)\uc744 \uc704\ud574 \ucf64\ub9c8(,)\ub3c4 \uc9c0\uc6d0\ud558\uc9c0\ub9cc \uad8c\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacfc - key list \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uc640 key \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. <bkey or \"bkey range\"> - \ud558\ub098\uc758 bkey \ub610\ub294 bkey range \uc870\ud68c \uc870\uac74. Bkey range\ub294 \"bkey1..bkey2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. <eflag_filter> - eflag filter \uc870\uac74. Collection \uae30\ubcf8 \uac1c\ub150 \uc5d0\uc11c eflag filter \ucc38\uc870 \ubc14\ub780\ub2e4. <count> - \uc870\ud68c\ud560 element \uac1c\uc218 [duplicate|unique] - smget \ub3d9\uc791 \ubc29\uc2dd\uc744 \uc9c0\uc815\ud55c\ub2e4. \uc0dd\ub7b5\ub418\uba74, \uc608\uc804 smget \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4. \uc9c0\uc815\ub418\uba74, \uc2e0\uaddc smget \ub3d9\uc791\uc744 \uc218\ud589\ud55c\ub2e4. duplicate\ub294 \uc911\ubcf5 bkey\ub97c \ud5c8\uc6a9\ud558\uace0, unique\ub294 \uc911\ubcf5 bkey\ub97c \uc81c\uac70\ud55c\ub2e4. bop smget \uba85\ub839\uc740 O(small N) \uc218\ud589 \uc6d0\uce59\uc744 \uc704\ud558\uc5ec \ub2e4\uc74c\uc758 \uc81c\uc57d \uc0ac\ud56d\uc744 \uac00\uc9c4\ub2e4. - key list\uc5d0 \uc9c0\uc815 \uac00\ub2a5\ud55c \ucd5c\ub300 key \uc218\ub294 10000\uc774\ub2e4. - count\uc758 \ucd5c\ub300 \uac12\uc740 2000\uc774\ub2e4. \uae30\uc874 smget \ub3d9\uc791\uc5d0\uc11c \uc131\uacf5 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. VALUE <ecount>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n ... MISSED_KEYS <kcount>\\r\\n <key>\\r\\n <key>\\r\\n \u2026 END|DUPLICATED|TRIMMED|DUPLICATRED_TRIMMED\\r\\n \uc704 response string\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. VALUE \ubd80\ubd84: \uc870\ud68c\ud55c elements\ub97c \ub098\ud0c0\ub0b8\ub2e4. Element \uc815\ubcf4\ub294 \uc870\ud68c\ud55c element\uac00 \uc18d\ud55c b+tree\uc758 key string\uacfc flags \uc815\ubcf4 \uadf8\ub9ac\uace0 \uadf8 element\uc758 bkey, optional eflag, data\ub85c \uad6c\uc131\ub41c\ub2e4. Element \uc815\ubcf4\ub294 bkey \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub418\uba70, \ub3d9\uc77c bkey\ub97c \uac00\uc9c4 elements\ub294 key string \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c\ub2e4. MISSED_KEYS \ubd80\ubd84: smget \uc870\ud68c\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key list\uc640 \uadf8 \uc6d0\uc778\uc744 \ub098\ud0c0\ub0b8\ub2e4. <key>\ub294 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key string\uc774\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 smget response string\uc758 \ub9c8\uc9c0\ub9c9\uc744 \ub098\ud0c0\ub0b8\ub2e4. END: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc5c6\uc74c DUPLICATED: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc788\uc74c. TRIMMED: \uc870\ud68c \ubc94\uc704\uac00 trim \uc601\uc5ed\uacfc \uacb9\uce58\ub294 b+tree\ub97c \ubc1c\uacac\ud55c \uc0c1\ud0dc\uc774\ub2e4. DUPLICATED_TRIMMED: DUPLICATED\uc640 TRIMMED \uc758\ubbf8\ub97c \ubaa8\ub450 \uac00\uc9c4\ub2e4. \uc2e0\uaddc smget \ub3d9\uc791\uc5d0\uc11c \uc131\uacf5 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. ELEMENTS <ecount>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n <key> <flags> <bkey> [<eflag>] <bytes> <data>\\r\\n ... MISSED_KEYS <kcount>\\r\\n <key> <cause>\\r\\n <key> <cause>\\r\\n \u2026 TRIMMED_KEYS <kcount>\\r\\n <key> <bkey>\\r\\n <key> <bkey>\\r\\n \u2026 END|DUPLICATED\\r\\n * <cause> = NOT_FOUND | UNREADABLE | OUT_OF_RANGE \uc704 response string\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. ELEMENTS \ubd80\ubd84: \uc870\ud68c\ud55c elements\ub97c \ub098\ud0c0\ub0b8\ub2e4. Element \uc815\ubcf4\ub294 \uc870\ud68c\ud55c element\uac00 \uc18d\ud55c b+tree\uc758 key string\uacfc flags \uc815\ubcf4 \uadf8\ub9ac\uace0 \uadf8 element\uc758 bkey, optional eflag, data\ub85c \uad6c\uc131\ub41c\ub2e4. Element \uc815\ubcf4\ub294 bkey \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub418\uba70, \ub3d9\uc77c bkey\ub97c \uac00\uc9c4 elements\ub294 key string \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c\ub2e4. MISSED_KEYS \ubd80\ubd84: smget \uc870\ud68c\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key list\uc640 \uadf8 \uc6d0\uc778\uc744 \ub098\ud0c0\ub0b8\ub2e4. <key>\ub294 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c key string\uc774\ub2e4. <cause>\ub294 smget\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud55c \uc6d0\uc778\uc744 \ub098\ud0c0\ub0b8\ub2e4. NOT_FOUND: \uadf8 key\uac00 cache\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c UNREADABLE: \uadf8 key\uac00 unreadable \uc0c1\ud0dc\uc5d0 \uc788\uc74c OUT_OF_RANGE: bkey range\uc758 \uc2dc\uc791 \ubd80\ubd84\uc774 \uadf8 key\uc758 trim \uc601\uc5ed\uacfc \uacb9\uccd0 \uc788\uc74c TRIMMED_KEYS \ubd80\ubd84: smget \uc870\ud68c \ubc94\uc704\uc758 \ub4b7 \ubd80\ubd84\uc5d0\uc11c trim\uc774 \ubc1c\uc0dd\ud55c key list\uc774\ub2e4. <key>\ub294 trim\uc774 \ubc1c\uc0dd\ud55c key string\uc774\ub2e4. <bkey>\ub294 trim \uc9c1\uc804\uc5d0 \uc788\ub358 \ub9c8\uc9c0\ub9c9 bkey \uc774\ub2e4. Timmed keys \uc815\ubcf4\ub294 bkey \uae30\uc900\uc73c\ub85c \uc815\ub82c\ub41c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 smget response string\uc758 \ub9c8\uc9c0\ub9c9\uc744 \ub098\ud0c0\ub0b8\ub2e4. END: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc5c6\uc74c DUPLICATED: \uc870\ud68c \uacb0\uacfc\uc5d0 \uc911\ubcf5 bkey\uac00 \uc788\uc74c. smget \uc218\ud589\uc758 \uc2e4\ud328 \uc2dc\uc758 response string\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. \u201cTYPE_MISMATCH\u201d - \uc5b4\ub5a4 key\uac00 b+tree type\uc774 \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - smget\uc5d0 \ucc38\uc5ec\ub41c b+tree\ub4e4\uc758 bkey \uc720\ud615\uc774 \uc11c\ub85c \ub2e4\ub984. \u201cOUT_OF_RANGE\u201d - \uae30\uc874 smget \ub3d9\uc791\uc5d0\uc11c\ub9cc \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc2e4\ud328 response string\uc774\ub2e4. \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cCLIENT_ERROR bad data chunk\u201d - \uc8fc\uc5b4\uc9c4 key \ub9ac\uc2a4\ud2b8\uc5d0 \uc911\ubcf5 key\uac00 \uc874\uc7ac\ud558\uac70\ub098 \uc8fc\uc5b4\uc9c4 key \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\uac00 <lenkeys> \uae38\uc774\uc640 \ub2e4\ub974\uac70\ub098 \u201c\\r\\n\u201d\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc74c. \u201cCLIENT_ERROR bad value\u201d - \uc55e\uc11c \uae30\uc220\ud55c smget \uc5f0\uc0b0\uc758 \uc81c\uc57d \uc870\uac74\uc744 \uc704\ubc30 \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop smget - B+Tree Sort Merge Get"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#6-4-b-tree-position","text":"Arcus cache server\ub294 bkey \uae30\ubc18\uc758 element \uc870\ud68c \uae30\ub2a5 \uc678\uc5d0\ub3c4 b+tree position \uae30\ubc18\uc758 element \uc870\ud68c \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. B+tree\uc5d0\uc11c \ud2b9\uc815 element\uc758 position\uc774\ub780 b+teee\uc5d0\uc11c\uc758 \uadf8 element\uc758 \uc704\uce58 \uc815\ubcf4\ub85c\uc11c, bkey\ub4e4\uc758 \uc815\ub82c(ASC or DESC) \uae30\uc900\uc73c\ub85c \ubd10\uc11c \uba87 \ubc88\uc9f8 \uc704\uce58\ud55c element\uc778\uc9c0\ub97c \ub098\ud0c0\ub0b8\ub2e4. B+tree position\uc740 0-based index\ub85c \ud45c\ud604\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, b+tree\uc5d0 N\uac1c\uc758 elements\uac00 \uc788\ub2e4\uba74 0\ubd80\ud130 N-1\uae4c\uc9c0\uc758 index\ub85c \ub098\ud0c0\ub0b8\ub2e4. B+tree position \uae30\ubc18\uc758 \uc870\ud68c\uac00 \ud544\uc694\ud55c \uc608\ub97c \ud558\ub098 \ub4e4\uba74, ranking \uc2dc\uc2a4\ud15c\uc774 \uc788\ub2e4. Ranking \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \ud2b9\uc815 score\ub97c bkey\ub85c \ud558\uc5ec \ud574\ub2f9 elements\ub97c \uc800\uc7a5\ud558\uace0, \uc870\ud68c\ub294 \ucd5c\uace0/\ucd5c\uc800 score \uae30\uc900\uc73c\ub85c \uba87\ubc88\uc9f8 \uc704\uce58 \ub610\ub294 \uc704\uce58\uc758 \ubc94\uc704\uc5d0 \ud574\ub2f9\ud558\ub294 element\ub97c \ucc3e\ub294 \uacbd\uc6b0\uac00 \ub9ce\ub2e4.","title":"6-4. B+ tree position \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-position-btree-position","text":"b+tree collection\uc5d0\uc11c \ud2b9\uc815 element\uc758 position\uc744 \uc870\ud68c\ud55c\ub2e4. Element\uc758 position\uc774\ub780 b+tree\uc5d0\uc11c\uc758 \uc704\uce58 \uc815\ubcf4\ub85c\uc11c, bkey\ub4e4\uc758 \uc815\ub82c(ASC or DESC) \uae30\uc900\uc73c\ub85c \uba87 \ubc88\uc9f8 \uc704\uce58\ud55c element\uc778\uc9c0\ub97c \ub098\ud0c0\ub0b4\ub294 0\ubd80\ud130 N-1\uae4c\uc9c0\uc758 index\ub97c \uc758\ubbf8\ud55c\ub2e4. bop position <key> <bkey> <order>\\r\\n * <order> = asc | desc <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <order> - \uc5b4\ub5a4 bkey \uc815\ub82c \uae30\uc900\uc73c\ub85c position\uc744 \uc5bb\uc744 \uac83\uc778\uc9c0 \uba85\uc2dc \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. POSITION=<position>\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"NOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - b+tree collection \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"bop position - B+Tree Position \uc870\ud68c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-gbp-btree-get-by-position","text":"B+tree collection\uc5d0\uc11c position \uae30\ubc18\uc73c\ub85c elements\ub97c \uc870\ud68c\ud55c\ub2e4. bop gbp <key> <order> <position or \"position range\">\\r\\n * <order> = asc | desc <key> - \ub300\uc0c1 item\uc758 key string <order> - \uc5b4\ub5a4 bkey \uc815\ub82c \uae30\uc900\uc73c\ub85c position\uc744 \uc801\uc6a9\ud560 \uc9c0\ub97c \uba85\uc2dc <position or \"position range\"> - \uc870\ud68c\ud560 elements\uc758 \ud558\ub098\uc758 position \ub610\ub294 position range. Position range\ub294 \"position1..position2\" \ud615\uc2dd\uc73c\ub85c \ud45c\ud604. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. bop get \uc131\uacf5 \uc2dc\uc758 response string\uc744 \ucc38\uc870 \ubc14\ub780\ub2e4. VALUE <flags> <count>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n \u2026 END\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"NOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - b+tree collection \uc544\ub2d8 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop gbp - B+Tree Get By Position"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/6.-B+tree-Collection-Command/#bop-pwg-btree-find-position-with-get-version-180","text":"B+tree collection\uc5d0\uc11c \ud2b9\uc815 bkey\uc758 position\uc744 \uc870\ud68c\ud558\uba74\uc11c, \uadf8 bkey\ub97c \uac00\uc9c4 element\ub97c \ud3ec\ud568\ud558\uc5ec \uc55e\ub4a4\uc5d0(\uc591\ubc29\ud5a5) \uc704\uce58\ud55c element N\uac1c \uc529\uc744 \ud55c\ubc88\uc5d0 \uc870\ud68c\ud55c\ub2e4. bop pwg <key> <bkey> <order> [<count>]\\r\\n * <order> = asc | desc <key> - \ub300\uc0c1 item\uc758 key string <bkey> - \ub300\uc0c1 element\uc758 bkey <order> - \uc5b4\ub5a4 bkey \uc815\ub82c \uae30\uc900\uc73c\ub85c position\uc744 \uc5bb\uc744 \uac83\uc778\uc9c0 \uba85\uc2dc <count> - \uc870\ud68c\ud55c position\uc758 \uc55e\ub4a4\uc5d0\uc11c \uac01\uac01 \uba87 \uac1c\uc758 element\ub97c \uc870\ud68c\ud560 \uac83\uc778\uc9c0\ub97c \uba85\uc2dc ( \ucd5c\ub300 \uac12\uc740 100\uc73c\ub85c \uc81c\ud55c ) 0\uc774\uba74, \uc870\ud68c\ud55c position\uc758 element\ub9cc \uc870\ud68c \uc591\uc218\uc774\uba74, \uc870\ud68c\ud55c position\uc758 element \uc678\uc5d0 \uadf8 position\uc758 \uc55e\ub4a4\uc5d0\uc11c \uac01\uac01 \uadf8 \uc218\ub9cc\ud07c element \uc870\ud68c \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. VALUE <position> <flags> <count> <index>\\r\\n <bkey> [<eflag>] <bytes> <data>\\r\\n ... <bkey> [<eflag>] <bytes> <data>\\r\\n END\\r\\n \uc704\uc758 VALUE \ub77c\uc778\uc5d0\uc11c \uac01 \uac12\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uadf8 \uc544\ub798 \ub77c\uc778\ub4e4\uc5d0\uc11c element \uac12\uc758 \ud45c\ud604\uc740 bop get \uacbd\uc6b0\uc640 \ub3d9\uc77c\ud558\ub2e4. <position> : \uc8fc\uc5b4\uc9c4 bkey\uc758 position <flags> : b+tree item\uc758 flags \uc18d\uc131\uac12 <count> : \uc870\ud68c\ud55c \uc804\uccb4 element \uac1c\uc218 <index> : \uc804\uccb4 element list\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 bkey\ub97c \uac00\uc9c4 element \uc704\uce58 (0-based index) \uc8fc\uc5b4\uc9c4 bkey\uc758 position\uacfc element\ub9cc \uc870\ud68c\ud558\uba74, count\ub294 1\uc774 \ub418\uace0, index\ub294 0\uc774 \ub41c\ub2e4. \uc8fc\uc5b4\uc9c4 bkey\uc758 position\uacfc element \uc678\uc5d0 \uc591\ubc29\ud5a5 10\uac1c element \uc870\ud68c\uc5d0\uc11c, \uadf8 position \uc55e\uc5d0 5\uac1c element\uac00 \uc874\uc7ac\ud558\uace0 \ub4a4\uc5d0 10\uac1c element\uac00 \uc874\uc7ac\ud55c\ub2e4\uba74 count\ub294 (5 + 1 + 10) = 16\uc774 \ub418\uace0, index\ub294 5\uac00 \ub41c\ub2e4. \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"NOT_FOUND\u201d - key miss \u201cNOT_FOUND_ELEMENT\u201d - element miss \u201cTYPE_MISMATCH\u201d - b+tree collection \uc544\ub2d8 \u201cBKEY_MISMATCH\u201d - \uba85\ub839 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 bkey \uc720\ud615\uacfc \ub300\uc0c1 b+tree\uc758 bkey \uc720\ud615\uc774 \ub2e4\ub984 \u201cUNREADABLE\u201d - \ud574\ub2f9 item\uc774 unreadable item\uc784 \"NOT_SUPPORTED\" - \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc74c \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \u201cSERVER_ERROR out of memory [writing get response]\u201d - \uba54\ubaa8\ub9ac \ubd80\uc871","title":"bop pwg - B+Tree Find Position with Get (version 1.8.0)"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/7.-Collection-Command-Pipelining/","text":"Command pipelining\uc740 \u201cpipe\u201d \ud0a4\uc6cc\ub4dc\ub97c \ud1b5\ud574 \uc5ec\ub7ec collection \uba85\ub839\ub4e4\uc744 pipelining\ud558\uc5ec cache server\uc5d0 \uc804\ub2ec\ud558\uace0, cache server\ub294 \uac01 \uba85\ub839\uc744 \ucc98\ub9ac\ud55c \uc989\uc2dc \uadf8 response\ub97c client\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \uadf8 response\ub97c reply queue\uc5d0 \ubcf4\uad00\ud574 \ub450\uc5c8\ub2e4\uac00, \ub9c8\uc9c0\ub9c9 \uba85\ub839 \ucc98\ub9ac \ud6c4\uc5d0 reply queue\uc5d0 \ubcf4\uad00\ud574 \ub454 \uc804\uccb4 response\ub97c \ud55c\ubc88\uc5d0 client\ub85c \uc804\ub2ec\ud558\ub294 \uae30\ub2a5\uc774\ub2e4. \uae30\uc874\uc5d0 N \ubc88\uc758 request \u2013 response\ub97c \uc804\ub2ec\ud558\ub358 \uac83\uc5d0 \ube44\ud574 command pipelining\uc740 \ud55c \ubc88\uc758 request stream\uacfc \ud55c \ubc88\uc758 response stream\uc744 \uc804\ub2ec\ud560 \uc218 \uc788\uac8c \ud568\uc73c\ub85c\uc368 network \ube44\uc6a9\uc744 \uc0c1\ub2f9\ud788 \uc904\uc77c \uc218 \uc788\uc73c\uba70, \uc804\uccb4 latency\ub97c \uc904\uc77c \uc218 \uc788\ub294 \uc7a5\uc810\uc744 \uac00\uc9c4\ub2e4. Command pipelining\uc740 \ud604\uc7ac collection \uba85\ub839\ub4e4 \uc911 \uc77c\ubd80\uc5d0 \ud55c\ud574\uc11c\ub9cc \uac00\ub2a5\ud558\ub2e4. Command pipelining \uac00\ub2a5\ud55c \uba85\ub839\uc740 \uc544\ub798\uc640 \uac19\uc73c\uba70, \ub2e8\uc21c response string\uc744 \uac00\uc9c0\ub294 \uba85\ub839\ub9cc \uc774\uc5d0 \ud574\ub2f9\ub41c\ub2e4. \ud55c\ubc88\uc5d0 pipelining\uc774 \uac00\ub2a5\ud55c \ucd5c\ub300 \uba85\ub839\uc758 \uc218\ub294 500 \uac1c\ub85c \uc81c\ud55c\uc744 \ub450\uace0 \uc788\uc74c\uc744 \uc8fc\uc758\ud558\uc5ec\uc57c \ud55c\ub2e4. lop \uba85\ub839\ub4e4 - lop insert/delete sop \uba85\ub839\ub4e4 - sop insert/delete/exist mop \uba85\ub839\ub4e4 - mop insert/delete/update bop \uba85\ub839\ub4e4 - bop insert/upsert/delete/update/incr/decr Command pipelining \uc218\ud589 \uc608\ub85c, \ud2b9\uc815 list\uc758 tail \ucabd\uc73c\ub85c 10\uac1c elements\ub97c \ucd94\uac00\ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc544\ub798\uc640 \uac19\uc774 lop insert \uba85\ub839\uc744 \uc5f0\uc18d\ud558\uc5ec cache server\ub85c \ubcf4\ub0b4\uba74 \ub41c\ub2e4. \uccab \ubc88\uc9f8 \uba85\ub839\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ubc14\ub85c \uc774\uc804 \uba85\ub839\uae4c\uc9c0\ub294 \ubaa8\ub450 \u201cpipe\u201d \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc5f0\uacb0\ud558\uc5ec\uc57c \ud558\uace0, \ub9c8\uc9c0\ub9c9 \uba85\ub839\uc5d0\uc11c\ub294 \u201cpipe\u201d \uc778\uc790\ub97c \uc0dd\ub7b5\ud568\uc73c\ub85c\uc368 pipelining\uc758 \ub05d\uc784\uc744 \ud45c\ud604\ud558\uc5ec\uc57c \ud55c\ub2e4. lop insert lkey -1 6 pipe\\r\\ndatum0\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum1\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum2\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum3\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum4\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum5\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum6\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum7\\r\\n lop insert lkey -1 6 pipe\\r\\ndatum8\\r\\n lop insert lkey -1 6\\r\\ndatum9\\r\\n Command pipelining\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. RESPONSE <count>\\r\\n <STATUS of the 1st pipelined command>\\r\\n <STATUS of the 2nd pipelined command>\\r\\n ... <STATUS of the last pipelined command>\\r\\n END|PIPE_ERROR <error_string>\\r\\n RESPONSE \ub77c\uc778\uc5d0\uc11c <count>\ub294 \uc804\uccb4 \uacb0\uacfc \uc218\ub97c \ub098\ud0c0\ub0b4\uace0, \uadf8 \ub2e4\uc74c \ub77c\uc778\ub4e4\uc740 \uac01 \uba85\ub839\uc758 \uc218\ud589 \uacb0\uacfc\ub97c \ucc28\ub840\ub85c \ub098\ud0c0\ub0b8\ub2e4. \uac01 \uba85\ub839\uc758 \uacb0\uacfc\ub294 \uac01 \uba85\ub839\ub9c8\ub2e4 \ub2e4\ub974\ubbc0\ub85c \uac01 \uba85\ub839\uc5d0 \ub300\ud55c \uc124\uba85\uc744 \ucc38\uc870\ud558\uc5ec\uc57c \ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ub77c\uc778\uc740 pipelining \uc218\ud589 \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\uba70, \uc544\ub798 \uc911\uc758 \ud558\ub098\ub97c \uac00\uc9c4\ub2e4. \"END\" - pipelining \uc5f0\uc0b0\uc774 \uc815\uc0c1 \uc218\ud589\ub428 \u201cPIPE_ERROR command overflow\u201d - pipelining \uac00\ub2a5\ud55c \ucd5c\ub300 commands \uc218\uc778 500\uac1c\ub97c \ucd08\uacfc\ud558\uc600\ub2e4. \uc774 \uacbd\uc6b0, 500\uac1c\uae4c\uc9c0\uc758 command\ub4e4\ub9cc \ud558\ub098\uc758 command pipelining\uc73c\ub85c \ucc98\ub9ac\ub418\uace0 \ud558\ub098\uc758 response stream\uc73c\ub85c \ub9ac\ud134\ub41c\ub2e4. \uadf8 \uc774\ud6c4\uc758 commands\ub4e4\uc740 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub294\ub2e4. \u201cPIPE_ERROR memory overflow\u201d - Arcus cache server \ub0b4\ubd80\uc5d0\uc11c pipelining \ucc98\ub9ac\ub97c \uc704\ud55c \uba54\ubaa8\ub9ac \uacf5\uac04\uc774 \ubd80\uc871\ud55c \uc0c1\ud0dc\ub97c \uc758\ubbf8\ud55c\ub2e4. Arcus cache server\ub294 500\uac1c commands\uc758 result\ub97c \ub2f4\uc544\ub458 \uacf5\uac04\uc744 \ubbf8\ub9ac \ud655\ubcf4\ud558\uc5ec \uc218\ud589\ud558\ubbc0\ub85c \uc774 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uac00\ub2a5\uc131\uc740 \uac70\uc758 \uc5c6\ub2e4. \ub2e8, \uc758\ub3c4\ud558\uc9c0 \uc54a\uc740 \uc774\uc720\uc5d0 \uc758\ud55c \uacbd\uc6b0\ub97c \ub300\ube44\ud558\uc5ec \uc774 \uc624\ub958\ub97c \ucd94\uac00\ud574 \ub454 \uac83\uc774\ub2e4. \uc774 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uba74, \uadf8 \uc2dc\uc810\uc5d0 command pipelining\uc744 \uc911\uc9c0\ud558\uace0 \uadf8 \uc989\uc2dc response stream\uc744 client\uc5d0 \uc804\ub2ec\ud55c\ub2e4. \uc774 \uacbd\uc6b0\uc758 response stream\uc5d0\ub294 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 \uc218\ud589\ub41c command\uc758 response string\uc774 \uc0dd\ub7b5\ub41c\ub2e4. \uadf8\ub9ac\uace0, \uadf8 \uc774\ud6c4\uc758 commands\ub4e4\uc740 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub294\ub2e4. \u201cPIPE_ERROR bad error\u201d - pipelining \uc73c\ub85c \uc5b4\ub5a4 command\ub97c \uc218\ud589 \uc911 \u201cCLIENT_ERROR\u201d\uc640 \u201cSERVER_ERROR\u201d\ub85c \uc2dc\uc791\ud558\ub294 \uc911\uc694 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0\uc774\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\ub3c4, \uadf8 \uc989\uc2dc command pipelining\uc744 \uc911\uc9c0\ud558\uace0 \ud604\uc7ac\uae4c\uc9c0\uc758 response stream\uc744 client\uc5d0 \uc804\ub2ec\ud55c\ub2e4. \uadf8\ub9ac\uace0, \uadf8 \uc774\ud6c4\uc758 commands\ub4e4\uc740 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"7. Collection Command Pipelining"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/8.-Item-Attribute-Command/","text":"Item attributes\ub97c \uc870\ud68c\ud558\ub294 getattr \uba85\ub839\uacfc \ubcc0\uacbd\ud558\ub294 setattr \uba85\ub839\uc744 \uc18c\uac1c\ud55c\ub2e4. Arcus\uc5d0\uc11c \uc5b4\ub5a4 item attributes\ub97c \uc81c\uacf5\ud558\ub294 \uc9c0\ub97c \uc54c\uace0\uc790 \ud55c\ub2e4\uba74, Item Attribute \uc124\uba85 )\uc744 \ucc38\uace0 \ubc14\ub780\ub2e4. 8-1. getattr - Item Attribute \uc870\ud68c Item attributes\ub97c \uc870\ud68c\ud558\ub294 getattr \uba85\ub839\uc740 \uc544\ub798\uc640 \uac19\ub2e4. getattr <key> [<name> ...]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string [<name> ...] - \uc870\ud68c\ud560 attribute name\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc9c0\uc815\ud558\ub294 \uac83\uc774\uba70, \uc774\ub97c \uc0dd\ub7b5\ud558\uba74, item \uc720\ud615\uc5d0 \ub530\ub77c \uc870\ud68c\uac00\ub2a5\ud55c \ubaa8\ub4e0 attributes \uac12\uc744 \uc870\ud68c\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. getattr \uba85\ub839\uc758 \uc778\uc790\ub85c \uc9c0\uc815\ud55c attribute name \uc21c\uc11c\ub300\ub85c name\uacfc value\uc758 \uc30d\uc744 \ub9ac\ud134\ud55c\ub2e4. ATTR <name>=<value>\\r\\n ATTR <name>=<value>\\r\\n ... END\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cATTR_ERROR not found\" - \uc778\uc790\ub85c \uc9c0\uc815\ud55c attribute\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 \ud574\ub2f9 item \uc720\ud615\uc5d0\uc11c \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 attribute\uc784. \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc 8-2. setattr - Item Attribute \ubcc0\uacbd Item attributes\ub97c \ubcc0\uacbd\ud558\ub294 setattr \uba85\ub839\uc740 \uc544\ub798\uc640 \uac19\ub2e4. \ubaa8\ub4e0 attributes\uc5d0 \ub300\ud574 \uc870\ud68c\uac00 \uac00\ub2a5\ud558\uc9c0\ub9cc, \ubcc0\uacbd\uc740 \uc77c\ubd80 attributes\uc5d0 \ub300\ud574\uc11c\ub9cc \uac00\ub2a5\ud558\ub2e4. \ubcc0\uacbd\uac00\ub2a5\ud55c attributes\ub85c\ub294 expiretime, maxcount, overflowaction, readable, maxbkeyrange\uac00 \uc788\ub2e4. setattr <key> <name>=<value> [<name>=<value> ...]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <name>=<value> - \ubcc0\uacbd\ud560 attribute\uc758 name\uacfc value \uc30d\uc744 \ud558\ub098 \uc774\uc0c1 \uba85\uc2dc\ud558\uc5ec\uc57c \ud55c\ub2e4. \uc774 \uba85\ub839\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"OK\" - \uc131\uacf5 \u201cNOT_FOUND\u201d - key miss \u201cATTR_ERROR not found\" - \uc778\uc790\ub85c \uc9c0\uc815\ud55c attribute\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 \ud574\ub2f9 item \uc720\ud615\uc5d0\uc11c \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 attribute\uc784. \u201cATTR_ERROR bad value\u201d - \ud574\ub2f9 attribute\uc5d0 \ub300\ud574 \uc0c8\ub85c \ubcc0\uacbd\ud558\uace0\uc790 \ud558\ub294 value\uac00 allowed value\uac00 \uc544\ub2d8. \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"8. Item Attribute Command"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/8.-Item-Attribute-Command/#8-1-getattr-item-attribute","text":"Item attributes\ub97c \uc870\ud68c\ud558\ub294 getattr \uba85\ub839\uc740 \uc544\ub798\uc640 \uac19\ub2e4. getattr <key> [<name> ...]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string [<name> ...] - \uc870\ud68c\ud560 attribute name\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc9c0\uc815\ud558\ub294 \uac83\uc774\uba70, \uc774\ub97c \uc0dd\ub7b5\ud558\uba74, item \uc720\ud615\uc5d0 \ub530\ub77c \uc870\ud68c\uac00\ub2a5\ud55c \ubaa8\ub4e0 attributes \uac12\uc744 \uc870\ud68c\ud55c\ub2e4. \uc131\uacf5 \uc2dc\uc758 response string\uc740 \uc544\ub798\uc640 \uac19\ub2e4. getattr \uba85\ub839\uc758 \uc778\uc790\ub85c \uc9c0\uc815\ud55c attribute name \uc21c\uc11c\ub300\ub85c name\uacfc value\uc758 \uc30d\uc744 \ub9ac\ud134\ud55c\ub2e4. ATTR <name>=<value>\\r\\n ATTR <name>=<value>\\r\\n ... END\\r\\n \uc2e4\ud328 \uc2dc\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cNOT_FOUND\u201d - key miss \u201cATTR_ERROR not found\" - \uc778\uc790\ub85c \uc9c0\uc815\ud55c attribute\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 \ud574\ub2f9 item \uc720\ud615\uc5d0\uc11c \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 attribute\uc784. \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"8-1. getattr - Item Attribute \uc870\ud68c"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/8.-Item-Attribute-Command/#8-2-setattr-item-attribute","text":"Item attributes\ub97c \ubcc0\uacbd\ud558\ub294 setattr \uba85\ub839\uc740 \uc544\ub798\uc640 \uac19\ub2e4. \ubaa8\ub4e0 attributes\uc5d0 \ub300\ud574 \uc870\ud68c\uac00 \uac00\ub2a5\ud558\uc9c0\ub9cc, \ubcc0\uacbd\uc740 \uc77c\ubd80 attributes\uc5d0 \ub300\ud574\uc11c\ub9cc \uac00\ub2a5\ud558\ub2e4. \ubcc0\uacbd\uac00\ub2a5\ud55c attributes\ub85c\ub294 expiretime, maxcount, overflowaction, readable, maxbkeyrange\uac00 \uc788\ub2e4. setattr <key> <name>=<value> [<name>=<value> ...]\\r\\n <key> - \ub300\uc0c1 item\uc758 key string <name>=<value> - \ubcc0\uacbd\ud560 attribute\uc758 name\uacfc value \uc30d\uc744 \ud558\ub098 \uc774\uc0c1 \uba85\uc2dc\ud558\uc5ec\uc57c \ud55c\ub2e4. \uc774 \uba85\ub839\uc758 response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"OK\" - \uc131\uacf5 \u201cNOT_FOUND\u201d - key miss \u201cATTR_ERROR not found\" - \uc778\uc790\ub85c \uc9c0\uc815\ud55c attribute\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 \ud574\ub2f9 item \uc720\ud615\uc5d0\uc11c \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 attribute\uc784. \u201cATTR_ERROR bad value\u201d - \ud574\ub2f9 attribute\uc5d0 \ub300\ud574 \uc0c8\ub85c \ubcc0\uacbd\ud558\uace0\uc790 \ud558\ub294 value\uac00 allowed value\uac00 \uc544\ub2d8. \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"8-2. setattr - Item Attribute \ubcc0\uacbd"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/","text":"9-1. Flush \uba85\ub839 Arcus cache server\ub294 items\uc744 invalidate \uc2dc\ud0a4\uae30 \uc704\ud55c \ub450 \uac00\uc9c0 flush \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. flush_all : \ubaa8\ub4e0 items\uc744 flush flush_prefix: \ud2b9\uc815 prefix\uc758 items\ub4e4\ub9cc flush Flush \uc791\uc5c5\uc740 items\uc744 invalidate\uc2dc\ud0a4\ub354\ub77c\ub3c4 \uadf8 items\uc774 \ucc28\uc9c0\ud55c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc989\uac01 \ubc18\ud658\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0, Arcus cache server\uc758 global \uc815\ubcf4\ub85c flush \uc218\ud589 \uc2dc\uc810 \uc815\ubcf4\ub97c \uae30\ub85d\ud574 \ub460\uc73c\ub85c\uc368, \uadf8 \uc2dc\uc810 \uc774\uc804\uc5d0 \uc874\uc7ac\ud588\ub358 items\uc740 invalidated items\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uac8c \ud55c\ub2e4. \ub530\ub77c\uc11c, item \uc811\uadfc\ud560 \ub54c\ub9c8\ub2e4 invalidated item\uc778\uc9c0\ub97c \ud655\uc778\ud558\uc5ec\uc57c \ud558\ub294 \ubd80\ub2f4\uc774 \uc788\uc9c0\ub9cc, flush \uc791\uc5c5 \uc790\uccb4\ub294 O(1) \uc2dc\uac04\uc5d0 \uadf8 \uc218\ud589\uc774 \uc644\ub8cc\ub41c\ub2e4. flush_all \uba85\ub839\uc740 flush \uc218\ud589 \uc2dc\uc810 \uc815\ubcf4\ub9cc \uae30\ub85d\ud574 \ub450\uace0, \uc804\uccb4 prefix\ub4e4\uc758 \ud1b5\uacc4 \uc815\ubcf4\ub294 \uadf8\ub300\ub85c \ub0a8\uaca8 \ub454\ub2e4. \ub530\ub77c\uc11c, flush_all\uc744 \uc218\ud589\ud558\ub354\ub77c\ub3c4 prefix \uad00\ub828\ud55c \ud1b5\uacc4 \uc815\ubcf4\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \ud574\ub2f9 prefix\uc5d0 \uc18d\ud55c items\uc774 \ubaa8\ub450 \uc81c\uac70\ub418\ub294 \uc2dc\uc810\uc5d0, \uadf8 prefix\uc758 \ud1b5\uacc4 \uc815\ubcf4\ub294 \ud568\uaed8 \uc81c\uac70\ub41c\ub2e4. \ubc18\uba74, flsuh_prefix \uba85\ub839\uc740 \ud574\ub2f9 prefix\uc5d0 \ub300\ud55c flush \uc218\ud589 \uc2dc\uc810 \uc815\ubcf4\ub97c \uae30\ub85d\ud574 \ub450\uba74\uc11c, \uadf8 prefix\uc758 \ud1b5\uacc4 \uc815\ubcf4\ub97c \ubaa8\ub450 reset\uc2dc\ucf1c \uc81c\uac70\ud55c\ub2e4\ub294 \uac83\uc774 \ucc28\uc774\uac00 \uc788\ub2e4. \ub530\ub77c\uc11c, flush_prefix \uc218\ud589 \uc774\ud6c4\uc5d0\ub294 \ud574\ub2f9 prefix\uc5d0 \ub300\ud55c \ud1b5\uacc4 \uc815\ubcf4\ub97c \uc870\ud68c\ud560 \uc218 \uc5c6\uac8c \ub41c\ub2e4. \ub450 flush \uba85\ub839\uc758 syntax\ub294 \uc544\ub798\uc640 \uac19\ub2e4. flush_all [<delay>] [noreply]\\r\\n flush_prefix <prefix> [<delay>] [noreply]\\r\\n <prefix> - prefix string. \"<null>\"\uc744 \uc0ac\uc6a9\ud558\uba74, prefix string\uc774 \uc5c6\ub294 item\ub4e4\uc744 invalidate\uc2dc\ud0a8\ub2e4. <delay> - \uc9c0\uc5f0\ub41c invalidation \uc694\uccad \uc2dc\uc5d0 \uba85\uc2dc\ud558\uba70, \uadf8 \uc9c0\uc5f0 \uae30\uac04\uc744 \ucd08(second) \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc774 \uc0dd\ub7b5\ub41c\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"OK\" - \uc131\uacf5 \u201cNOT_FOUND\u201d - prefix miss (flush_prefix \uba85\ub839\uc778 \uacbd\uc6b0\ub9cc \ud574\ub2f9) CLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc 9-2. Scrub \uba85\ub839 Arcus cache server\uc5d0\ub294 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uba54\ubaa8\ub9ac\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\ub294 items\uc774 \uc874\uc7ac\ud560 \uc218 \uc788\ub2e4. \uc774 items\uc740 \uc544\ub798 \ub450 \uc720\ud615\uc73c\ub85c \uad6c\ubd84\ub41c\ub2e4. Arcus cache server\uc5d0\uc11c \uc5b4\ub5a4 items\uc774 expired\ub418\ub354\ub77c\ub3c4 \uadf8 items\uc740 \uc989\uac01 \uc81c\uac70\ub418\uc9c0 \uc54a\uc73c\uba70, flush \uba85\ub839\uc73c\ub85c \uc5b4\ub5a4 items\uc744 invalidate\uc2dc\ud0a4\ub354\ub77c\ub3c4 \uadf8 items\uc740 \uc989\uac01 \uc81c\uac70\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub4e4 items\uc740 Arcus cache server \ub0b4\ubd80\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ucc28\uc9c0\ud558\uba74\uc11c \uacc4\uc18d \uc874\uc7ac\ud558\uace0 \uc788\ub2e4. \uc5b4\ub5a4 \uc774\uc720\uc774\ub4e0 \uc774 items\uc5d0 \ub300\ud55c \uc811\uadfc\uc774 \ubc1c\uc0dd\ud560 \ub54c Arcus cache server\ub294 expired/flushed \uc0c1\ud0dc\uc784\uc744 \uc54c\uac8c \ub418\uba70, \uadf8 items\uc744 \uc81c\uac70\ud568\uc73c\ub85c\uc368 \uadf8 items\uc774 \ucc28\uc9c0\ud55c \uba54\ubaa8\ub9ac\ub97c \ubc18\ud658\ud55c\ub2e4. Cache cloud\ub97c \ud615\uc131\ud558\uace0 consistent hashing\uc758 key-to-node mapping\uc744 \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0\uc11c, \uadf8 cache cloud\uc5d0 \ud2b9\uc815 node\uc758 \ucd94\uac00\ub098 \uc0ad\uc81c\uc5d0 \uc758\ud574 key-to-node remapping\uc774 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4. \uc774\ub7ec\ud55c key-to-node remapping\uc774 \ubc1c\uc0dd\ud558\uba74, \uc5b4\ub5a4 node\uc5d0 \uc788\ub358 \uae30\uc874 items\uc740 \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \uc774\ub7ec\ud55c items\uc744 stale items\uc774\ub77c \ud55c\ub2e4. \uc774\ub7ec\ud55c stale items\uc740 \uc790\uc5f0\uc2a4\ub7fd\uac8c expired \ub418\uae30\ub3c4 \ud558\uc9c0\ub9cc, old data\ub97c \uac00\uc9c0\uace0 \ub0a8\uc544 \uc788\ub2e4\uac00 \uadf8 \uc774\ud6c4\uc758 key-to-node remapping\uc5d0 \uc758\ud574 \uc720\ud6a8\ud55c items\uc73c\ub85c \ub2e4\uc2dc \uc804\ud658\ub420 \uc5ec\uc9c0\uac00 \uc788\ub2e4. \ub530\ub77c\uc11c, \uc774\ub7ec\ud55c stale items\uc740 cache cloud\uc758 node list\uac00 \ubcc0\uacbd\ub420 \ub54c\ub9c8\ub2e4 \uc81c\uac70\ud558\uc5ec\uc57c \ud55c\ub2e4. Scrub \uae30\ub2a5\uc774\ub780 (1) expired item, flushed item\uacfc \uac19\uc740 invalidated item\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc81c\uac70\ud558\ub294 \uae30\ub2a5\uacfc (2) cache cloud\uc5d0\uc11c\uc758 key-to-node remapping\uc73c\ub85c \ubc1c\uc0dd\ud55c stale items\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc81c\uac70\ud558\ub294 \uae30\ub2a5\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774\ub7ec\ud55c scrub \uae30\ub2a5\uc740 daemon thread\uc5d0 \uc758\ud574 background \uc791\uc5c5\uc73c\ub85c \uc218\ud589\ub418\uba70, \ud55c \uc21c\uac04\uc5d0 \ud558\ub098\uc758 scrub \uc791\uc5c5\ub9cc \uc218\ud589\ub420 \uc218 \uc788\ub2e4. \uc989, scrub \uc791\uc5c5\uc774 \uc9c4\ud589 \uc911\uc778 \uc0c1\ud0dc\uc5d0\uc11c \uc0c8\ub85c\uc6b4 scrub \uc791\uc5c5\uc744 \uc694\uccad\ud560 \uc218 \uc5c6\ub2e4. scrub [stale]\\r\\n stale - \uba85\uc2dc\ud558\uc9c0 \uc54a\uc73c\uba74 invalidated item\uc744 \uc81c\uac70\ud558\uace0, \uba85\uc2dc\ud558\uba74 stale item\uc744 \uc81c\uac70\ud55c\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cOK\u201d - \uc131\uacf5 \u201cBUSY\u201d - \ud604\uc7ac scrub \uc791\uc5c5\uc774 \uc218\ud589 \uc911\uc774\uc5b4\uc11c \uc0c8\ub85c\uc6b4 scrub \uc791\uc5c5\uc744 \uc694\uccad\ud560 \uc218 \uc5c6\uc74c \u201cNOT_SUPPORTED\u201d - \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 scrub \uba85\ub839 \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \ucc38\uace0 \uc0ac\ud56d\uc73c\ub85c, scrub \uba85\ub839\uc740 ascii \uba85\ub839\uc758 extension \uae30\ub2a5\uc73c\ub85c \uad6c\ud604\ub418\uc5c8\uae30\uc5d0, Arcus cache server \uad6c\ub3d9 \uc2dc\uc5d0 ascii_scrub.so \ud30c\uc77c\uc744 dynamic linking \ud558\ub294 \uad6c\ub3d9 \uc635\uc158\uc744 \uc8fc\uc5b4\uc57c scrub \uba85\ub839\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. 9-3. Stats \uba85\ub839 Arcus cache server\uc758 \uac01\uc885 \ud1b5\uacc4 \uc815\ubcf4\ub97c \uc870\ud68c\ud558\uac70\ub098 \uadf8 \ud1b5\uacc4 \uc815\ubcf4\ub97c reset\ud55c\ub2e4. stats [<args>]\\r\\n <args>\ub97c \uc0dd\ub7b5\ud558\uac70\ub098, \uc5b4\ub5a4 \uac12\uc744 \uc8fc\ub290\ub0d0\uc5d0 \ub530\ub77c stats \uba85\ub839\uc758 \ub3d9\uc791\uc740 \uc544\ub798\uc640 \uac19\uc774 \ub2ec\ub77c\uc9c4\ub2e4. <args> | stats \uba85\ub839\uc758 \ub3d9\uc791 ------------------ | ------------------------------------------- | General purpose \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c settings | Configuration \uc815\ubcf4 \uc870\ud68c items | Item \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c slabs | Slab \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c prefixes | Prefix \ubcc4 item \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c detail on|off|dump | Prefix \ubcc4 \uc218\ud589 \uba85\ub839 \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c \ubc0f \uc81c\uc5b4 scrub | scrub \uc218\ud589 \uc0c1\ud0dc \uc870\ud68c cachedump | slab class \ubcc4 cache key dump reset | \ubaa8\ub4e0 \ud1b5\uacc4 \uc815\ubcf4\ub97c reset stats \uba85\ub839\uc740 \uc9c1\uc811 \ud55c\ubc88\uc529 \uc218\ud589\ud574 \ubcf4\uae30\ub97c \uad8c\ud558\uba70, \uc544\ub798\uc5d0\uc11c\ub294 \ucd94\uac00 \uc124\uba85\uc774 \ud544\uc694\ud55c \ubd80\ubd84\ub4e4\ub9cc \uae30\uc220\ud55c\ub2e4. 9-4. Prefix \ud1b5\uacc4 \uc815\ubcf4 \ubaa8\ub4e0 prefix\ub4e4\uc758 item \ud1b5\uacc4 \uc815\ubcf4\ub294 \"stats prefixes\" \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud558\uace0, \ubaa8\ub4e0 prefix\ub4e4\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\ub294 \"stats detail dump\" \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud55c\ub2e4. \uadf8\ub9ac\uace0, Prefix\ub4e4\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\uc5d0 \ud55c\ud574, \ud1b5\uacc4 \uc815\ubcf4\uc758 \uc218\uc9d1 \uc5ec\ubd80\ub97c on \ub610\ub294 off \ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 prefix\ub4e4\uc758 item \ud1b5\uacc4 \uc815\ubcf4\uc758 \uacb0\uacfc \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. <null> prefix \ud1b5\uacc4\ub294 prefix\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294 items \ud1b5\uacc4\uc774\ub2e4. PREFIX <null> itm 2 kitm 1 litm 1 sitm 0 mitm 0 bitm 0 tsz 144 ktsz 64 ltsz 80 stsz 0 mtsz 0 btsz 0 time 20121105152422 PREFIX a itm 5 kitm 5 litm 0 sitm 0 mitm 0 bitm 0 tsz 376 ktsz 376 ltsz 0 stsz 0 mtsz 0 btsz 0 time 20121105152422 PREFIX b itm 2 kitm 2 litm 0 sitm 0 mitm 0 bitm 0 tsz 144 ktsz 144 ltsz 0 stsz 0 mtsz 0 btsz 0 time 20121105152422 END \uac01 prefix\uc758 item \ud1b5\uacc4 \uc815\ubcf4\uc5d0 itm\uc740 \uc804\uccb4 item \uc218\uc774\uace0, kitm, litm, sitm, mitm, bitm\uc740 \uac01\uac01 kv, list, set, map, b+tree item \uc218\uc774\uba70, tsz(total size)\ub294 \uc804\uccb4 items\uc774 \ucc28\uc9c0\ud558\ub294 \uacf5\uac04\uc758 \ud06c\uae30\uc774\uace0, ktsz, ltsz, stsz, mtsz, btsz\ub294 \uac01\uac01 kv, list, set, map, b+tree items\uc774 \ucc28\uc9c0\ud558\ub294 \uacf5\uac04\uc758 \ud06c\uae30\uc774\ub2e4. time\uc740 prefix \uc0dd\uc131 \uc2dc\uac04\uc774\ub2e4. \ubaa8\ub4e0 prefix\ub4e4\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\uc758 \uacb0\uacfc \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uac01 PREFIX \ub77c\uc778\uc740 \uc2e4\uc81c\ub85c \ud558\ub098\uc758 line\uc73c\ub85c \ud45c\uc2dc\ub418\uc9c0\ub9cc, \ubcf8 \ubb38\uc11c\ub294 \uc774\ud574\ub97c \ub3d5\uae30 \uc704\ud574 \uc5ec\ub7ec line\uc73c\ub85c \ud45c\uc2dc\ud55c\ub2e4. PREFIX <null> get 2 hit 2 set 2 del 0 lcs 0 lis 0 lih 0 lds 0 ldh 0 lgs 0 lgh 0 scs 0 sis 0 sih 0 sds 0 sdh 0 sgs 0 sgh 0 ses 0 seh 0 mcs 0 mis 0 mih 0 mus 0 muh 0 mds 0 mdh 0 mgs 0 mgh 0 bcs 0 bis 0 bih 0 bus 0 buh 0 bds 0 bdh 0 bps 0 bph 0 bms 0 bmh 0 bgs 0 bgh 0 bns 0 bnh 0 pfs 0 pfh 0 pgs 0 pgh 0 gas 0 sas 0 PREFIX a get 5 hit 5 set 5 del 0 lcs 0 lis 0 lih 0 lds 0 ldh 0 lgs 0 lgh 0 scs 0 sis 0 sih 0 sds 0 sdh 0 sgs 0 sgh 0 ses 0 seh 0 mcs 0 mis 0 mih 0 mus 0 muh 0 mds 0 mdh 0 mgs 0 mgh 0 bcs 0 bis 0 bih 0 bus 0 buh 0 bds 0 bdh 0 bps 0 bph 0 bms 0 bmh 0 bgs 0 bgh 0 bns 0 bnh 0 pfs 0 pfh 0 pgs 0 pgh 0 gas 0 sas 0 PREFIX b get 2 hit 2 set 2 del 0 lcs 0 lis 0 lih 0 lds 0 ldh 0 lgs 0 lgh 0 scs 0 sis 0 sih 0 sds 0 sdh 0 sgs 0 sgh 0 ses 0 seh 0 mcs 0 mis 0 mih 0 mus 0 muh 0 mds 0 mdh 0 mgs 0 mgh 0 bcs 0 bis 0 bih 0 bus 0 buh 0 bds 0 bdh 0 bps 0 bph 0 bms 0 bmh 0 bgs 0 bgh 0 bns 0 bnh 0 pfs 0 pfh 0 pgs 0 pgh 0 gas 0 sas 0 END \uac01 prefix\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\uc5d0\uc11c get, hit, set, del\uc740 kv \uc720\ud615\uc758 items\uc5d0 \ub300\ud55c \uc5f0\uc0b0 \ud1b5\uacc4\uc774\uace0, 'l', 's', 'm', 'b'\ub85c \uc2dc\uc791\ud558\ub294 3 character\ub294 \uac01\uac01 list, set, map, b+tree \uc720\ud615\uc758 items\uc5d0 \ub300\ud55c \uc5f0\uc0b0 \ud1b5\uacc4\uc774\uba70, 'p'\ub85c \uc2dc\uc791\ud558\ub294 3 character\ub294 \ud2b9\ubcc4\ud788 b+tree\uc5d0 \ub300\ud55c position \uc5f0\uc0b0\uc758 \ud1b5\uacc4\uc774\ub2e4. gas\uc640 sas\ub294 item attribute \uc5f0\uc0b0\uc758 \ud1b5\uacc4\uc774\ub2e4. \uc5f0\uc0b0 \ud1b5\uacc4\uc5d0\uc11c \uac01 3 character\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. list \uc5f0\uc0b0 \ud1b5\uacc4 lcs - lop create \uc218\ud589 \ud69f\uc218 lis, lih - lop insert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 lds, ldh \u2013 lop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 lgs, lgh \u2013 lop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 set \uc5f0\uc0b0 \ud1b5\uacc4 scs - sop create \uc218\ud589 \ud69f\uc218 sis, sih - sop insert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 sds, sdh \u2013 sop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 sgs, sgh \u2013 sop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 ses, seh - sop exist \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 map \uc5f0\uc0b0 \ud1b5\uacc4 mcs - mop create \uc218\ud589 \ud69f\uc218 mis, mih - mop insert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 mus, muh \u2013 mop update \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 mds, mdh \u2013 mop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 mgs, mgh \u2013 mop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 b+tree \uc5f0\uc0b0 \ud1b5\uacc4 bcs \u2013 bop create \uc218\ud589 \ud69f\uc218 bis, bih \u2013 bop insert/upsert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bus, buh \u2013 bop update \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bps, bph \u2013 bop incr(plus \uc758\ubbf8) \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bms, bmh - bop decr(minus \uc758\ubbf8) \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bds, bdh \u2013 bop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bgs, bgh \u2013 bop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bns, bnh \u2013 bop count \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 b+tree position \uc5f0\uc0b0 \ud1b5\uacc4 pfs, pfh - bop position \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 pgs, pgh - bop gbp \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 item attribute \uc5f0\uc0b0 \ud1b5\uacc4 gas - getattr \uc218\ud589 \ud69f\uc218 sas - setattr \uc218\ud589 \ud69f\uc218 9-5. Scrub \uc218\ud589 \uc0c1\ud0dc Scrub \uc218\ud589 \uc0c1\ud0dc\ub97c \uc870\ud68c\ud55c \uacb0\uacfc \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. STAT scrubber:status stopped STAT scrubber:last_run 0 STAT scrubber:visited 0 STAT scrubber:cleaned 0 END status - \ud604\uc7ac scrub \uc791\uc5c5\uc774 running \uc911\uc778\uc9c0 stopped \uc0c1\ud0dc\uc778\uc9c0\ub97c \ub098\ud0c0\ub0b8\ub2e4. last_run - \uc774\uc804\uc5d0 \uc644\ub8cc\ub41c scrub \uc791\uc5c5\uc758 \uc18c\uc694 \uc2dc\uac04\uc744 \ucd08 \ub2e8\uc704\ub85c \ub098\ud0c0\ub0b8\ub2e4. visited - \ud604\uc7ac \uc218\ud589\uc911\uc778 \ub610\ub294 \uc774\uc804\uc5d0 \uc218\ud589\ub41c scrub\uc5d0\uc11c \uc811\uadfc\ud55c item\ub4e4\uc758 \uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. cleaned - \ud604\uc7ac \uc218\ud589\uc911\uc778 \ub610\ub294 \uc774\uc804\uc5d0 \uc218\ud589\ub41c scrub\uc5d0\uc11c \uc0ad\uc81c\ud55c item\ub4e4\uc758 \uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. 9-6. slab class \ubcc4 cache key dump slab class \ubcc4 LRU\uc5d0 \ub2ec\ub824\uc788\ub294 item\ub4e4\uc758 cache key\ub4e4\uc744 dump\ud558\uae30 \uc704\ud558\uc5ec, \uc544\ub798\uc758 stats cachedump \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. stats cachedump <slab_clsid> <limit> [ forward | backward [sticky] ]\\r\\n <slab_clsid> - dump \ub300\uc0c1 LRU\ub97c \uc9c0\uc815\ud558\uae30 \uc704\ud55c slab class id\uc774\ub2e4. <limit> - dump\ud558\uace0\uc790 \ud558\ub294 item \uac1c\uc218\ub85c\uc11c 0 ~ 200 \ubc94\uc704\uc5d0\uc11c \uc9c0\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. 0\uc774\uba74 default\ub85c 50\uac1c\ub85c \uc9c0\uc815\ub418\uba70, 200 \ucd08\uacfc\uc774\uba74 200\uac1c\ub9cc dump\ud55c\ub2e4. \ud574\ub2f9 LRU\uc758 head \ub610\ub294 tail\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec limit \uac1c item\ub4e4\uc758 cache key\ub4e4\uc744 dump\ud55c\ub2e4. forward or backward - LRU\uc758 head \ub610\ub294 tail \uc911\uc5d0 \uc5b4\ub514\uc5d0\uc11c dump\ub97c \uc2dc\uc791\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. forward\uc774\uba74 head\uc5d0\uc11c \uc2dc\uc791\ud558\uace0, backward\uc774\uba74 tail\uc5d0\uc11c \uc2dc\uc791\ud55c\ub2e4. \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74, default\ub294 forward\uc774\ub2e4. sticky - \ud558\ub098\uc758 slab class\uc5d0\uc11c non-sticky item\ub4e4\uc758 LRU \ub9ac\uc2a4\ud2b8\uc640 sticky item\ub4e4\uc758 LRU \ub9ac\uc2a4\ud2b8\uac00 \ubcc4\ub3c4\ub85c \uc720\uc9c0\ub418\uc5b4 \uc788\ub2e4. sticky\uac00 \uc9c0\uc815\ub418\uba74 sticky LRU\uc5d0\uc11c dump\ud558\uace0, \uc9c0\uc815\ub418\uc9c0 \uc54a\uc73c\uba74 non-sticky LRU\uc5d0\uc11c dump\ud55c\ub2e4. Cachedump \uacb0\uacfc\uc758 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ITEM a:bkey2 ITEM a:bkey1 ITEM b:bkey3 ITEM b:bkey1 ITEM b:bkey2 ITEM c:bkey1 ITEM c:bkey2 END 9-7. Config \uba85\ub839 Arcus cache server\ub294 \ud2b9\uc815 configuration\uc5d0 \ub300\ud574 \ub3d9\uc801\uc73c\ub85c \ubcc0\uacbd\ud558\uac70\ub098 \ud604\uc7ac\uc758 \uac12\uc744 \uc870\ud68c\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \ub3d9\uc801\uc73c\ub85c \ubcc0\uacbd\uac00\ub2a5\ud55c configuration\ub4e4\uc740 \ud604\uc7ac \uc544\ub798\ub9cc \uc9c0\uc6d0\ud55c\ub2e4. verbosity memlimit zkfailstop maxconns config verbosity Arcus cache server\uc758 verbose log level\uc744 \ub3d9\uc801\uc73c\ub85c(restart \uc5c6\uc774) \ubcc0\uacbd/\uc870\ud68c\ud55c\ub2e4. config verbosity [<verbose>]\\r\\n <verbose>\ub294 \uc0c8\ub85c \uc9c0\uc815\ud560 verbose log level \uac12\uc73c\ub85c, \ud5c8\uc6a9\uac00\ub2a5\ud55c \ubc94\uc704\ub294 0 ~ 2\uc774\ub2e4. \uc774 \uc778\uc790\uac00 \uc0dd\ub7b5\ub418\uba74 \ud604\uc7ac \uc124\uc815\ub418\uc5b4 \uc788\ub294 verbose \uac12\uc744 \uc870\ud68c\ud55c\ub2e4. config memlimit Arcus cache server \uad6c\ub3d9 \uc2dc\uc5d0 -m \uc635\uc158\uc73c\ub85c \uc124\uc815\ub41c memory limit\uc744 \ub3d9\uc801\uc73c\ub85c(restart \uc5c6\uc774) \ubcc0\uacbd/\uc870\ud68c\ud55c\ub2e4. config memlimit [<memsize>]\\r\\n <memsize>\ub294 \uc0c8\ub85c \uc9c0\uc815\ud560 memory limit\uc73c\ub85c MB \ub2e8\uc704\ub85c \uc124\uc815\ud558\uba70, Arcus cache server\uac00 \ud604\uc7ac \uc0ac\uc6a9 \uc911\uc778 \uba54\ubaa8\ub9ac \ud06c\uae30\uc778 tatal_malloced \ubcf4\ub2e4 \ud070 \ud06c\uae30\ub85c\ub9cc \uc124\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \uc778\uc790\uac00 \uc0dd\ub7b5\ub418\uba74 \ud604\uc7ac \uc124\uc815\ub418\uc5b4 \uc788\ub294 memory limit \uac12\uc744 \uc870\ud68c\ud55c\ub2e4. config zkfailstop Arcus cache server\uc758 automatic failstop \uae30\ub2a5\uc744 on \ub610\ub294 off \ud55c\ub2e4. config zkfailstop [on|off]\\r\\n Network failure \uc0c1\ud0dc\uc5d0\uc11c \uc815\uc0c1\uc801\uc778 \uc11c\ube44\uc2a4\ub97c \uc9c4\ud589\ud558\uc9c0 \ubabb\ud558\ub294 cache server\uac00 cache cloud\uc5d0 \uadf8\ub300\ub85c \uc874\uc7ac\ud560 \uacbd\uc6b0, \ud574\ub2f9 cache server\uac00 \ub2f4\ub2f9\ud558\uace0 \uc788\ub294 data \ubc94\uc704\uc5d0 \ub300\ud55c \uc694\uccad\uc774 \ubaa8\ub450 \uc2e4\ud328\ud558\uace0 DB\uc5d0 \ubd80\ub2f4\uc744 \uc8fc\uac8c \ub41c\ub2e4. \ub610\ud55c \uc774\ud6c4\uc5d0 ZooKeeper\uc5d0 \uc7ac\uc5f0\uacb0 \ub418\ub354\ub77c\ub3c4 old data\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \uc788\uc73c\uba70 \uc774\ub85c \uc778\ud574 \uc751\uc6a9\uc5d0 \uc624\ub3d9\uc791\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. Arcus cache server\ub294 \uc774\ub97c \ud574\uacb0\ud558\uae30\uc704\ud574 ZooKeeper session timeout\uc774 \ubc1c\uc0dd\ud560 \uacbd\uc6b0 failed cache server\ub97c cache cloud\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \uc81c\uac70\ud558\ub294 automatic failstop \uae30\ub2a5\uc744 \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ud55c\ub2e4. config maxconns Arcus cache server \uad6c\ub3d9 \uc2dc\uc5d0 -c \uc635\uc158\uc73c\ub85c \uc124\uc815\ub41c \ucd5c\ub300 \uc5f0\uacb0 \uc218\ub97c \ub3d9\uc801\uc73c\ub85c(restart \uc5c6\uc774) \ubcc0\uacbd/\uc870\ud68c\ud55c\ub2e4. config maxconns [<maxconn>]\\r\\n <maxconn>\ub294 \uc0c8\ub85c \uc9c0\uc815\ud560 \ucd5c\ub300 \uc5f0\uacb0 \uc218\ub85c\uc11c, \ud604\uc7ac\uc758 \uc5f0\uacb0 \uc218\ubcf4\ub2e4 10% \uc774\uc0c1\uc758 \ud070 \uac12\uc73c\ub85c\ub9cc \uc124\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \uc778\uc790\uac00 \uc0dd\ub7b5\ub418\uba74 \ud604\uc7ac \uc124\uc815\ub418\uc5b4 \uc788\ub294 \ucd5c\ub300 \uc5f0\uacb0 \uc218 \uac12\uc744 \uc870\ud68c\ud55c\ub2e4. 9-8. Command Logging \uba85\ub839 Arcus cache server\uc5d0 \uc785\ub825\ub418\ub294 command\ub97c logging \ud55c\ub2e4. start \uba85\ub839\uc744 \uc2dc\uc791\uc73c\ub85c logging\uc774 \uc885\ub8cc\ub420 \ub54c \uae4c\uc9c0\uc758 \ubaa8\ub4e0 command\ub97c \uae30\ub85d\ud55c\ub2e4. \ub2e8, \uc131\ub2a5\uc720\uc9c0\ub97c \uc704\ud574 skip\ub418\ub294 command\uac00 \uc788\uc744 \uc218 \uc788\uc73c\uba70 stats \uba85\ub839\uc744 \ud1b5\ud574 \uadf8 \uc218\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. 10MB log \ud30c\uc77c 10\uac1c\ub97c \uc0ac\uc6a9\ud558\uba70, \ucd08\uacfc\ub420 \uacbd\uc6b0 \uc790\ub3d9 \uc885\ub8cc\ud55c\ub2e4. cmdlog [start [<log_file_path>] | stop | stats]\\r\\n <log_file_path>\ub294 logging \uc815\ubcf4\ub97c \uc800\uc7a5\ud560 file\uc758 path\uc774\ub2e4. - path\ub294 \uc0dd\ub7b5 \uac00\ub2a5\ud558\uba70, \uc0dd\ub7b5\ud560 \uacbd\uc6b0 default\ub85c \uc9c0\uc815\ub41c\ub2e4. - default\ub85c \uc790\ub3d9 \uc9c0\uc815\ud560 \uacbd\uc6b0 log file\uc740 memcached\uad6c\ub3d9\uc704\uce58/command_log \ub514\ub809\ud130\ub9ac \uc548\uc5d0 \uc0dd\uc131\ub41c\ub2e4. - command_log \ub514\ub809\ud130\ub9ac\ub294 \uc790\ub3d9\uc0dd\uc131\ub418\uc9c0 \uc54a\uc73c\uba70, memcached process\uac00 \uad6c\ub3d9\ub41c \uc704\uce58\uc5d0 \uc0dd\uc131\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. - \uc0dd\uc131\ub418\ub294 log file\uc758 \ud30c\uc77c\uba85\uc740 command_port_bgndate_bgntime_{n}.log \uc774\ub2e4. - path\ub294 \uc9c1\uc811 \uc9c0\uc815\ud560 \uacbd\uc6b0 \uc808\ub300 path, \uc0c1\ub300 path\uc9c0\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. \ucd5c\uc885 \ud30c\uc77c\uc774 \uc0dd\uc131\ub420 \ub514\ub809\ud130\ub9ac\uae4c\uc9c0 \uc9c0\uc815\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. start \uba85\ub839\uc758 \uacb0\uacfc\ub85c log file\uc5d0 \ucd9c\ub825\ub418\ub294 \ub0b4\uc6a9\uc740 \uc544\ub798\uc640 \uac19\ub2e4. --------------------------------------- format : <time> <client_ip> <command>\\n --------------------------------------- 19:14:45.530198 127.0.0.1 bop insert arcustest-Collection_Btree:vuRYyfqyeP0Egg8daGF72 0x626B65795F6279746541727279323239 0x45464C4147 80 create 0 600 4000 19:14:45.530387 127.0.0.1 lop insert arcustest-Collection_List:pGhEn6DFv5MixbYObBgp1 -1 64 create 0 600 4000 19:14:45.530221 127.0.0.1 lop insert arcustest-Collection_List:hhSAED2pFBH9xGqEgAeW1 -1 80 create 0 600 4000 19:14:45.530334 127.0.0.1 bop insert arcustest-Collection_Btree:RGSXLACxWpKwLPdC86qn0 0x626B65795F6279746541727279303331 0x45464C4147 80 create 0 600 4000 19:14:45.530385 127.0.0.1 lop insert arcustest-Collection_List:PwFTiFSEWlenireHcxNb2 -1 80 create 0 600 4000 19:14:45.530407 127.0.0.1 bop insert arcustest-Collection_Btree:P1lfJrJyVFyP0ogrw27h1 0x626B65795F6279746541727279313238 0x45464C4147 101 create 0 600 4000 19:14:45.530537 127.0.0.1 sop exist arcustest-Collection_Set:gTx8KDPBiufiGN9ArtgG3 81 pipe 19:14:45.530757 127.0.0.1 sop exist arcustest-Collection_Set:gTx8KDPBiufiGN9ArtgG3 81 stop \uba85\ub839\uc740 logging\uc774 \uc644\ub8cc\ub418\uae30 \uc804 \uc911\uc9c0\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. stats \uba85\ub839\uc740 \uac00\uc7a5 \ucd5c\uadfc \uc218\ud589\ub41c(\uc218\ud589 \uc911\uc778) command logging\uc758 \uc0c1\ud0dc\ub97c \uc870\ud68c\ud558\uace0 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Command logging stats : running //Not started | stopped by causes(request or overflow or error) | running The last running time : 20160126_192729 ~ 20160126_192742 //bgndate_bgntime ~ enddate_endtime The number of entered commands : 146783 //entered_commands The number of skipped commands : 0 //skipped_commands The number of log files : 1 //file_count The log file name: /Users/temp/command_11211_20160126_192729_{n}.log //path/file_name 9-9. Long query detect \uba85\ub839 Arcus cache server\uc5d0\uc11c collection item\uc5d0 \ub300\ud55c \uc694\uccad \uc911\uc5d0\ub294 \uadf8 \ucc98\ub9ac \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9ac\ub294 \uc694\uccad\uc774 \uc874\uc7ac\ud55c\ub2e4. \uc774\ub97c detect\ud558\uae30 \uc704\ud55c \uae30\ub2a5\uc73c\ub85c lqdetect \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. start \uba85\ub839\uc744 \uc2dc\uc791\uc73c\ub85c detection\uc774 \uc885\ub8cc\ub420 \ub54c \uae4c\uc9c0 long query \uac00\ub2a5\uc131\uc774 \uc788\ub294 command\uc5d0 \ub300\ud558\uc5ec, \uadf8 command \ucc98\ub9ac\uc5d0\uc11c \uc811\uadfc\ud55c elements \uc218\uac00 \ud2b9\uc815 \uae30\uc900 \uc774\uc0c1\uc778 command\ub97c \ucd94\ucd9c, command \ubcc4\ub85c detect\ub41c \uba85\ub839\uc5b4 20\uac1c\ub97c \uc0d8\ud50c\ub85c \uc800\uc7a5\ud55c\ub2e4. long query \ub300\uc0c1\uc774 \ub418\ub294 \ubaa8\ub4e0 command\uc5d0 \ub300\ud574 20\uac1c\uc758 \uc0d8\ud50c \uc800\uc7a5\uc774 \uc644\ub8cc\ub418\uba74 \uc790\ub3d9 \uc885\ub8cc\ud55c\ub2e4. \uc800\uc7a5\ub41c \uc0d8\ud50c\uc740 show \uba85\ub839\uc744 \ud1b5\ud574 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. long query detection \ub300\uc0c1\uc774 \ub418\ub294 command\ub294 \uc544\ub798\uc640 \uac19\ub2e4. 1. sop get 2. lop insert 3. lop delete 4. lop get 5. bop delete 6. bop get 7. bop count 8. bop gbp lqdetect command\ub294 \uc544\ub798\uc640 \uac19\ub2e4. lqdetect [start [<detect_standard>] | stop | show | stats]\\r\\n <detect_standard>\ub294 long query\ub85c \ubd84\ub958\ud558\ub294 \uae30\uc900\uc73c\ub85c \ud574\ub2f9 \uc694\uccad\uc5d0\uc11c \uc811\uadfc\ud558\ub294 elements \uc218\ub85c \ub098\ud0c0\ub0b4\uba70, \uc5b4\ub5a4 \uc694\uccad\uc5d0\uc11c detection \uae30\uc900 \uc774\uc0c1\uc73c\ub85c \ub9ce\uc740 elements\ub97c \uc811\uadfc\ud558\ub294 \uc694\uccad\uc744 long query\ub85c \uad6c\ubd84\ud55c\ub2e4. \uc0dd\ub7b5 \uc2dc default standard\ub294 4000\uc774\ub2e4. start \uba85\ub839\uc73c\ub85c detection\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4. stop \uba85\ub839\uc740 detection\uc774 \uc644\ub8cc\ub418\uae30 \uc804 \uc911\uc9c0\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. show \uba85\ub839\uc740 \uc800\uc7a5\ub41c \uba85\ub839\uc5b4 \uc0d8\ud50c\uc744 \ucd9c\ub825\ud558\uace0 \uadf8 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ----------------------------------------------------------- format : <time> <client_ip> <count> <command> <arguments>\\n ----------------------------------------------------------- sop get command entered count : 0 lop insert command entered count : 0 lop delete command entered count : 0 lop get command entered count : 92 17:56:33.276847 127.0.0.1 <46> lop get arcustest-Collection_List:YN8UCtNaoD4hHnMMwMJq1 0..44 17:56:33.278116 127.0.0.1 <43> lop get arcustest-Collection_List:orjTteJo7F0bWdXDDGcP0 0..41 17:56:33.279856 127.0.0.1 <48> lop get arcustest-Collection_List:r7ERYr3IdiD3RO8hLNvI3 0..46 17:56:33.304063 127.0.0.1 <45> lop get arcustest-Collection_List:0OWKNF3Z17NaTSaDTZG61 0..43 bop delete command entered count : 0 bop get command entered count : 81 17:56:33.142590 127.0.0.1 <47> bop get arcustest-Collection_Btree:0X6mqSiwBx6fEZVLuwKF0 0x626B65795F62797465417272793030..0x626B65795F6279746541727279303530 efilter 0 47 17:56:33.142762 127.0.0.1 <49> bop get arcustest-Collection_Btree:PiX8strLCv7iWywd1ZuE0 0x626B65795F62797465417272793030..0x626B65795F6279746541727279303530 efilter 0 49 17:56:33.143326 127.0.0.1 <46> bop get arcustest-Collection_Btree:PiX8strLCv7iWywd1ZuE1 0x626B65795F62797465417272793130..0x626B65795F6279746541727279313530 efilter 0 48 bop count command entered count : 0 bop gbp command entered count : 0 stats \uba85\ub839\uc740 \uac00\uc7a5 \ucd5c\uadfc \uc218\ud589\ub41c(\uc218\ud589 \uc911\uc778) long query detection\uc758 \uc0c1\ud0dc\ub97c \uc870\ud68c\ud558\uace0 \uadf8 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Long query detection stats : running //stopped by causes(request or overflow) | running The last running time : 20160126_175629 ~ 0_0 //bgndata_bgntime ~ enddate_endtime The number of total long query commands : 1152 //detected_commands The detection standard : 43 //standard 9-10. Key dump \uba85\ub839 Arcus cache server\uc758 key\ub97c dump \ud55c\ub2e4. dump ascii command\ub294 \uc544\ub798\uc640 \uac19\ub2e4. dump start key [<prefix>] filepath\\r\\n dump stop\\r\\n stats dump\\r\\n dump start\uba85\ub839. - \uccab\ubc88\uc9f8 \uc778\uc790\ub294 \ubb34\uc870\uac74 \"key\"\uc774\ub2e4. - \ud604\uc7ac\ub294 \uc77c\ub2e8 key string\ub9cc\uc744 dump\ud55c\ub2e4. - \ud5a5\ud6c4\uc5d0 key or item\uc744 \uc120\ud0dd\ud560 \uc218 \uc788\uac8c \ud558\uc5ec, item\uc778 \uacbd\uc6b0 item \uc804\uccb4 \ub0b4\uc6a9\uc744 dump\ud560 \uc218 \uc788\ub2e4. - \ub450\ubc88\uc9f8 \uc778\uc790\ub294 <prefix>\ub294 cache key\uc758 prefix\ub97c \uc758\ubbf8\ud558\uba70, \uc0dd\ub7b5 \uac00\ub2a5\ud558\ub2e4. - \uc0dd\ub7b5\ud558\uba74, \ubaa8\ub4e0 key string\uc744 dump\ud55c\ub2e4. - \"<null>\"\uc744 \uc8fc\uba74, prefix\uac00 \uc5c6\ub294 key string\uc744 dump\ud55c\ub2e4. - \uc5b4\ub5a4 prefix\ub97c \uc8fc\uba74, \uadf8 prefix\uc758 \ubaa8\ub4e0 key string\uc744 dump\ud55c\ub2e4. - \uc138\ubc88\uc9f8 \uc778\uc790\ub294 <file path>\uc774\ub2e4. - \ubc18\ub4dc\uc2dc \uba85\uc2dc\ud574\uc57c \ud55c\ub2e4. - \uc808\ub300 path\ub85c \uc904 \uc218\ub3c4 \uc788\uc73c\uba70, \uc0c1\ub300 path\ub3c4 \uac00\ub2a5\ud558\ub2e4. - \uc0c1\ub300 path\uc774\uba74 memcached process\uac00 \uad6c\ub3d9\ub41c \uc704\uce58\uc5d0\uc11c\uc758 \uc0c1\ub300 path\uc774\ub2e4. dump stop\uc740 \ud639\uc2dc\ub098 dump \uc791\uc5c5\uc774 \ub108\ubb34 \uc624\ub824 \uac78\ub824 \uc911\uc9c0\ud558\uace0 \uc2f6\uc744 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. stats dump\ub294 \ud604\uc7ac \uc9c4\ud589\uc911\uc778 dump \ub610\ub294 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \uc218\ud589\ub41c dump\uc758 stats\uc744 \ubcf4\uc5ec \uc900\ub2e4. dump \ud30c\uc77c\uc740 \ubb34\uc870\uac74 \ud558\ub098\uc758 file\ub85c \ub9cc\ub4e4\uc5b4 \uc9c4\ub2e4. file \ub0b4\uc6a9\uc758 format\uc740 \uc544\ub798\uc640 \uac19\ub2e4. <type> <key_string> <exptime>\\n ... <type> <key_string> <exptime>\\n DUMP SUMMARY: { prefix=<prefix>, count=<count>, total=<total> elapsed=<elapsed> }\\n \uc704\uc758 \uacb0\uacfc\uc5d0\uc11c \uac01 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - key dump \uacb0\uacfc \ubd80\ubd84 - \uc740 item type\uc73c\ub85c 1 character\ub85c \ud45c\uc2dc\ud55c\ub2e4. - \"K\" : kv - \"L\" : list - \"S\" : set - \"M\" : map - \"B\" : b+tree - \uc740 cache server\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 key string \uc774\ub2e4. - \uc740 key\uc758 exptime\uc73c\ub85c \uc544\ub798 \uac12\ub4e4 \uc911 \ud558\ub098\uc774\ub2e4. - 0 (exptime = 0\uc778 \uacbd\uc6b0) - -1 : sticky item (exptime = -1\uc778 \uacbd\uc6b0) - timestamp (exptime > 0\uc778 \uacbd\uc6b0)\uc73c\ub85c \"time since the Epoch (00:00:00 UTC, January 1, 1970), measured in seconds\" \uc774\ub2e4. - DUMP SUMMARY \ubd80\ubd84 - <prefix>\ub294 prefix name\uc774\ub2e4. - \ubaa8\ub4e0 key dump\uc774\uba74, \"<all>\"\uc774 \uba85\uc2dc\ub41c\ub2e4. - prefix \uc5c6\ub294 key dump\uc774\uba74, \"<null>\"\uc774 \uba85\uc2dc\ub41c\ub2e4. - \ud2b9\uc815 prefix\uc758 key dump\uc774\uba74, \uadf8 prefix name\uc774 \uba85\uc2dc\ub41c\ub2e4. - <count>\ub294 dump\ud55c key \uac1c\uc218\uc774\ub2e4. - <total>\uc740 cache\uc5d0 \uc788\ub294 \uc804\uccb4 key \uac1c\uc218\uc774\ub2e4. - <elapsed>\ub294 dump\ud558\ub294 \ub370 \uc18c\uc694\ub41c \uc2dc\uac04(\ub2e8\uc704: \ucd08) \uc774\ub2e4. 9-11. Zkensemble \uba85\ub839 Arcus cache server\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 ZooKeeper ensemble \uc124\uc815\uc5d0 \ub300\ud55c \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. zkensemble set <ensemble_list>\\r\\n zkensemble get\\r\\n zkensemble rejoin\\r\\n set \uba85\ub839\uc740 ZK ensemble \uc8fc\uc18c\ub97c \ubcc0\uacbd\ud55c\ub2e4. ensemble_list\ub294 <ip:port>,...,<ip:port> \uc640 \uac19\uc740 ZK server \ub4e4\uc758 list \ud615\ud0dc \ud639\uc740 ZK ensemble\uc758 \ub3c4\uba54\uc778 \uc8fc\uc18c \ud615\ud0dc\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. get \uba85\ub839\uc740 ZK ensemble \uc8fc\uc18c\ub97c \uc870\ud68c\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\ub294 <ip:port>,...,<ip:port> \ud615\uc2dd\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. rejoin \uba85\ub839\uc740 ZK ensemble \uacfc\uc758 \uc5f0\uacb0\uc744 \ub04a\uace0 cache cloud\uc5d0\uc11c \ube60\uc838 \ub300\uae30\ud558\ub294 cache server\ub97c \ub2e4\uc2dc ZK ensemble\uc5d0 \uc5f0\uacb0\ud558\ub3c4\ub85d \ud558\ub294 \uba85\ub839\uc774\ub2e4. Cache cloud\uc5d0\uc11c cache server\uac00 \ube60\uc838\ub098\uac00\ub294 \uacbd\uc6b0\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - Failstop off \uc0c1\ud0dc\uc5d0\uc11c ZooKeeper session timeout\uc774 \uc77c\uc5b4\ub09c \uacbd\uc6b0 - \uc6b4\uc601\uc790\uc758 \uc2e4\uc218\ub85c cache_list\uc5d0 \ub4f1\ub85d\ub41c cache server\uc758 ephemeral znode\uac00 \uc0ad\uc81c\ub41c \uacbd\uc6b0 9-12. Help \uba85\ub839 Arcus cache server\uc758 acsii command syntax\ub97c \uc870\ud68c\ud55c\ub2e4. help [<subcommand>]\\r\\n <subcommand>\ub85c\ub294 kv, lop, sop, mop, bop, stats, flush, config, etc\uac00 \uc788\uc73c\uba70, <subcommand>\uac00 \uc0dd\ub7b5\ub418\uba74, help \uba85\ub839\uc5d0\uc11c \uc0ac\uc6a9\uac00\ub2a5\ud55c subcommand \ubaa9\ub85d\uc774 \ucd9c\ub825\ub41c\ub2e4.","title":"9. Administration Command"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-1-flush","text":"Arcus cache server\ub294 items\uc744 invalidate \uc2dc\ud0a4\uae30 \uc704\ud55c \ub450 \uac00\uc9c0 flush \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. flush_all : \ubaa8\ub4e0 items\uc744 flush flush_prefix: \ud2b9\uc815 prefix\uc758 items\ub4e4\ub9cc flush Flush \uc791\uc5c5\uc740 items\uc744 invalidate\uc2dc\ud0a4\ub354\ub77c\ub3c4 \uadf8 items\uc774 \ucc28\uc9c0\ud55c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc989\uac01 \ubc18\ud658\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0, Arcus cache server\uc758 global \uc815\ubcf4\ub85c flush \uc218\ud589 \uc2dc\uc810 \uc815\ubcf4\ub97c \uae30\ub85d\ud574 \ub460\uc73c\ub85c\uc368, \uadf8 \uc2dc\uc810 \uc774\uc804\uc5d0 \uc874\uc7ac\ud588\ub358 items\uc740 invalidated items\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uac8c \ud55c\ub2e4. \ub530\ub77c\uc11c, item \uc811\uadfc\ud560 \ub54c\ub9c8\ub2e4 invalidated item\uc778\uc9c0\ub97c \ud655\uc778\ud558\uc5ec\uc57c \ud558\ub294 \ubd80\ub2f4\uc774 \uc788\uc9c0\ub9cc, flush \uc791\uc5c5 \uc790\uccb4\ub294 O(1) \uc2dc\uac04\uc5d0 \uadf8 \uc218\ud589\uc774 \uc644\ub8cc\ub41c\ub2e4. flush_all \uba85\ub839\uc740 flush \uc218\ud589 \uc2dc\uc810 \uc815\ubcf4\ub9cc \uae30\ub85d\ud574 \ub450\uace0, \uc804\uccb4 prefix\ub4e4\uc758 \ud1b5\uacc4 \uc815\ubcf4\ub294 \uadf8\ub300\ub85c \ub0a8\uaca8 \ub454\ub2e4. \ub530\ub77c\uc11c, flush_all\uc744 \uc218\ud589\ud558\ub354\ub77c\ub3c4 prefix \uad00\ub828\ud55c \ud1b5\uacc4 \uc815\ubcf4\ub97c \uc870\ud68c\ud560 \uc218 \uc788\ub2e4. \ud574\ub2f9 prefix\uc5d0 \uc18d\ud55c items\uc774 \ubaa8\ub450 \uc81c\uac70\ub418\ub294 \uc2dc\uc810\uc5d0, \uadf8 prefix\uc758 \ud1b5\uacc4 \uc815\ubcf4\ub294 \ud568\uaed8 \uc81c\uac70\ub41c\ub2e4. \ubc18\uba74, flsuh_prefix \uba85\ub839\uc740 \ud574\ub2f9 prefix\uc5d0 \ub300\ud55c flush \uc218\ud589 \uc2dc\uc810 \uc815\ubcf4\ub97c \uae30\ub85d\ud574 \ub450\uba74\uc11c, \uadf8 prefix\uc758 \ud1b5\uacc4 \uc815\ubcf4\ub97c \ubaa8\ub450 reset\uc2dc\ucf1c \uc81c\uac70\ud55c\ub2e4\ub294 \uac83\uc774 \ucc28\uc774\uac00 \uc788\ub2e4. \ub530\ub77c\uc11c, flush_prefix \uc218\ud589 \uc774\ud6c4\uc5d0\ub294 \ud574\ub2f9 prefix\uc5d0 \ub300\ud55c \ud1b5\uacc4 \uc815\ubcf4\ub97c \uc870\ud68c\ud560 \uc218 \uc5c6\uac8c \ub41c\ub2e4. \ub450 flush \uba85\ub839\uc758 syntax\ub294 \uc544\ub798\uc640 \uac19\ub2e4. flush_all [<delay>] [noreply]\\r\\n flush_prefix <prefix> [<delay>] [noreply]\\r\\n <prefix> - prefix string. \"<null>\"\uc744 \uc0ac\uc6a9\ud558\uba74, prefix string\uc774 \uc5c6\ub294 item\ub4e4\uc744 invalidate\uc2dc\ud0a8\ub2e4. <delay> - \uc9c0\uc5f0\ub41c invalidation \uc694\uccad \uc2dc\uc5d0 \uba85\uc2dc\ud558\uba70, \uadf8 \uc9c0\uc5f0 \uae30\uac04\uc744 \ucd08(second) \ub2e8\uc704\ub85c \uc9c0\uc815\ud55c\ub2e4. noreply - \uba85\uc2dc\ud558\uba74, response string\uc774 \uc0dd\ub7b5\ub41c\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \"OK\" - \uc131\uacf5 \u201cNOT_FOUND\u201d - prefix miss (flush_prefix \uba85\ub839\uc778 \uacbd\uc6b0\ub9cc \ud574\ub2f9) CLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc","title":"9-1. Flush \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-2-scrub","text":"Arcus cache server\uc5d0\ub294 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uba54\ubaa8\ub9ac\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\ub294 items\uc774 \uc874\uc7ac\ud560 \uc218 \uc788\ub2e4. \uc774 items\uc740 \uc544\ub798 \ub450 \uc720\ud615\uc73c\ub85c \uad6c\ubd84\ub41c\ub2e4. Arcus cache server\uc5d0\uc11c \uc5b4\ub5a4 items\uc774 expired\ub418\ub354\ub77c\ub3c4 \uadf8 items\uc740 \uc989\uac01 \uc81c\uac70\ub418\uc9c0 \uc54a\uc73c\uba70, flush \uba85\ub839\uc73c\ub85c \uc5b4\ub5a4 items\uc744 invalidate\uc2dc\ud0a4\ub354\ub77c\ub3c4 \uadf8 items\uc740 \uc989\uac01 \uc81c\uac70\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub4e4 items\uc740 Arcus cache server \ub0b4\ubd80\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ucc28\uc9c0\ud558\uba74\uc11c \uacc4\uc18d \uc874\uc7ac\ud558\uace0 \uc788\ub2e4. \uc5b4\ub5a4 \uc774\uc720\uc774\ub4e0 \uc774 items\uc5d0 \ub300\ud55c \uc811\uadfc\uc774 \ubc1c\uc0dd\ud560 \ub54c Arcus cache server\ub294 expired/flushed \uc0c1\ud0dc\uc784\uc744 \uc54c\uac8c \ub418\uba70, \uadf8 items\uc744 \uc81c\uac70\ud568\uc73c\ub85c\uc368 \uadf8 items\uc774 \ucc28\uc9c0\ud55c \uba54\ubaa8\ub9ac\ub97c \ubc18\ud658\ud55c\ub2e4. Cache cloud\ub97c \ud615\uc131\ud558\uace0 consistent hashing\uc758 key-to-node mapping\uc744 \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0\uc11c, \uadf8 cache cloud\uc5d0 \ud2b9\uc815 node\uc758 \ucd94\uac00\ub098 \uc0ad\uc81c\uc5d0 \uc758\ud574 key-to-node remapping\uc774 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4. \uc774\ub7ec\ud55c key-to-node remapping\uc774 \ubc1c\uc0dd\ud558\uba74, \uc5b4\ub5a4 node\uc5d0 \uc788\ub358 \uae30\uc874 items\uc740 \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \uc774\ub7ec\ud55c items\uc744 stale items\uc774\ub77c \ud55c\ub2e4. \uc774\ub7ec\ud55c stale items\uc740 \uc790\uc5f0\uc2a4\ub7fd\uac8c expired \ub418\uae30\ub3c4 \ud558\uc9c0\ub9cc, old data\ub97c \uac00\uc9c0\uace0 \ub0a8\uc544 \uc788\ub2e4\uac00 \uadf8 \uc774\ud6c4\uc758 key-to-node remapping\uc5d0 \uc758\ud574 \uc720\ud6a8\ud55c items\uc73c\ub85c \ub2e4\uc2dc \uc804\ud658\ub420 \uc5ec\uc9c0\uac00 \uc788\ub2e4. \ub530\ub77c\uc11c, \uc774\ub7ec\ud55c stale items\uc740 cache cloud\uc758 node list\uac00 \ubcc0\uacbd\ub420 \ub54c\ub9c8\ub2e4 \uc81c\uac70\ud558\uc5ec\uc57c \ud55c\ub2e4. Scrub \uae30\ub2a5\uc774\ub780 (1) expired item, flushed item\uacfc \uac19\uc740 invalidated item\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc81c\uac70\ud558\ub294 \uae30\ub2a5\uacfc (2) cache cloud\uc5d0\uc11c\uc758 key-to-node remapping\uc73c\ub85c \ubc1c\uc0dd\ud55c stale items\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc81c\uac70\ud558\ub294 \uae30\ub2a5\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774\ub7ec\ud55c scrub \uae30\ub2a5\uc740 daemon thread\uc5d0 \uc758\ud574 background \uc791\uc5c5\uc73c\ub85c \uc218\ud589\ub418\uba70, \ud55c \uc21c\uac04\uc5d0 \ud558\ub098\uc758 scrub \uc791\uc5c5\ub9cc \uc218\ud589\ub420 \uc218 \uc788\ub2e4. \uc989, scrub \uc791\uc5c5\uc774 \uc9c4\ud589 \uc911\uc778 \uc0c1\ud0dc\uc5d0\uc11c \uc0c8\ub85c\uc6b4 scrub \uc791\uc5c5\uc744 \uc694\uccad\ud560 \uc218 \uc5c6\ub2e4. scrub [stale]\\r\\n stale - \uba85\uc2dc\ud558\uc9c0 \uc54a\uc73c\uba74 invalidated item\uc744 \uc81c\uac70\ud558\uace0, \uba85\uc2dc\ud558\uba74 stale item\uc744 \uc81c\uac70\ud55c\ub2e4. Response string\uacfc \uadf8 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \u201cOK\u201d - \uc131\uacf5 \u201cBUSY\u201d - \ud604\uc7ac scrub \uc791\uc5c5\uc774 \uc218\ud589 \uc911\uc774\uc5b4\uc11c \uc0c8\ub85c\uc6b4 scrub \uc791\uc5c5\uc744 \uc694\uccad\ud560 \uc218 \uc5c6\uc74c \u201cNOT_SUPPORTED\u201d - \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 scrub \uba85\ub839 \u201cCLIENT_ERROR bad command line format\u201d - protocol syntax \ud2c0\ub9bc \ucc38\uace0 \uc0ac\ud56d\uc73c\ub85c, scrub \uba85\ub839\uc740 ascii \uba85\ub839\uc758 extension \uae30\ub2a5\uc73c\ub85c \uad6c\ud604\ub418\uc5c8\uae30\uc5d0, Arcus cache server \uad6c\ub3d9 \uc2dc\uc5d0 ascii_scrub.so \ud30c\uc77c\uc744 dynamic linking \ud558\ub294 \uad6c\ub3d9 \uc635\uc158\uc744 \uc8fc\uc5b4\uc57c scrub \uba85\ub839\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.","title":"9-2. Scrub \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-3-stats","text":"Arcus cache server\uc758 \uac01\uc885 \ud1b5\uacc4 \uc815\ubcf4\ub97c \uc870\ud68c\ud558\uac70\ub098 \uadf8 \ud1b5\uacc4 \uc815\ubcf4\ub97c reset\ud55c\ub2e4. stats [<args>]\\r\\n <args>\ub97c \uc0dd\ub7b5\ud558\uac70\ub098, \uc5b4\ub5a4 \uac12\uc744 \uc8fc\ub290\ub0d0\uc5d0 \ub530\ub77c stats \uba85\ub839\uc758 \ub3d9\uc791\uc740 \uc544\ub798\uc640 \uac19\uc774 \ub2ec\ub77c\uc9c4\ub2e4. <args> | stats \uba85\ub839\uc758 \ub3d9\uc791 ------------------ | ------------------------------------------- | General purpose \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c settings | Configuration \uc815\ubcf4 \uc870\ud68c items | Item \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c slabs | Slab \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c prefixes | Prefix \ubcc4 item \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c detail on|off|dump | Prefix \ubcc4 \uc218\ud589 \uba85\ub839 \ud1b5\uacc4 \uc815\ubcf4 \uc870\ud68c \ubc0f \uc81c\uc5b4 scrub | scrub \uc218\ud589 \uc0c1\ud0dc \uc870\ud68c cachedump | slab class \ubcc4 cache key dump reset | \ubaa8\ub4e0 \ud1b5\uacc4 \uc815\ubcf4\ub97c reset stats \uba85\ub839\uc740 \uc9c1\uc811 \ud55c\ubc88\uc529 \uc218\ud589\ud574 \ubcf4\uae30\ub97c \uad8c\ud558\uba70, \uc544\ub798\uc5d0\uc11c\ub294 \ucd94\uac00 \uc124\uba85\uc774 \ud544\uc694\ud55c \ubd80\ubd84\ub4e4\ub9cc \uae30\uc220\ud55c\ub2e4.","title":"9-3. Stats \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-4-prefix","text":"\ubaa8\ub4e0 prefix\ub4e4\uc758 item \ud1b5\uacc4 \uc815\ubcf4\ub294 \"stats prefixes\" \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud558\uace0, \ubaa8\ub4e0 prefix\ub4e4\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\ub294 \"stats detail dump\" \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud55c\ub2e4. \uadf8\ub9ac\uace0, Prefix\ub4e4\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\uc5d0 \ud55c\ud574, \ud1b5\uacc4 \uc815\ubcf4\uc758 \uc218\uc9d1 \uc5ec\ubd80\ub97c on \ub610\ub294 off \ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 prefix\ub4e4\uc758 item \ud1b5\uacc4 \uc815\ubcf4\uc758 \uacb0\uacfc \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. <null> prefix \ud1b5\uacc4\ub294 prefix\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294 items \ud1b5\uacc4\uc774\ub2e4. PREFIX <null> itm 2 kitm 1 litm 1 sitm 0 mitm 0 bitm 0 tsz 144 ktsz 64 ltsz 80 stsz 0 mtsz 0 btsz 0 time 20121105152422 PREFIX a itm 5 kitm 5 litm 0 sitm 0 mitm 0 bitm 0 tsz 376 ktsz 376 ltsz 0 stsz 0 mtsz 0 btsz 0 time 20121105152422 PREFIX b itm 2 kitm 2 litm 0 sitm 0 mitm 0 bitm 0 tsz 144 ktsz 144 ltsz 0 stsz 0 mtsz 0 btsz 0 time 20121105152422 END \uac01 prefix\uc758 item \ud1b5\uacc4 \uc815\ubcf4\uc5d0 itm\uc740 \uc804\uccb4 item \uc218\uc774\uace0, kitm, litm, sitm, mitm, bitm\uc740 \uac01\uac01 kv, list, set, map, b+tree item \uc218\uc774\uba70, tsz(total size)\ub294 \uc804\uccb4 items\uc774 \ucc28\uc9c0\ud558\ub294 \uacf5\uac04\uc758 \ud06c\uae30\uc774\uace0, ktsz, ltsz, stsz, mtsz, btsz\ub294 \uac01\uac01 kv, list, set, map, b+tree items\uc774 \ucc28\uc9c0\ud558\ub294 \uacf5\uac04\uc758 \ud06c\uae30\uc774\ub2e4. time\uc740 prefix \uc0dd\uc131 \uc2dc\uac04\uc774\ub2e4. \ubaa8\ub4e0 prefix\ub4e4\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\uc758 \uacb0\uacfc \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. \uac01 PREFIX \ub77c\uc778\uc740 \uc2e4\uc81c\ub85c \ud558\ub098\uc758 line\uc73c\ub85c \ud45c\uc2dc\ub418\uc9c0\ub9cc, \ubcf8 \ubb38\uc11c\ub294 \uc774\ud574\ub97c \ub3d5\uae30 \uc704\ud574 \uc5ec\ub7ec line\uc73c\ub85c \ud45c\uc2dc\ud55c\ub2e4. PREFIX <null> get 2 hit 2 set 2 del 0 lcs 0 lis 0 lih 0 lds 0 ldh 0 lgs 0 lgh 0 scs 0 sis 0 sih 0 sds 0 sdh 0 sgs 0 sgh 0 ses 0 seh 0 mcs 0 mis 0 mih 0 mus 0 muh 0 mds 0 mdh 0 mgs 0 mgh 0 bcs 0 bis 0 bih 0 bus 0 buh 0 bds 0 bdh 0 bps 0 bph 0 bms 0 bmh 0 bgs 0 bgh 0 bns 0 bnh 0 pfs 0 pfh 0 pgs 0 pgh 0 gas 0 sas 0 PREFIX a get 5 hit 5 set 5 del 0 lcs 0 lis 0 lih 0 lds 0 ldh 0 lgs 0 lgh 0 scs 0 sis 0 sih 0 sds 0 sdh 0 sgs 0 sgh 0 ses 0 seh 0 mcs 0 mis 0 mih 0 mus 0 muh 0 mds 0 mdh 0 mgs 0 mgh 0 bcs 0 bis 0 bih 0 bus 0 buh 0 bds 0 bdh 0 bps 0 bph 0 bms 0 bmh 0 bgs 0 bgh 0 bns 0 bnh 0 pfs 0 pfh 0 pgs 0 pgh 0 gas 0 sas 0 PREFIX b get 2 hit 2 set 2 del 0 lcs 0 lis 0 lih 0 lds 0 ldh 0 lgs 0 lgh 0 scs 0 sis 0 sih 0 sds 0 sdh 0 sgs 0 sgh 0 ses 0 seh 0 mcs 0 mis 0 mih 0 mus 0 muh 0 mds 0 mdh 0 mgs 0 mgh 0 bcs 0 bis 0 bih 0 bus 0 buh 0 bds 0 bdh 0 bps 0 bph 0 bms 0 bmh 0 bgs 0 bgh 0 bns 0 bnh 0 pfs 0 pfh 0 pgs 0 pgh 0 gas 0 sas 0 END \uac01 prefix\uc758 \uc5f0\uc0b0 \ud1b5\uacc4 \uc815\ubcf4\uc5d0\uc11c get, hit, set, del\uc740 kv \uc720\ud615\uc758 items\uc5d0 \ub300\ud55c \uc5f0\uc0b0 \ud1b5\uacc4\uc774\uace0, 'l', 's', 'm', 'b'\ub85c \uc2dc\uc791\ud558\ub294 3 character\ub294 \uac01\uac01 list, set, map, b+tree \uc720\ud615\uc758 items\uc5d0 \ub300\ud55c \uc5f0\uc0b0 \ud1b5\uacc4\uc774\uba70, 'p'\ub85c \uc2dc\uc791\ud558\ub294 3 character\ub294 \ud2b9\ubcc4\ud788 b+tree\uc5d0 \ub300\ud55c position \uc5f0\uc0b0\uc758 \ud1b5\uacc4\uc774\ub2e4. gas\uc640 sas\ub294 item attribute \uc5f0\uc0b0\uc758 \ud1b5\uacc4\uc774\ub2e4. \uc5f0\uc0b0 \ud1b5\uacc4\uc5d0\uc11c \uac01 3 character\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. list \uc5f0\uc0b0 \ud1b5\uacc4 lcs - lop create \uc218\ud589 \ud69f\uc218 lis, lih - lop insert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 lds, ldh \u2013 lop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 lgs, lgh \u2013 lop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 set \uc5f0\uc0b0 \ud1b5\uacc4 scs - sop create \uc218\ud589 \ud69f\uc218 sis, sih - sop insert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 sds, sdh \u2013 sop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 sgs, sgh \u2013 sop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 ses, seh - sop exist \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 map \uc5f0\uc0b0 \ud1b5\uacc4 mcs - mop create \uc218\ud589 \ud69f\uc218 mis, mih - mop insert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 mus, muh \u2013 mop update \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 mds, mdh \u2013 mop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 mgs, mgh \u2013 mop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 b+tree \uc5f0\uc0b0 \ud1b5\uacc4 bcs \u2013 bop create \uc218\ud589 \ud69f\uc218 bis, bih \u2013 bop insert/upsert \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bus, buh \u2013 bop update \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bps, bph \u2013 bop incr(plus \uc758\ubbf8) \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bms, bmh - bop decr(minus \uc758\ubbf8) \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bds, bdh \u2013 bop delete \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bgs, bgh \u2013 bop get \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 bns, bnh \u2013 bop count \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 b+tree position \uc5f0\uc0b0 \ud1b5\uacc4 pfs, pfh - bop position \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 pgs, pgh - bop gbp \uc218\ud589 \ud69f\uc218\uc640 hit \uc218 item attribute \uc5f0\uc0b0 \ud1b5\uacc4 gas - getattr \uc218\ud589 \ud69f\uc218 sas - setattr \uc218\ud589 \ud69f\uc218","title":"9-4. Prefix \ud1b5\uacc4 \uc815\ubcf4"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-5-scrub","text":"Scrub \uc218\ud589 \uc0c1\ud0dc\ub97c \uc870\ud68c\ud55c \uacb0\uacfc \uc608\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. STAT scrubber:status stopped STAT scrubber:last_run 0 STAT scrubber:visited 0 STAT scrubber:cleaned 0 END status - \ud604\uc7ac scrub \uc791\uc5c5\uc774 running \uc911\uc778\uc9c0 stopped \uc0c1\ud0dc\uc778\uc9c0\ub97c \ub098\ud0c0\ub0b8\ub2e4. last_run - \uc774\uc804\uc5d0 \uc644\ub8cc\ub41c scrub \uc791\uc5c5\uc758 \uc18c\uc694 \uc2dc\uac04\uc744 \ucd08 \ub2e8\uc704\ub85c \ub098\ud0c0\ub0b8\ub2e4. visited - \ud604\uc7ac \uc218\ud589\uc911\uc778 \ub610\ub294 \uc774\uc804\uc5d0 \uc218\ud589\ub41c scrub\uc5d0\uc11c \uc811\uadfc\ud55c item\ub4e4\uc758 \uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4. cleaned - \ud604\uc7ac \uc218\ud589\uc911\uc778 \ub610\ub294 \uc774\uc804\uc5d0 \uc218\ud589\ub41c scrub\uc5d0\uc11c \uc0ad\uc81c\ud55c item\ub4e4\uc758 \uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4.","title":"9-5. Scrub \uc218\ud589 \uc0c1\ud0dc"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-6-slab-class-cache-key-dump","text":"slab class \ubcc4 LRU\uc5d0 \ub2ec\ub824\uc788\ub294 item\ub4e4\uc758 cache key\ub4e4\uc744 dump\ud558\uae30 \uc704\ud558\uc5ec, \uc544\ub798\uc758 stats cachedump \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. stats cachedump <slab_clsid> <limit> [ forward | backward [sticky] ]\\r\\n <slab_clsid> - dump \ub300\uc0c1 LRU\ub97c \uc9c0\uc815\ud558\uae30 \uc704\ud55c slab class id\uc774\ub2e4. <limit> - dump\ud558\uace0\uc790 \ud558\ub294 item \uac1c\uc218\ub85c\uc11c 0 ~ 200 \ubc94\uc704\uc5d0\uc11c \uc9c0\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. 0\uc774\uba74 default\ub85c 50\uac1c\ub85c \uc9c0\uc815\ub418\uba70, 200 \ucd08\uacfc\uc774\uba74 200\uac1c\ub9cc dump\ud55c\ub2e4. \ud574\ub2f9 LRU\uc758 head \ub610\ub294 tail\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec limit \uac1c item\ub4e4\uc758 cache key\ub4e4\uc744 dump\ud55c\ub2e4. forward or backward - LRU\uc758 head \ub610\ub294 tail \uc911\uc5d0 \uc5b4\ub514\uc5d0\uc11c dump\ub97c \uc2dc\uc791\ud560 \uac83\uc778\uc9c0\ub97c \uc9c0\uc815\ud55c\ub2e4. forward\uc774\uba74 head\uc5d0\uc11c \uc2dc\uc791\ud558\uace0, backward\uc774\uba74 tail\uc5d0\uc11c \uc2dc\uc791\ud55c\ub2e4. \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74, default\ub294 forward\uc774\ub2e4. sticky - \ud558\ub098\uc758 slab class\uc5d0\uc11c non-sticky item\ub4e4\uc758 LRU \ub9ac\uc2a4\ud2b8\uc640 sticky item\ub4e4\uc758 LRU \ub9ac\uc2a4\ud2b8\uac00 \ubcc4\ub3c4\ub85c \uc720\uc9c0\ub418\uc5b4 \uc788\ub2e4. sticky\uac00 \uc9c0\uc815\ub418\uba74 sticky LRU\uc5d0\uc11c dump\ud558\uace0, \uc9c0\uc815\ub418\uc9c0 \uc54a\uc73c\uba74 non-sticky LRU\uc5d0\uc11c dump\ud55c\ub2e4. Cachedump \uacb0\uacfc\uc758 \uc608\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ITEM a:bkey2 ITEM a:bkey1 ITEM b:bkey3 ITEM b:bkey1 ITEM b:bkey2 ITEM c:bkey1 ITEM c:bkey2 END","title":"9-6. slab class \ubcc4 cache key dump"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-7-config","text":"Arcus cache server\ub294 \ud2b9\uc815 configuration\uc5d0 \ub300\ud574 \ub3d9\uc801\uc73c\ub85c \ubcc0\uacbd\ud558\uac70\ub098 \ud604\uc7ac\uc758 \uac12\uc744 \uc870\ud68c\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \ub3d9\uc801\uc73c\ub85c \ubcc0\uacbd\uac00\ub2a5\ud55c configuration\ub4e4\uc740 \ud604\uc7ac \uc544\ub798\ub9cc \uc9c0\uc6d0\ud55c\ub2e4. verbosity memlimit zkfailstop maxconns","title":"9-7. Config \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#config-verbosity","text":"Arcus cache server\uc758 verbose log level\uc744 \ub3d9\uc801\uc73c\ub85c(restart \uc5c6\uc774) \ubcc0\uacbd/\uc870\ud68c\ud55c\ub2e4. config verbosity [<verbose>]\\r\\n <verbose>\ub294 \uc0c8\ub85c \uc9c0\uc815\ud560 verbose log level \uac12\uc73c\ub85c, \ud5c8\uc6a9\uac00\ub2a5\ud55c \ubc94\uc704\ub294 0 ~ 2\uc774\ub2e4. \uc774 \uc778\uc790\uac00 \uc0dd\ub7b5\ub418\uba74 \ud604\uc7ac \uc124\uc815\ub418\uc5b4 \uc788\ub294 verbose \uac12\uc744 \uc870\ud68c\ud55c\ub2e4.","title":"config verbosity"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#config-memlimit","text":"Arcus cache server \uad6c\ub3d9 \uc2dc\uc5d0 -m \uc635\uc158\uc73c\ub85c \uc124\uc815\ub41c memory limit\uc744 \ub3d9\uc801\uc73c\ub85c(restart \uc5c6\uc774) \ubcc0\uacbd/\uc870\ud68c\ud55c\ub2e4. config memlimit [<memsize>]\\r\\n <memsize>\ub294 \uc0c8\ub85c \uc9c0\uc815\ud560 memory limit\uc73c\ub85c MB \ub2e8\uc704\ub85c \uc124\uc815\ud558\uba70, Arcus cache server\uac00 \ud604\uc7ac \uc0ac\uc6a9 \uc911\uc778 \uba54\ubaa8\ub9ac \ud06c\uae30\uc778 tatal_malloced \ubcf4\ub2e4 \ud070 \ud06c\uae30\ub85c\ub9cc \uc124\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \uc778\uc790\uac00 \uc0dd\ub7b5\ub418\uba74 \ud604\uc7ac \uc124\uc815\ub418\uc5b4 \uc788\ub294 memory limit \uac12\uc744 \uc870\ud68c\ud55c\ub2e4.","title":"config memlimit"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#config-zkfailstop","text":"Arcus cache server\uc758 automatic failstop \uae30\ub2a5\uc744 on \ub610\ub294 off \ud55c\ub2e4. config zkfailstop [on|off]\\r\\n Network failure \uc0c1\ud0dc\uc5d0\uc11c \uc815\uc0c1\uc801\uc778 \uc11c\ube44\uc2a4\ub97c \uc9c4\ud589\ud558\uc9c0 \ubabb\ud558\ub294 cache server\uac00 cache cloud\uc5d0 \uadf8\ub300\ub85c \uc874\uc7ac\ud560 \uacbd\uc6b0, \ud574\ub2f9 cache server\uac00 \ub2f4\ub2f9\ud558\uace0 \uc788\ub294 data \ubc94\uc704\uc5d0 \ub300\ud55c \uc694\uccad\uc774 \ubaa8\ub450 \uc2e4\ud328\ud558\uace0 DB\uc5d0 \ubd80\ub2f4\uc744 \uc8fc\uac8c \ub41c\ub2e4. \ub610\ud55c \uc774\ud6c4\uc5d0 ZooKeeper\uc5d0 \uc7ac\uc5f0\uacb0 \ub418\ub354\ub77c\ub3c4 old data\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \uc788\uc73c\uba70 \uc774\ub85c \uc778\ud574 \uc751\uc6a9\uc5d0 \uc624\ub3d9\uc791\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. Arcus cache server\ub294 \uc774\ub97c \ud574\uacb0\ud558\uae30\uc704\ud574 ZooKeeper session timeout\uc774 \ubc1c\uc0dd\ud560 \uacbd\uc6b0 failed cache server\ub97c cache cloud\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \uc81c\uac70\ud558\ub294 automatic failstop \uae30\ub2a5\uc744 \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ud55c\ub2e4.","title":"config zkfailstop"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#config-maxconns","text":"Arcus cache server \uad6c\ub3d9 \uc2dc\uc5d0 -c \uc635\uc158\uc73c\ub85c \uc124\uc815\ub41c \ucd5c\ub300 \uc5f0\uacb0 \uc218\ub97c \ub3d9\uc801\uc73c\ub85c(restart \uc5c6\uc774) \ubcc0\uacbd/\uc870\ud68c\ud55c\ub2e4. config maxconns [<maxconn>]\\r\\n <maxconn>\ub294 \uc0c8\ub85c \uc9c0\uc815\ud560 \ucd5c\ub300 \uc5f0\uacb0 \uc218\ub85c\uc11c, \ud604\uc7ac\uc758 \uc5f0\uacb0 \uc218\ubcf4\ub2e4 10% \uc774\uc0c1\uc758 \ud070 \uac12\uc73c\ub85c\ub9cc \uc124\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \uc778\uc790\uac00 \uc0dd\ub7b5\ub418\uba74 \ud604\uc7ac \uc124\uc815\ub418\uc5b4 \uc788\ub294 \ucd5c\ub300 \uc5f0\uacb0 \uc218 \uac12\uc744 \uc870\ud68c\ud55c\ub2e4.","title":"config maxconns"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-8-command-logging","text":"Arcus cache server\uc5d0 \uc785\ub825\ub418\ub294 command\ub97c logging \ud55c\ub2e4. start \uba85\ub839\uc744 \uc2dc\uc791\uc73c\ub85c logging\uc774 \uc885\ub8cc\ub420 \ub54c \uae4c\uc9c0\uc758 \ubaa8\ub4e0 command\ub97c \uae30\ub85d\ud55c\ub2e4. \ub2e8, \uc131\ub2a5\uc720\uc9c0\ub97c \uc704\ud574 skip\ub418\ub294 command\uac00 \uc788\uc744 \uc218 \uc788\uc73c\uba70 stats \uba85\ub839\uc744 \ud1b5\ud574 \uadf8 \uc218\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. 10MB log \ud30c\uc77c 10\uac1c\ub97c \uc0ac\uc6a9\ud558\uba70, \ucd08\uacfc\ub420 \uacbd\uc6b0 \uc790\ub3d9 \uc885\ub8cc\ud55c\ub2e4. cmdlog [start [<log_file_path>] | stop | stats]\\r\\n <log_file_path>\ub294 logging \uc815\ubcf4\ub97c \uc800\uc7a5\ud560 file\uc758 path\uc774\ub2e4. - path\ub294 \uc0dd\ub7b5 \uac00\ub2a5\ud558\uba70, \uc0dd\ub7b5\ud560 \uacbd\uc6b0 default\ub85c \uc9c0\uc815\ub41c\ub2e4. - default\ub85c \uc790\ub3d9 \uc9c0\uc815\ud560 \uacbd\uc6b0 log file\uc740 memcached\uad6c\ub3d9\uc704\uce58/command_log \ub514\ub809\ud130\ub9ac \uc548\uc5d0 \uc0dd\uc131\ub41c\ub2e4. - command_log \ub514\ub809\ud130\ub9ac\ub294 \uc790\ub3d9\uc0dd\uc131\ub418\uc9c0 \uc54a\uc73c\uba70, memcached process\uac00 \uad6c\ub3d9\ub41c \uc704\uce58\uc5d0 \uc0dd\uc131\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. - \uc0dd\uc131\ub418\ub294 log file\uc758 \ud30c\uc77c\uba85\uc740 command_port_bgndate_bgntime_{n}.log \uc774\ub2e4. - path\ub294 \uc9c1\uc811 \uc9c0\uc815\ud560 \uacbd\uc6b0 \uc808\ub300 path, \uc0c1\ub300 path\uc9c0\uc815\uc774 \uac00\ub2a5\ud558\ub2e4. \ucd5c\uc885 \ud30c\uc77c\uc774 \uc0dd\uc131\ub420 \ub514\ub809\ud130\ub9ac\uae4c\uc9c0 \uc9c0\uc815\ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. start \uba85\ub839\uc758 \uacb0\uacfc\ub85c log file\uc5d0 \ucd9c\ub825\ub418\ub294 \ub0b4\uc6a9\uc740 \uc544\ub798\uc640 \uac19\ub2e4. --------------------------------------- format : <time> <client_ip> <command>\\n --------------------------------------- 19:14:45.530198 127.0.0.1 bop insert arcustest-Collection_Btree:vuRYyfqyeP0Egg8daGF72 0x626B65795F6279746541727279323239 0x45464C4147 80 create 0 600 4000 19:14:45.530387 127.0.0.1 lop insert arcustest-Collection_List:pGhEn6DFv5MixbYObBgp1 -1 64 create 0 600 4000 19:14:45.530221 127.0.0.1 lop insert arcustest-Collection_List:hhSAED2pFBH9xGqEgAeW1 -1 80 create 0 600 4000 19:14:45.530334 127.0.0.1 bop insert arcustest-Collection_Btree:RGSXLACxWpKwLPdC86qn0 0x626B65795F6279746541727279303331 0x45464C4147 80 create 0 600 4000 19:14:45.530385 127.0.0.1 lop insert arcustest-Collection_List:PwFTiFSEWlenireHcxNb2 -1 80 create 0 600 4000 19:14:45.530407 127.0.0.1 bop insert arcustest-Collection_Btree:P1lfJrJyVFyP0ogrw27h1 0x626B65795F6279746541727279313238 0x45464C4147 101 create 0 600 4000 19:14:45.530537 127.0.0.1 sop exist arcustest-Collection_Set:gTx8KDPBiufiGN9ArtgG3 81 pipe 19:14:45.530757 127.0.0.1 sop exist arcustest-Collection_Set:gTx8KDPBiufiGN9ArtgG3 81 stop \uba85\ub839\uc740 logging\uc774 \uc644\ub8cc\ub418\uae30 \uc804 \uc911\uc9c0\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. stats \uba85\ub839\uc740 \uac00\uc7a5 \ucd5c\uadfc \uc218\ud589\ub41c(\uc218\ud589 \uc911\uc778) command logging\uc758 \uc0c1\ud0dc\ub97c \uc870\ud68c\ud558\uace0 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Command logging stats : running //Not started | stopped by causes(request or overflow or error) | running The last running time : 20160126_192729 ~ 20160126_192742 //bgndate_bgntime ~ enddate_endtime The number of entered commands : 146783 //entered_commands The number of skipped commands : 0 //skipped_commands The number of log files : 1 //file_count The log file name: /Users/temp/command_11211_20160126_192729_{n}.log //path/file_name","title":"9-8. Command Logging \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-9-long-query-detect","text":"Arcus cache server\uc5d0\uc11c collection item\uc5d0 \ub300\ud55c \uc694\uccad \uc911\uc5d0\ub294 \uadf8 \ucc98\ub9ac \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9ac\ub294 \uc694\uccad\uc774 \uc874\uc7ac\ud55c\ub2e4. \uc774\ub97c detect\ud558\uae30 \uc704\ud55c \uae30\ub2a5\uc73c\ub85c lqdetect \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. start \uba85\ub839\uc744 \uc2dc\uc791\uc73c\ub85c detection\uc774 \uc885\ub8cc\ub420 \ub54c \uae4c\uc9c0 long query \uac00\ub2a5\uc131\uc774 \uc788\ub294 command\uc5d0 \ub300\ud558\uc5ec, \uadf8 command \ucc98\ub9ac\uc5d0\uc11c \uc811\uadfc\ud55c elements \uc218\uac00 \ud2b9\uc815 \uae30\uc900 \uc774\uc0c1\uc778 command\ub97c \ucd94\ucd9c, command \ubcc4\ub85c detect\ub41c \uba85\ub839\uc5b4 20\uac1c\ub97c \uc0d8\ud50c\ub85c \uc800\uc7a5\ud55c\ub2e4. long query \ub300\uc0c1\uc774 \ub418\ub294 \ubaa8\ub4e0 command\uc5d0 \ub300\ud574 20\uac1c\uc758 \uc0d8\ud50c \uc800\uc7a5\uc774 \uc644\ub8cc\ub418\uba74 \uc790\ub3d9 \uc885\ub8cc\ud55c\ub2e4. \uc800\uc7a5\ub41c \uc0d8\ud50c\uc740 show \uba85\ub839\uc744 \ud1b5\ud574 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. long query detection \ub300\uc0c1\uc774 \ub418\ub294 command\ub294 \uc544\ub798\uc640 \uac19\ub2e4. 1. sop get 2. lop insert 3. lop delete 4. lop get 5. bop delete 6. bop get 7. bop count 8. bop gbp lqdetect command\ub294 \uc544\ub798\uc640 \uac19\ub2e4. lqdetect [start [<detect_standard>] | stop | show | stats]\\r\\n <detect_standard>\ub294 long query\ub85c \ubd84\ub958\ud558\ub294 \uae30\uc900\uc73c\ub85c \ud574\ub2f9 \uc694\uccad\uc5d0\uc11c \uc811\uadfc\ud558\ub294 elements \uc218\ub85c \ub098\ud0c0\ub0b4\uba70, \uc5b4\ub5a4 \uc694\uccad\uc5d0\uc11c detection \uae30\uc900 \uc774\uc0c1\uc73c\ub85c \ub9ce\uc740 elements\ub97c \uc811\uadfc\ud558\ub294 \uc694\uccad\uc744 long query\ub85c \uad6c\ubd84\ud55c\ub2e4. \uc0dd\ub7b5 \uc2dc default standard\ub294 4000\uc774\ub2e4. start \uba85\ub839\uc73c\ub85c detection\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4. stop \uba85\ub839\uc740 detection\uc774 \uc644\ub8cc\ub418\uae30 \uc804 \uc911\uc9c0\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. show \uba85\ub839\uc740 \uc800\uc7a5\ub41c \uba85\ub839\uc5b4 \uc0d8\ud50c\uc744 \ucd9c\ub825\ud558\uace0 \uadf8 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. ----------------------------------------------------------- format : <time> <client_ip> <count> <command> <arguments>\\n ----------------------------------------------------------- sop get command entered count : 0 lop insert command entered count : 0 lop delete command entered count : 0 lop get command entered count : 92 17:56:33.276847 127.0.0.1 <46> lop get arcustest-Collection_List:YN8UCtNaoD4hHnMMwMJq1 0..44 17:56:33.278116 127.0.0.1 <43> lop get arcustest-Collection_List:orjTteJo7F0bWdXDDGcP0 0..41 17:56:33.279856 127.0.0.1 <48> lop get arcustest-Collection_List:r7ERYr3IdiD3RO8hLNvI3 0..46 17:56:33.304063 127.0.0.1 <45> lop get arcustest-Collection_List:0OWKNF3Z17NaTSaDTZG61 0..43 bop delete command entered count : 0 bop get command entered count : 81 17:56:33.142590 127.0.0.1 <47> bop get arcustest-Collection_Btree:0X6mqSiwBx6fEZVLuwKF0 0x626B65795F62797465417272793030..0x626B65795F6279746541727279303530 efilter 0 47 17:56:33.142762 127.0.0.1 <49> bop get arcustest-Collection_Btree:PiX8strLCv7iWywd1ZuE0 0x626B65795F62797465417272793030..0x626B65795F6279746541727279303530 efilter 0 49 17:56:33.143326 127.0.0.1 <46> bop get arcustest-Collection_Btree:PiX8strLCv7iWywd1ZuE1 0x626B65795F62797465417272793130..0x626B65795F6279746541727279313530 efilter 0 48 bop count command entered count : 0 bop gbp command entered count : 0 stats \uba85\ub839\uc740 \uac00\uc7a5 \ucd5c\uadfc \uc218\ud589\ub41c(\uc218\ud589 \uc911\uc778) long query detection\uc758 \uc0c1\ud0dc\ub97c \uc870\ud68c\ud558\uace0 \uadf8 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. Long query detection stats : running //stopped by causes(request or overflow) | running The last running time : 20160126_175629 ~ 0_0 //bgndata_bgntime ~ enddate_endtime The number of total long query commands : 1152 //detected_commands The detection standard : 43 //standard","title":"9-9. Long query detect \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-10-key-dump","text":"Arcus cache server\uc758 key\ub97c dump \ud55c\ub2e4. dump ascii command\ub294 \uc544\ub798\uc640 \uac19\ub2e4. dump start key [<prefix>] filepath\\r\\n dump stop\\r\\n stats dump\\r\\n dump start\uba85\ub839. - \uccab\ubc88\uc9f8 \uc778\uc790\ub294 \ubb34\uc870\uac74 \"key\"\uc774\ub2e4. - \ud604\uc7ac\ub294 \uc77c\ub2e8 key string\ub9cc\uc744 dump\ud55c\ub2e4. - \ud5a5\ud6c4\uc5d0 key or item\uc744 \uc120\ud0dd\ud560 \uc218 \uc788\uac8c \ud558\uc5ec, item\uc778 \uacbd\uc6b0 item \uc804\uccb4 \ub0b4\uc6a9\uc744 dump\ud560 \uc218 \uc788\ub2e4. - \ub450\ubc88\uc9f8 \uc778\uc790\ub294 <prefix>\ub294 cache key\uc758 prefix\ub97c \uc758\ubbf8\ud558\uba70, \uc0dd\ub7b5 \uac00\ub2a5\ud558\ub2e4. - \uc0dd\ub7b5\ud558\uba74, \ubaa8\ub4e0 key string\uc744 dump\ud55c\ub2e4. - \"<null>\"\uc744 \uc8fc\uba74, prefix\uac00 \uc5c6\ub294 key string\uc744 dump\ud55c\ub2e4. - \uc5b4\ub5a4 prefix\ub97c \uc8fc\uba74, \uadf8 prefix\uc758 \ubaa8\ub4e0 key string\uc744 dump\ud55c\ub2e4. - \uc138\ubc88\uc9f8 \uc778\uc790\ub294 <file path>\uc774\ub2e4. - \ubc18\ub4dc\uc2dc \uba85\uc2dc\ud574\uc57c \ud55c\ub2e4. - \uc808\ub300 path\ub85c \uc904 \uc218\ub3c4 \uc788\uc73c\uba70, \uc0c1\ub300 path\ub3c4 \uac00\ub2a5\ud558\ub2e4. - \uc0c1\ub300 path\uc774\uba74 memcached process\uac00 \uad6c\ub3d9\ub41c \uc704\uce58\uc5d0\uc11c\uc758 \uc0c1\ub300 path\uc774\ub2e4. dump stop\uc740 \ud639\uc2dc\ub098 dump \uc791\uc5c5\uc774 \ub108\ubb34 \uc624\ub824 \uac78\ub824 \uc911\uc9c0\ud558\uace0 \uc2f6\uc744 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. stats dump\ub294 \ud604\uc7ac \uc9c4\ud589\uc911\uc778 dump \ub610\ub294 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \uc218\ud589\ub41c dump\uc758 stats\uc744 \ubcf4\uc5ec \uc900\ub2e4. dump \ud30c\uc77c\uc740 \ubb34\uc870\uac74 \ud558\ub098\uc758 file\ub85c \ub9cc\ub4e4\uc5b4 \uc9c4\ub2e4. file \ub0b4\uc6a9\uc758 format\uc740 \uc544\ub798\uc640 \uac19\ub2e4. <type> <key_string> <exptime>\\n ... <type> <key_string> <exptime>\\n DUMP SUMMARY: { prefix=<prefix>, count=<count>, total=<total> elapsed=<elapsed> }\\n \uc704\uc758 \uacb0\uacfc\uc5d0\uc11c \uac01 \uc758\ubbf8\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - key dump \uacb0\uacfc \ubd80\ubd84 - \uc740 item type\uc73c\ub85c 1 character\ub85c \ud45c\uc2dc\ud55c\ub2e4. - \"K\" : kv - \"L\" : list - \"S\" : set - \"M\" : map - \"B\" : b+tree - \uc740 cache server\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 key string \uc774\ub2e4. - \uc740 key\uc758 exptime\uc73c\ub85c \uc544\ub798 \uac12\ub4e4 \uc911 \ud558\ub098\uc774\ub2e4. - 0 (exptime = 0\uc778 \uacbd\uc6b0) - -1 : sticky item (exptime = -1\uc778 \uacbd\uc6b0) - timestamp (exptime > 0\uc778 \uacbd\uc6b0)\uc73c\ub85c \"time since the Epoch (00:00:00 UTC, January 1, 1970), measured in seconds\" \uc774\ub2e4. - DUMP SUMMARY \ubd80\ubd84 - <prefix>\ub294 prefix name\uc774\ub2e4. - \ubaa8\ub4e0 key dump\uc774\uba74, \"<all>\"\uc774 \uba85\uc2dc\ub41c\ub2e4. - prefix \uc5c6\ub294 key dump\uc774\uba74, \"<null>\"\uc774 \uba85\uc2dc\ub41c\ub2e4. - \ud2b9\uc815 prefix\uc758 key dump\uc774\uba74, \uadf8 prefix name\uc774 \uba85\uc2dc\ub41c\ub2e4. - <count>\ub294 dump\ud55c key \uac1c\uc218\uc774\ub2e4. - <total>\uc740 cache\uc5d0 \uc788\ub294 \uc804\uccb4 key \uac1c\uc218\uc774\ub2e4. - <elapsed>\ub294 dump\ud558\ub294 \ub370 \uc18c\uc694\ub41c \uc2dc\uac04(\ub2e8\uc704: \ucd08) \uc774\ub2e4.","title":"9-10. Key dump \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-11-zkensemble","text":"Arcus cache server\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 ZooKeeper ensemble \uc124\uc815\uc5d0 \ub300\ud55c \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. zkensemble set <ensemble_list>\\r\\n zkensemble get\\r\\n zkensemble rejoin\\r\\n set \uba85\ub839\uc740 ZK ensemble \uc8fc\uc18c\ub97c \ubcc0\uacbd\ud55c\ub2e4. ensemble_list\ub294 <ip:port>,...,<ip:port> \uc640 \uac19\uc740 ZK server \ub4e4\uc758 list \ud615\ud0dc \ud639\uc740 ZK ensemble\uc758 \ub3c4\uba54\uc778 \uc8fc\uc18c \ud615\ud0dc\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4. get \uba85\ub839\uc740 ZK ensemble \uc8fc\uc18c\ub97c \uc870\ud68c\ud55c\ub2e4. \uc870\ud68c \uacb0\uacfc\ub294 <ip:port>,...,<ip:port> \ud615\uc2dd\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. rejoin \uba85\ub839\uc740 ZK ensemble \uacfc\uc758 \uc5f0\uacb0\uc744 \ub04a\uace0 cache cloud\uc5d0\uc11c \ube60\uc838 \ub300\uae30\ud558\ub294 cache server\ub97c \ub2e4\uc2dc ZK ensemble\uc5d0 \uc5f0\uacb0\ud558\ub3c4\ub85d \ud558\ub294 \uba85\ub839\uc774\ub2e4. Cache cloud\uc5d0\uc11c cache server\uac00 \ube60\uc838\ub098\uac00\ub294 \uacbd\uc6b0\ub294 \uc544\ub798\uc640 \uac19\ub2e4. - Failstop off \uc0c1\ud0dc\uc5d0\uc11c ZooKeeper session timeout\uc774 \uc77c\uc5b4\ub09c \uacbd\uc6b0 - \uc6b4\uc601\uc790\uc758 \uc2e4\uc218\ub85c cache_list\uc5d0 \ub4f1\ub85d\ub41c cache server\uc758 ephemeral znode\uac00 \uc0ad\uc81c\ub41c \uacbd\uc6b0","title":"9-11. Zkensemble \uba85\ub839"},{"location":"arcus-server/ARCUS-Server-Ascii-Protocol/1.11-(latest)/9.-Administration-Command/#9-12-help","text":"Arcus cache server\uc758 acsii command syntax\ub97c \uc870\ud68c\ud55c\ub2e4. help [<subcommand>]\\r\\n <subcommand>\ub85c\ub294 kv, lop, sop, mop, bop, stats, flush, config, etc\uac00 \uc788\uc73c\uba70, <subcommand>\uac00 \uc0dd\ub7b5\ub418\uba74, help \uba85\ub839\uc5d0\uc11c \uc0ac\uc6a9\uac00\ub2a5\ud55c subcommand \ubaa9\ub85d\uc774 \ucd9c\ub825\ub41c\ub2e4.","title":"9-12. Help \uba85\ub839"},{"location":"arcus-server/arcus-telnet-interface/1.11-(latest)/","text":"Arcus Telnet Interface Arcus cache server\uc758 \ub3d9\uc791\uc744 \uac04\ub2e8\ud788 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc73c\ub85c, telnet interface\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\ub2e4. Telnet \uc0ac\uc6a9\ubc95 OS prompt \uc0c1\uc5d0\uc11c \uc544\ub798\uc640 \uac19\uc774 telnet \uba85\ub839\uc744 \uc2e4\ud589\uc2dc\ud0a8\ub2e4. telnet \uba85\ub839\uc758 \uc778\uc790\ub85c\ub294 \uc5f0\uacb0\ud558\uace0\uc790 \ud558\ub294 Arcus cache server\uc778 memcached\uc758 IP\uc640 port number\ub97c \uc900\ub2e4. $ telnet {memcached-ip} {memcached-port} Telnet \uc5f0\uacb0 Localhost\uc5d0 11211 \ud3ec\ud2b8 \ubc88\ud638\ub85c memcached\uac00 \uad6c\ub3d9\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. telnet \uba85\ub839\uc73c\ub85c \ud574\ub2f9 memcached\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574, OS prompt \uc0c1\uc5d0\uc11c \uc544\ub798\uc758 \uba85\ub839\uc744 \uc218\ud589\ud55c\ub2e4. $ telnet localhost 11211 Trying 127.0.0.1... Connected to localhost.localdomain (127.0.0.1). Escape character is '^]'. telnet \uba85\ub839\uc73c\ub85c memcached\uc5d0 \uc5f0\uacb0\ud55c \uc774\ud6c4\uc5d0\ub294 Arcus ASCII \uba85\ub839\uc744 \uc9c1\uc811 \uc218\ud589\ud574 \ubcfc \uc218 \uc788\ub2e4. \uc544\ub798\uc5d0\uc11c \uadf8 \uc608\ub4e4\uc744 \ub4e0\ub2e4. Arcus ASCII \uba85\ub839\uc758 \uc790\uc138\ud55c \uc124\uba85\uc740 Arcus cache server ascii protocol \uc744 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. \uc608\uc81c 1 - get/set \ud558\ub098\uc758 key-value item\uc73c\ub85c <\"foo\", \"fooval\">\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud574, set \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. set foo 0 0 6 fooval set \uba85\ub839\uc758 \uc218\ud589 \uacb0\uacfc\ub85c \uc815\uc0c1\uc801\uc73c\ub85c key-value item\uc774 \uc800\uc7a5\ub418\uc5c8\ub2e4\ub294 string\uc774 \ub9ac\ud134\ub41c\ub2e4. STORED \uc800\uc7a5\ub41c foo item\uc744 \uc870\ud68c\ud558\uae30 \uc704\ud574, get \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. get foo get \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud55c foo item \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. VALUE foo 0 6 fooval END \uc608\uc81c 2 - b+tree \ud558\ub098\uc758 b+tree item\uc744 \uc0dd\uc131\ud558\uba74\uc11c 5\uac1c\uc758 elements\ub97c \ucd94\uac00\ud558\uae30 \uc704\ud574, \uc544\ub798\uc758 5\uac1c bop insert \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc218\ud589\ud55c\ub2e4. bop insert bkey1 90 6 create 11 0 0 datum9 bop insert bkey1 70 6 datum7 bop insert bkey1 50 6 datum5 bop insert bkey1 30 6 datum3 bop insert bkey1 10 6 datum1 5\uac1c bop insert \uba85\ub839\uc758 \uc218\ud589 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CREATED_STORED STORED STORED STORED STORED b+tree\uc5d0\uc11c 30\ubd80\ud130 80\uae4c\uc9c0\uc758 bkey(b+tree key) range\uc5d0 \uc18d\ud558\ub294 elements\ub97c \uc870\ud68c\ud558\uae30 \uc704\ud558\uc5ec, bop get \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. bop get bkey1 30..80 bop get \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud55c \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. VALUE 11 3 30 6 datum3 50 6 datum5 70 6 datum7 END Telnet \uc885\ub8cc \ud604\uc7ac\uc758 telnet \uc5f0\uacb0\uc744 \uc885\ub8cc\ud558\ub824\uba74, quit \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. quit","title":"1.11 (latest)"},{"location":"arcus-server/arcus-telnet-interface/1.11-(latest)/#arcus-telnet-interface","text":"Arcus cache server\uc758 \ub3d9\uc791\uc744 \uac04\ub2e8\ud788 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc73c\ub85c, telnet interface\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\ub2e4.","title":"Arcus Telnet Interface"},{"location":"arcus-server/arcus-telnet-interface/1.11-(latest)/#telnet","text":"OS prompt \uc0c1\uc5d0\uc11c \uc544\ub798\uc640 \uac19\uc774 telnet \uba85\ub839\uc744 \uc2e4\ud589\uc2dc\ud0a8\ub2e4. telnet \uba85\ub839\uc758 \uc778\uc790\ub85c\ub294 \uc5f0\uacb0\ud558\uace0\uc790 \ud558\ub294 Arcus cache server\uc778 memcached\uc758 IP\uc640 port number\ub97c \uc900\ub2e4. $ telnet {memcached-ip} {memcached-port}","title":"Telnet \uc0ac\uc6a9\ubc95"},{"location":"arcus-server/arcus-telnet-interface/1.11-(latest)/#telnet_1","text":"Localhost\uc5d0 11211 \ud3ec\ud2b8 \ubc88\ud638\ub85c memcached\uac00 \uad6c\ub3d9\ub418\uc5b4 \uc788\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. telnet \uba85\ub839\uc73c\ub85c \ud574\ub2f9 memcached\uc5d0 \uc5f0\uacb0\ud558\uae30 \uc704\ud574, OS prompt \uc0c1\uc5d0\uc11c \uc544\ub798\uc758 \uba85\ub839\uc744 \uc218\ud589\ud55c\ub2e4. $ telnet localhost 11211 Trying 127.0.0.1... Connected to localhost.localdomain (127.0.0.1). Escape character is '^]'. telnet \uba85\ub839\uc73c\ub85c memcached\uc5d0 \uc5f0\uacb0\ud55c \uc774\ud6c4\uc5d0\ub294 Arcus ASCII \uba85\ub839\uc744 \uc9c1\uc811 \uc218\ud589\ud574 \ubcfc \uc218 \uc788\ub2e4. \uc544\ub798\uc5d0\uc11c \uadf8 \uc608\ub4e4\uc744 \ub4e0\ub2e4. Arcus ASCII \uba85\ub839\uc758 \uc790\uc138\ud55c \uc124\uba85\uc740 Arcus cache server ascii protocol \uc744 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4.","title":"Telnet \uc5f0\uacb0"},{"location":"arcus-server/arcus-telnet-interface/1.11-(latest)/#1-getset","text":"\ud558\ub098\uc758 key-value item\uc73c\ub85c <\"foo\", \"fooval\">\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud574, set \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. set foo 0 0 6 fooval set \uba85\ub839\uc758 \uc218\ud589 \uacb0\uacfc\ub85c \uc815\uc0c1\uc801\uc73c\ub85c key-value item\uc774 \uc800\uc7a5\ub418\uc5c8\ub2e4\ub294 string\uc774 \ub9ac\ud134\ub41c\ub2e4. STORED \uc800\uc7a5\ub41c foo item\uc744 \uc870\ud68c\ud558\uae30 \uc704\ud574, get \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. get foo get \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud55c foo item \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. VALUE foo 0 6 fooval END","title":"\uc608\uc81c 1 - get/set"},{"location":"arcus-server/arcus-telnet-interface/1.11-(latest)/#2-btree","text":"\ud558\ub098\uc758 b+tree item\uc744 \uc0dd\uc131\ud558\uba74\uc11c 5\uac1c\uc758 elements\ub97c \ucd94\uac00\ud558\uae30 \uc704\ud574, \uc544\ub798\uc758 5\uac1c bop insert \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc218\ud589\ud55c\ub2e4. bop insert bkey1 90 6 create 11 0 0 datum9 bop insert bkey1 70 6 datum7 bop insert bkey1 50 6 datum5 bop insert bkey1 30 6 datum3 bop insert bkey1 10 6 datum1 5\uac1c bop insert \uba85\ub839\uc758 \uc218\ud589 \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. CREATED_STORED STORED STORED STORED STORED b+tree\uc5d0\uc11c 30\ubd80\ud130 80\uae4c\uc9c0\uc758 bkey(b+tree key) range\uc5d0 \uc18d\ud558\ub294 elements\ub97c \uc870\ud68c\ud558\uae30 \uc704\ud558\uc5ec, bop get \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. bop get bkey1 30..80 bop get \uba85\ub839\uc73c\ub85c \uc870\ud68c\ud55c \uacb0\uacfc\ub294 \uc544\ub798\uc640 \uac19\ub2e4. VALUE 11 3 30 6 datum3 50 6 datum5 70 6 datum7 END","title":"\uc608\uc81c 2 - b+tree"},{"location":"arcus-server/arcus-telnet-interface/1.11-(latest)/#telnet_2","text":"\ud604\uc7ac\uc758 telnet \uc5f0\uacb0\uc744 \uc885\ub8cc\ud558\ub824\uba74, quit \uba85\ub839\uc744 \uc785\ub825\ud55c\ub2e4. quit","title":"Telnet \uc885\ub8cc"}]}